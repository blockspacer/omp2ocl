OVERVIEW: LLVM 'Clang' Compiler: http://clang.llvm.org

USAGE: clang -cc1 [options] <inputs>

OPTIONS:
  -CC                     Enable comment output in -E mode, even from macro expansions
  -C                      Enable comment output in -E mode
  -D <macro>              Predefine the specified macro
  -Eonly                  Just run preprocessor, no output (for timings)
  -E                      Run preprocessor, emit preprocessed file
  -F <directory>          Add directory to framework include search path
  -H                      Show header includes and nesting depth
  -I <directory>          Add directory to include search path
  -MP                     Create phony target for each dependency (other than main file)
  -MQ <value>             Specify target to quote for dependency
  -MT <value>             Specify target for dependency
  -Os                     Optimize for size
  -O<value>               Optimization level
  -P                      Disable linemarker output in -E mode
  -S                      Emit native assembly code
  -U <macro>              Undefine the specified macro
  -Wlarge-by-value-copy <value>
                          Warn if a function definition returns or accepts an object larger in bytes that a given value
  -Wno-rewrite-macros     Silence ObjC rewriting warnings
  -Wwrite-strings         Remove const qualifier from string literals
  -add-plugin <name>      Use the named plugin action in addition to the default action
  -analyze-function <value>
                          Run analysis on specific function
  -analyzer-checker-help  Display the list of analyzer checkers that are available
  -analyzer-checker <value>
                          Choose analyzer checkers to enable
  -analyzer-constraints <value>
                          Source Code Analysis - Symbolic Constraint Engines
  -analyzer-disable-checker <value>
                          Choose analyzer checkers to disable
  -analyzer-display-progress
                          Emit verbose output about the analyzer's progress
  -analyzer-eagerly-assume
                          Eagerly assume the truth/falseness of some symbolic constraints
  -analyzer-inline-call   Experimental transfer function inlining callees when its definition is available.
  -analyzer-max-loop <value>
                          The maximum number of times the analyzer will go through a loop
  -analyzer-max-nodes <value>
                          The maximum number of nodes the analyzer can generate (150000 default, 0 = no limit)
  -analyzer-no-eagerly-trim-egraph
                          Don't eagerly remove uninteresting ExplodedNodes from the ExplodedGraph
  -analyzer-no-purge-dead Don't remove dead symbols, bindings, and constraints before processing a statement
  -analyzer-opt-analyze-headers
                          Force the static analyzer to analyze functions defined in header files
  -analyzer-opt-analyze-nested-blocks
                          Analyze the definitions of blocks in addition to functions
  -analyzer-output <value>
                          Source Code Analysis - Output Options
  -analyzer-store <value> Source Code Analysis - Abstract Memory Store Models
  -analyzer-viz-egraph-graphviz
                          Display exploded graph using GraphViz
  -analyzer-viz-egraph-ubigraph
                          Display exploded graph using Ubigraph
  -analyze                Run static analysis engine
  -arch=<value>           Generating OCL code for a particular architectures: nvidia, amd or intel
  -ast-dump-xml           Build ASTs and then debug dump them in a verbose XML format
  -ast-dump               Build ASTs and then debug dump them
  -ast-merge <ast file>   Merge the given AST file into the translation unit being compiled.
  -ast-print              Build ASTs and then pretty-print them
  -ast-view               Build ASTs and view them with GraphViz
  -backend-option <value> Additional arguments to forward to LLVM backend (during code gen)
  -boostcon               BoostCon workshop mode
  -cfg-add-implicit-dtors Add C++ implicit destructors to CFGs for all analyses
  -cfg-add-initializers   Add C++ initializers to CFGs for all analyses
  -chain-include <file>   Include and chain a header file after turning it into PCH
  -chained-pch            Whether to chain the new precompiled header to the old one.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-mad-enable          OpenCL only. Enable less precise MAD instructions to be generated.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. The default is optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable
  -code-completion-at <file>:<line>:<column>
                          Dump code-completion information at a location
  -code-completion-macros Include macros in code-completion results
  -code-completion-patterns
                          Include code patterns in code-completion results
  -collect_mlf=<value>    Turn on/off collecting of ml features [on|off], default is off
  -create-module          Create a module definition file
  -cxx-abi <value>        Target a particular C++ ABI type
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -debug_cg=<value>       Generate debuging host code. [on|off], default is off
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -detailed-preprocessing-record
                          include a detailed record of preprocessing actions
  -disable-free           Disable freeing of memory on exit
  -disable-llvm-optzns    Don't run LLVM optimization passes
  -disable-llvm-verifier  Don't run the LLVM IR verifier pass
  -disable-red-zone       Do not emit code that uses the red zone.
  -dump-build-information <filename>
                          output a dump of some build information to a file
  -dump-deserialized-decls
                          Dump declarations that are deserialized from PCH, for testing
  -dump-raw-tokens        Lex file in raw mode and dump raw tokens
  -dump-tokens            Run preprocessor, dump internal rep of tokens
  -dwarf-debug-flags <value>
                          The string to embed in the Dwarf debug flags record.
  -emit-codegen-only      Generate machine code, but discard output
  -emit-html              Output input source as HTML
  -emit-llvm-bc           Build ASTs then convert to LLVM, emit .bc file
  -emit-llvm-only         Build ASTs and convert to LLVM, discarding output
  -emit-llvm              Build ASTs then convert to LLVM, emit .ll file
  -emit-obj               Emit native object files
  -emit-pch               Generate pre-compiled header file
  -emit-pth               Generate pre-tokenized header file
  -error-on-deserialized-decl <value>
                          Emit error if a specific declaration is deserialized from PCH, for testing
  -faltivec               Enable AltiVec vector initializer syntax
  -fapple-kext            Use Apple's kernel extensions ABI
  -fblocks                enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fcatch-undefined-behavior
                          Generate runtime checks for undefined behavior.
  -fcolor-diagnostics     Use colors in diagnostics
  -fconstant-string-class <class name>
                          Specify the class to use for constant Objective-C string objects.
  -fcxx-exceptions        Enable C++ exceptions
  -fdata-sections         Place each data in its own section (ELF Only)
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-category <value>
                          Print diagnostic category
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print diagnostic name with mappable diagnostics
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdump-record-layouts   Dump record layout information
  -fdump-vtable-layouts   Dump the layouts of all vtables that will be emitted in a translation unit
  -femit-all-decls        Emit all declarations, even if unused
  -ferror-limit <N>       Set the maximum number of errors to emit before stopping (0 = no limit).
  -fexceptions            Enable support for exception handling
  -ffake-address-space-map
                          Use a fake address space map; OpenCL testing purposes only
  -fforbid-guard-variables
                          Emit an error if a C++ static local initializer would need a guard variable
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffunction-sections     Place each function in its own section (ELF Only)
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fhidden-weak-vtables   Generate weak vtables and RTTI with hidden visibility
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fix-what-you-can       Apply fix-it advice even in the presence of unfixable errors
  -fixit=<value>          Apply fix-it advice creating a file with the given suffix
  -fixit                  Apply fix-it advice to the input source
  -flimit-debug-info      Limit debug information produced to reduce size of debug binary
  -fmacro-backtrace-limit <N>
                          Set the maximum number of entries to print in a macro instantiation backtrace (0 = no limit).
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmessage-length <N>    Format message diagnostics so that they fit within N columns or fewer, when possible.
  -fms-extensions         Accept some non-standard constructs used in Microsoft header files 
  -fmsc-version=<value>   Version of the Microsoft C/C++ compiler to report in _MSC_VER (0 = don't define it (default))
  -fno-access-control     Disable C++ access control
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-bitfield-type-align
                          Ignore bit-field types when aligning structures
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-caret-diagnostics  Do not include source line and caret with diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-constant-cfstrings Enable creation of CodeFoundation-type constant strings
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-diagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-gnu-keywords       Disallow GNU-extension keywords regardless of language standard
  -fno-lax-vector-conversions
                          Disallow implicit conversions between vectors with a different number of elements or different element types
  -fno-merge-all-constants
                          Disallow merging of constants.
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-rtti               Disable generation of rtti information
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        Char is unsigned
  -fno-spell-checking     Disable spell-checking
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-validate-pch       Disable validation of precompiled headers
  -fobjc-default-synthesize-properties
                          enable the default synthesis of Objective-C properties
  -fobjc-dispatch-method=<value>
                          Objective-C dispatch method to use
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-gc-only          Use GC exclusively for Objective-C related memory management
  -fobjc-gc               Enable Objective-C garbage collection
  -fobjc-nonfragile-abi   enable objective-c's nonfragile abi
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails: best|all; defaults to all
  -fsjlj-exceptions       Use SjLj style exceptions
  -fsyntax-only           Run parser and perform semantic analysis
  -ftabstop <N>           Set the tab stop distance.
  -ftemplate-backtrace-limit <N>
                          Set the maximum number of entries to print in a template instantiation backtrace (0 = no limit).
  -ftemplate-depth <value>
                          Maximum depth of recursive template instantiation
  -ftime-report           Print the amount of time each phase of compilation takes
  -ftrapv-handler <function name>
                          Specify the function to be called on overflow.
  -ftrapv                 Trap on integer overflow
  -funroll-loops          Turn on loop unroller
  -fvisibility-inlines-hidden
                          Give inline C++ member functions default visibility by default
  -fvisibility <value>    Default symbol visibility
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -gpu_tls=<value>        Generate GPU TLs code. [on|off], default is off
  -g                      Generate source level debug information
  -header-include-file <value>
                          Filename (or -) to write header include output to
  -help                   Print this help text
  -idirafter <directory>  Add directory to AFTER include search path
  -imacros <file>         Include macros from file before parsing
  -import-module <value>  Import a module definition file
  -include-pch <file>     Include precompiled header file
  -include-pth <file>     Include file before parsing
  -include <file>         Include file before parsing
  -init-only              Only execute frontend initialization
  -iprefix <prefix>       Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem <directory>    Add directory to SYSTEM include search path
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -load <dsopath>         Load the named plugin (dynamic shared object)
  -localopt=<value>       Turn on/off local memory optimisation [on|off], default is on
  -loopswap=<value>       Turn on/off loop interchange [on|off], default is on
  -main-file-name <value> Main file name to use for debug info
  -masm-verbose           Generate verbose assembly output
  -mcode-model <value>    The code model to use
  -mconstructor-aliases   Emit complete constructors and destructors as aliases when possible
  -mdebug-pass <value>    Enable additional debug output
  -mdisable-fp-elim       Disable frame pointer elimination optimization
  -mfloat-abi <value>     The float ABI to use
  -mlimit-float-precision <value>
                          Limit float precision to the given value
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard.
  -mno-zero-initialized-in-bss
                          Do not put zero initialized data in the BSS
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions.
  -mregparm <value>       Limit the number of registers available for integer arguments
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelocation-model <value>
                          The relocation model to use
  -mrtd                   Make StdCall calling convention the default
  -msave-temp-labels      (integrated-as) Save temporary labels
  -msoft-float            Use software floating point
  -munwind-tables         Generate unwinding tables for all functions
  -no-code-completion-globals
                          Do not include global declarations in code-completion results.
  -no-implicit-float      Don't generate implicit floating point instructions (x86-only)
  -nobuiltininc           Disable builtin #include directories
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -nostdinc               Disable standard #include directories
  -omp2ocl                Converting OpenMP programs to OpenCL programs
  -o <path>               Specify output file
  -parallel-depth=<value> The parallel depth for the OCL code (1-3)
  -pg                     Enable mcount instrumentation
  -pic-level <value>      Value for __PIC__
  -plugin-arg-<name> <arg>
                          Pass <arg> to plugin <name>
  -plugin <name>          Use the named plugin action instead of the default action (use "help" to list available options)
  -preamble-bytes=<value> Assume that the precompiled header is a precompiled preamble covering the first N bytes of the main file
  -print-decl-contexts    Print DeclContexts and their Decls
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-preamble         Print the "preamble" of a file, which is a candidate for implicit precompiled headers.
  -print-stats            Print performance metrics and statistics
  -pthread                Support POSIX threads in generated code
  -relaxed-aliasing       Turn off Type Based Alias Analysis
  -relocatable-pch        Whether to build a relocatable precompiled header
  -remap-file <from>;<to> Replace the contents of the <from> file with the contents of the <to> file
  -resource-dir <value>   The directory which holds the compiler resource files
  -rewrite-macros         Expand macros without full preprocessing
  -rewrite-objc           Rewrite ObjC into C (code rewriter example)
  -rewrite-test           Rewriter playground
  -software-cache=<value> Enable software cache [on|off], default is on
  -stack-protector <value>
                          Enable stack protectors
  -static-define          Should __STATIC__ be defined
  -std=<value>            Language standard to compile for
  -sys-header-deps        Include system headers in dependency output
  -target-abi <value>     Target a particular ABI type
  -target-cpu <value>     Target a specific cpu type
  -target-feature <value> Target specific attributes
  -target-linker-version <value>
                          Target linker version
  -token-cache <path>     Use specified token cache file
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -trim-egraph            Only show error-related paths in the analysis graph
  -triple <value>         Specify target triple (e.g. i686-apple-darwin9)
  -undef                  undef all system defines
  -unoptimized-cfg        Generate unoptimized CFGs for all analyses
  -verify                 Verify emitted diagnostics and warnings
  -version                Print the compiler version
  -v                      Enable verbose output
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -w                      Suppress all warnings
  -x <value>              Input language type

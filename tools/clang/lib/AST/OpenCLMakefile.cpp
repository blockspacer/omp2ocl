#include "clang/Omp2Ocl/OpenCLMakefile.h"
#include "clang/Omp2Ocl/OpenCLCommon.h"
#include "clang/Omp2Ocl/OpenCLRoutine.h"
#include <time.h>
#include <sys/time.h>

using namespace clang;

void OpenCLMakefile::doIt()
{
	time_t rawtime;
	struct tm * t1;
	time ( &rawtime );
	t1 = localtime ( &rawtime );

	Out << "#############################################################################\n";
	Out << "# Generated by omp2ocl (" << VERSION_STRING << ") on: " << asctime(t1) << "\n";
	Out << "#############################################################################\n";
	Out << "\n";
	Out << "####### Compiler, tools and options\n";
	Out << "CC            = gcc\n";
	Out << "DEFINES       = \n";
	Out << "CFLAGS        = -std=c99 -O2 -W -D_REENTRANT $(DEFINES)\n";
	Out << "INCPATH       = -I$(OCLLIBHOME) -I${OCLHOME}/include -I/usr/include -I. -I.\n";
	Out << "LINK          = gcc\n";
	Out << "LFLAGS        = -Wl,-O1\n";
	Out << "LIBS          = $(SUBLIBS) -L$(OCLLIBHOME) -L${OCLHOME}/lib/x86_64 -lOpenCL -loclr -lm\n";
	Out << "AR            = ar cqs\n";
	Out << "RANLIB        = \n";
	Out << "DEL_FILE      = rm -rf\n";
	Out << "\n\n";
	Out << "####### Output directory\n";
	Out << "OBJECTS_DIR   = ./\n";

	Out << "\n";
	Out << "####### Files\n";

	string host = hostF;
	strReplace(host, ".host.c", "");

	Out << "TARGET        = " << host << "\n";
	Out << "SOURCES       = " << hostF << "\n";
	Out << "OBJECTS       := $(SOURCES:.c=.o)\n";
	Out << "\n";
	Out << "first: all\n\n";
	Out << "####### Implicit rules\n";
	Out << ".SUFFIXES: .o .c\n";
	Out << ".c.o:\n";
	Out << "	$(CC) -c $(CFLAGS) $(INCPATH) -o \"$@\" \"$<\"\n";
	Out << "\n";
	Out << "####### Build rules\n";
	Out << "all: $(TARGET)\n";
	Out << "$(TARGET):  $(OBJECTS) \n";
	Out << "	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)\n";
	Out << "\n";
	Out << "clean: \n";
	Out << "	-$(DEL_FILE) $(OBJECTS) $(TARGET)\n";
	Out << "compiler_clean: \n";
	Out << "\n";
	Out << "####### Compile\n";

	Out << host << ".host.o: " << host << ".host.c " <<  host << ".cl ocldef.h\n";
	Out << "\t$(CC) -c $(CFLAGS) $(INCPATH) -o " << host << ".host.o " << host << ".host.c\n";
}

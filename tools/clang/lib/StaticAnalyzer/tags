!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ACnt	Core/CFRefCount.cpp	/^  unsigned ACnt;$/;"	m	class:__anon10::RefVal	file:
AF	Core/CFRefCount.cpp	/^  ArgEffects::Factory AF;$/;"	m	class:__anon14::RetainSummaryManager	file:
ANALYSIS_CONSTRAINTS	Frontend/AnalysisConsumer.cpp	114;"	d	file:
ANALYSIS_DIAGNOSTICS	Frontend/AnalysisConsumer.cpp	92;"	d	file:
ANALYSIS_STORE	Frontend/AnalysisConsumer.cpp	106;"	d	file:
APIMisuse	Checkers/BasicObjCFoundationChecks.cpp	/^  APIMisuse(const char* name) : BugType(name, "API Misuse (Apple)") {}$/;"	f	class:__anon104::APIMisuse
APIMisuse	Checkers/BasicObjCFoundationChecks.cpp	/^class APIMisuse : public BugType {$/;"	c	namespace:__anon104	file:
ARCountFactory	Core/CFRefCount.cpp	/^  ARCounts::Factory    ARCountFactory;$/;"	m	class:__anon17::CFRefCount	file:
ARCounts	Core/CFRefCount.cpp	/^typedef llvm::ImmutableMap<SymbolRef, unsigned> ARCounts;$/;"	t	file:
ARPoolContents	Core/CFRefCount.cpp	/^typedef llvm::ImmutableMap<SymbolRef, ARCounts> ARPoolContents;$/;"	t	file:
ARStack	Core/CFRefCount.cpp	/^typedef llvm::ImmutableList<SymbolRef> ARStack;$/;"	t	file:
ASTFieldVisitor	Checkers/LLVMConventionsChecker.cpp	/^  ASTFieldVisitor(const CXXRecordDecl *root, BugReporter &br)$/;"	f	class:__anon69::ASTFieldVisitor
ASTFieldVisitor	Checkers/LLVMConventionsChecker.cpp	/^class ASTFieldVisitor {$/;"	c	namespace:__anon69	file:
AcquireLock	Checkers/PthreadLockChecker.cpp	/^void PthreadLockChecker::AcquireLock(CheckerContext &C, const CallExpr *CE,$/;"	f	class:PthreadLockChecker
ActionExprEngine	Frontend/AnalysisConsumer.cpp	/^static void ActionExprEngine(AnalysisConsumer &C, AnalysisManager& mgr,$/;"	f	file:
ActionObjCMemChecker	Frontend/AnalysisConsumer.cpp	/^static void ActionObjCMemChecker(AnalysisConsumer &C, AnalysisManager& mgr,$/;"	f	file:
ActionObjCMemCheckerAux	Frontend/AnalysisConsumer.cpp	/^static void ActionObjCMemCheckerAux(AnalysisConsumer &C, AnalysisManager& mgr,$/;"	f	file:
AddDerefSource	Checkers/DereferenceChecker.cpp	/^void DereferenceChecker::AddDerefSource(llvm::raw_ostream &os,$/;"	f	class:DereferenceChecker
AddEQ	Core/BasicConstraintManager.cpp	/^const GRState* BasicConstraintManager::AddEQ(const GRState* state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
AddEdge	Frontend/AnalysisConsumer.cpp	/^void UbigraphViz::AddEdge(ExplodedNode* Src, ExplodedNode* Dst) {$/;"	f	class:UbigraphViz
AddFID	Core/PlistDiagnostics.cpp	/^static void AddFID(FIDMap &FIDs, llvm::SmallVectorImpl<FileID> &V,$/;"	f	file:
AddNE	Core/BasicConstraintManager.cpp	/^const GRState* BasicConstraintManager::AddNE(const GRState* state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
AddToCluster	Core/RegionStore.cpp	/^  RegionCluster &AddToCluster(BindingKey K) {$/;"	f	class:__anon33::ClusterAnalysis
AddToWorkList	Core/RegionStore.cpp	/^  bool AddToWorkList(BindingKey K) {$/;"	f	class:__anon33::ClusterAnalysis
AddToWorkList	Core/RegionStore.cpp	/^  bool AddToWorkList(const MemRegion *R) {$/;"	f	class:__anon33::ClusterAnalysis
AddToWorkList	Core/RegionStore.cpp	/^  bool AddToWorkList(const MemRegion *R, RegionCluster &C) {$/;"	f	class:__anon33::ClusterAnalysis
AdjustedReturnValueChecker	Checkers/AdjustedReturnValueChecker.cpp	/^class AdjustedReturnValueChecker : $/;"	c	namespace:__anon138	file:
AggExprVisitor	Core/AggExprVisitor.cpp	/^  AggExprVisitor(const MemRegion *dest, ExplodedNode *N, ExplodedNodeSet &dst, $/;"	f	class:__anon56::AggExprVisitor
AggExprVisitor	Core/AggExprVisitor.cpp	/^class AggExprVisitor : public StmtVisitor<AggExprVisitor> {$/;"	c	namespace:__anon56	file:
Alias	Core/CFRefCount.cpp	/^  enum Kind { NoRet, Alias, OwnedSymbol, OwnedAllocatedSymbol,$/;"	e	enum:__anon10::RetEffect::Kind	file:
AllocBinding	Core/CFRefCount.cpp	/^    const MemRegion* AllocBinding;$/;"	m	class:__anon18::CFRefLeakReport	file:
AllocSite	Core/CFRefCount.cpp	/^    SourceLocation AllocSite;$/;"	m	class:__anon18::CFRefLeakReport	file:
AllocateFailed	Checkers/MallocChecker.cpp	/^  enum Kind { AllocateUnchecked, AllocateFailed, Released, Escaped,$/;"	e	enum:__anon98::RefState::Kind	file:
AllocateUnchecked	Checkers/MallocChecker.cpp	/^  enum Kind { AllocateUnchecked, AllocateFailed, Released, Escaped,$/;"	e	enum:__anon98::RefState::Kind	file:
AllocatesMemory	Checkers/LLVMConventionsChecker.cpp	/^static bool AllocatesMemory(QualType T) {$/;"	f	file:
AlreadyProcessed	Core/BugReporter.cpp	/^  llvm::SmallSet<SymbolRef, 10> AlreadyProcessed;$/;"	m	class:__anon42::ScanNotableSymbols	file:
AnalysisConsumer	Frontend/AnalysisConsumer.cpp	/^  AnalysisConsumer(const Preprocessor& pp,$/;"	f	class:__anon57::AnalysisConsumer
AnalysisConsumer	Frontend/AnalysisConsumer.cpp	/^class AnalysisConsumer : public ASTConsumer {$/;"	c	namespace:__anon57	file:
AnalyzerStatsChecker	Checkers/AnalyzerStatsChecker.cpp	/^class AnalyzerStatsChecker : public Checker<check::EndAnalysis> {$/;"	c	namespace:__anon84	file:
AnyObj	Core/CFRefCount.cpp	/^  enum ObjKind { CF, ObjC, AnyObj };$/;"	e	enum:__anon10::RetEffect::ObjKind	file:
AreTypesCompatible	Checkers/CheckObjCInstMethSignature.cpp	/^static bool AreTypesCompatible(QualType Derived, QualType Ancestor,$/;"	f	file:
ArgEffect	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	g	file:
ArgEffects	Core/CFRefCount.cpp	/^typedef llvm::ImmutableMap<unsigned,ArgEffect> ArgEffects;$/;"	t	file:
Args	Core/CFRefCount.cpp	/^  ArgEffects Args;$/;"	m	class:__anon11::RetainSummary	file:
ArrayBoundChecker	Checkers/ArrayBoundChecker.cpp	/^class ArrayBoundChecker : $/;"	c	namespace:__anon103	file:
ArrayBoundCheckerV2	Checkers/ArrayBoundCheckerV2.cpp	/^class ArrayBoundCheckerV2 : $/;"	c	namespace:__anon67	file:
ArrayToPointer	Core/BasicStore.cpp	/^  SVal ArrayToPointer(Loc Array) { return Array; }$/;"	f	class:__anon55::BasicStoreManager
ArrayToPointer	Core/FlatStore.cpp	/^SVal FlatStoreManager::ArrayToPointer(Loc Array) {$/;"	f	class:FlatStoreManager
ArrayToPointer	Core/RegionStore.cpp	/^SVal RegionStoreManager::ArrayToPointer(Loc Array) {$/;"	f	class:RegionStoreManager
Assumption	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	g	class:__anon65::IdempotentOperationChecker	file:
Assumption	Core/BugReporterVisitors.cpp	/^  const bool Assumption;$/;"	m	class:__anon51::TrackConstraintBRVisitor	file:
AssumptionMap	Checkers/IdempotentOperationChecker.cpp	/^      AssumptionMap;$/;"	t	class:__anon65::IdempotentOperationChecker	file:
AttrNonNullChecker	Checkers/AttrNonNullChecker.cpp	/^class AttrNonNullChecker$/;"	c	namespace:__anon134	file:
AutoRBIndex	Core/CFRefCount.cpp	/^static int AutoRBIndex = 0;$/;"	v	file:
AutoRCIndex	Core/CFRefCount.cpp	/^static int AutoRCIndex = 0;$/;"	v	file:
Autorelease	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	e	enum:ArgEffect	file:
AutoreleasePoolContents	Core/CFRefCount.cpp	/^namespace { class AutoreleasePoolContents {}; }$/;"	c	namespace:__anon15	file:
AutoreleaseStack	Core/CFRefCount.cpp	/^namespace { class AutoreleaseStack {}; }$/;"	c	namespace:__anon16	file:
B	Core/RegionStore.cpp	/^  RegionBindings B;$/;"	m	class:__anon33::ClusterAnalysis	file:
BFS	Core/CoreEngine.cpp	/^class BFS : public WorkList {$/;"	c	namespace:__anon27	file:
BFSBlockDFSContents	Core/CoreEngine.cpp	/^  class BFSBlockDFSContents : public WorkList {$/;"	c	namespace:__anon28	file:
BPAlloc	Core/CFRefCount.cpp	/^  llvm::BumpPtrAllocator BPAlloc;$/;"	m	class:__anon14::RetainSummaryManager	file:
BR	Checkers/CheckSecuritySyntaxOnly.cpp	/^  BugReporter &BR;$/;"	m	class:__anon122::WalkAST	file:
BR	Checkers/CheckSizeofPointer.cpp	/^  BugReporter &BR;$/;"	m	class:__anon81::WalkAST	file:
BR	Checkers/DeadStoresChecker.cpp	/^  BugReporter& BR;$/;"	m	class:__anon75::DeadStoreObs	file:
BR	Checkers/LLVMConventionsChecker.cpp	/^  BugReporter &BR;$/;"	m	class:__anon68::StringRefCheckerVisitor	file:
BR	Checkers/LLVMConventionsChecker.cpp	/^  BugReporter &BR;$/;"	m	class:__anon69::ASTFieldVisitor	file:
BR	Core/BugReporter.cpp	/^  BugReporter& BR;$/;"	m	class:__anon41::NotableSymbolHandler	file:
BR	Core/BugReporter.cpp	/^  GRBugReporter& BR;$/;"	m	class:__anon42::ScanNotableSymbols	file:
BR	Core/CFRefCount.cpp	/^  BugReporter *BR;$/;"	m	class:__anon17::CFRefCount	file:
BT	Checkers/ArrayBoundChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon103::ArrayBoundChecker	file:
BT	Checkers/ArrayBoundCheckerV2.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon67::ArrayBoundCheckerV2	file:
BT	Checkers/AttrNonNullChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon134::AttrNonNullChecker	file:
BT	Checkers/BasicObjCFoundationChecks.cpp	/^    mutable llvm::OwningPtr<APIMisuse> BT;$/;"	m	class:__anon105::NilArgChecker	file:
BT	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable llvm::OwningPtr<APIMisuse> BT;$/;"	m	class:__anon106::CFNumberCreateChecker	file:
BT	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable llvm::OwningPtr<APIMisuse> BT;$/;"	m	class:__anon108::CFRetainReleaseChecker	file:
BT	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon109::ClassReleaseChecker	file:
BT	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
BT	Checkers/CastSizeChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon83::CastSizeChecker	file:
BT	Checkers/CastToStructChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon87::CastToStructChecker	file:
BT	Checkers/DivZeroChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon133::DivZeroChecker	file:
BT	Checkers/FixedAddressChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon72::FixedAddressChecker	file:
BT	Checkers/MacOSXAPIChecker.cpp	/^    BugType **BT;$/;"	m	class:__anon127::SubCheck	file:
BT	Checkers/PointerArithChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon85::PointerArithChecker	file:
BT	Checkers/PointerSubChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon97::PointerSubChecker	file:
BT	Checkers/ReturnPointerRangeChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon96::ReturnPointerRangeChecker	file:
BT	Checkers/ReturnUndefChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon79::ReturnUndefChecker	file:
BT	Checkers/UndefBranchChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT;$/;"	m	class:__anon78::UndefBranchChecker	file:
BT	Checkers/UndefCapturedBlockVarChecker.cpp	/^ mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon112::UndefCapturedBlockVarChecker	file:
BT	Checkers/UndefResultChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon135::UndefResultChecker	file:
BT	Checkers/UndefinedArraySubscriptChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon128::UndefinedArraySubscriptChecker	file:
BT	Checkers/UndefinedAssignmentChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT;$/;"	m	class:__anon73::UndefinedAssignmentChecker	file:
BT	Checkers/UnixAPIChecker.cpp	/^    BugType **BT;$/;"	m	class:__anon137::SubCheck	file:
BT_BadFree	Checkers/MallocChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_BadFree;$/;"	m	class:__anon98::MallocChecker	file:
BT_Bounds	Checkers/CStringChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_Null, BT_Bounds, BT_BoundsWrite,$/;"	m	class:__anon121::CStringChecker	file:
BT_BoundsWrite	Checkers/CStringChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_Null, BT_Bounds, BT_BoundsWrite,$/;"	m	class:__anon121::CStringChecker	file:
BT_BreakJail	Checkers/ChrootChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_BreakJail;$/;"	m	class:__anon80::ChrootChecker	file:
BT_DoubleFree	Checkers/MallocChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_DoubleFree;$/;"	m	class:__anon98::MallocChecker	file:
BT_Incompatible	Checkers/IteratorsChecker.cpp	/^  BuiltinBug *BT_Invalid, *BT_Undefined, *BT_Incompatible;$/;"	m	class:__anon100::IteratorsChecker	file:
BT_Invalid	Checkers/IteratorsChecker.cpp	/^  BuiltinBug *BT_Invalid, *BT_Undefined, *BT_Incompatible;$/;"	m	class:__anon100::IteratorsChecker	file:
BT_Leak	Checkers/MallocChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_Leak;$/;"	m	class:__anon98::MallocChecker	file:
BT_NotCString	Checkers/CStringChecker.cpp	/^                                   BT_Overlap, BT_NotCString;$/;"	m	class:__anon121::CStringChecker	file:
BT_Null	Checkers/CStringChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_Null, BT_Bounds, BT_BoundsWrite,$/;"	m	class:__anon121::CStringChecker	file:
BT_Overlap	Checkers/CStringChecker.cpp	/^                                   BT_Overlap, BT_NotCString;$/;"	m	class:__anon121::CStringChecker	file:
BT_ResourceLeak	Checkers/StreamChecker.cpp	/^                                      BT_doubleclose, BT_ResourceLeak;$/;"	m	class:__anon113::StreamChecker	file:
BT_Undefined	Checkers/IteratorsChecker.cpp	/^  BuiltinBug *BT_Invalid, *BT_Undefined, *BT_Incompatible;$/;"	m	class:__anon100::IteratorsChecker	file:
BT_UseFree	Checkers/MallocChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_UseFree;$/;"	m	class:__anon98::MallocChecker	file:
BT_UseRelinquished	Checkers/MallocChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_UseRelinquished;$/;"	m	class:__anon98::MallocChecker	file:
BT_call_arg	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_call_arg;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_call_null	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_call_null;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_call_undef	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_call_undef;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_doubleclose	Checkers/StreamChecker.cpp	/^                                      BT_doubleclose, BT_ResourceLeak;$/;"	m	class:__anon113::StreamChecker	file:
BT_illegalwhence	Checkers/StreamChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_nullfp, BT_illegalwhence,$/;"	m	class:__anon113::StreamChecker	file:
BT_msg_arg	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_msg_arg;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_msg_ret	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_msg_ret;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_msg_undef	Checkers/CallAndMessageChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_msg_undef;$/;"	m	class:__anon71::CallAndMessageChecker	file:
BT_null	Checkers/DereferenceChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_null;$/;"	m	class:__anon66::DereferenceChecker	file:
BT_null	Checkers/ObjCAtSyncChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_null;$/;"	m	class:__anon86::ObjCAtSyncChecker	file:
BT_nullfp	Checkers/StreamChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_nullfp, BT_illegalwhence,$/;"	m	class:__anon113::StreamChecker	file:
BT_returnstack	Checkers/StackAddrEscapeChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_returnstack;$/;"	m	class:__anon132::StackAddrEscapeChecker	file:
BT_stackleak	Checkers/StackAddrEscapeChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_stackleak;$/;"	m	class:__anon132::StackAddrEscapeChecker	file:
BT_undef	Checkers/DereferenceChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_undef;$/;"	m	class:__anon66::DereferenceChecker	file:
BT_undef	Checkers/ObjCAtSyncChecker.cpp	/^  mutable llvm::OwningPtr<BuiltinBug> BT_undef;$/;"	m	class:__anon86::ObjCAtSyncChecker	file:
BT_undef	Checkers/VLASizeChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_undef;$/;"	m	class:__anon139::VLASizeChecker	file:
BT_zero	Checkers/VLASizeChecker.cpp	/^  mutable llvm::OwningPtr<BugType> BT_zero;$/;"	m	class:__anon139::VLASizeChecker	file:
BTypes	Checkers/MacOSXAPIChecker.cpp	/^  mutable BugType *BTypes[NumChecks];$/;"	m	class:__anon126::MacOSXAPIChecker	file:
BTypes	Checkers/UnixAPIChecker.cpp	/^  mutable BugType *BTypes[NumChecks];$/;"	m	class:__anon136::UnixAPIChecker	file:
BUILT_SOURCES	Checkers/Makefile	/^BUILT_SOURCES = Checkers.inc$/;"	m
BVC	Core/RegionStore.cpp	/^  BumpVectorContext BVC;$/;"	m	class:__anon33::ClusterAnalysis	file:
BVFactory	Core/FlatStore.cpp	/^  BindingVal::Factory BVFactory;$/;"	m	class:__anon23::FlatStoreManager	file:
BadRelease	Core/CFRefCount.cpp	/^    BadRelease(CFRefCount* tf) : CFRefBug(tf, "Bad release") {}$/;"	f	class:__anon18::BadRelease
BadRelease	Core/CFRefCount.cpp	/^  class BadRelease : public CFRefBug {$/;"	c	namespace:__anon18	file:
BasicConstraintManager	Core/BasicConstraintManager.cpp	/^  BasicConstraintManager(GRStateManager &statemgr, SubEngine &subengine)$/;"	f	class:__anon4::BasicConstraintManager
BasicConstraintManager	Core/BasicConstraintManager.cpp	/^class BasicConstraintManager$/;"	c	namespace:__anon4	file:
BasicStoreManager	Core/BasicStore.cpp	/^  BasicStoreManager(GRStateManager& mgr)$/;"	f	class:__anon55::BasicStoreManager
BasicStoreManager	Core/BasicStore.cpp	/^class BasicStoreManager : public StoreManager {$/;"	c	namespace:__anon55	file:
BasicStoreSubRegionMap	Core/BasicStore.cpp	/^  BasicStoreSubRegionMap() {}$/;"	f	class:__anon55::BasicStoreSubRegionMap
BasicStoreSubRegionMap	Core/BasicStore.cpp	/^class BasicStoreSubRegionMap : public SubRegionMap {$/;"	c	namespace:__anon55	file:
BatchedDiags	Core/HTMLDiagnostics.cpp	/^  std::vector<const PathDiagnostic*> BatchedDiags;$/;"	m	class:__anon29::HTMLDiagnostics	file:
BatchedDiags	Core/PlistDiagnostics.cpp	/^    std::vector<const PathDiagnostic*> BatchedDiags;$/;"	m	class:__anon7::PlistDiagnostics	file:
BeginValid	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	e	enum:__anon100::RefState::Kind	file:
BinaryOperatorData	Checkers/IdempotentOperationChecker.cpp	/^    BinaryOperatorData() : assumption(Possible), analysisContext(0) {}$/;"	f	struct:__anon65::IdempotentOperationChecker::BinaryOperatorData
BinaryOperatorData	Checkers/IdempotentOperationChecker.cpp	/^  struct BinaryOperatorData {$/;"	s	class:__anon65::IdempotentOperationChecker	file:
Bind	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::Bind(Store store, Loc loc, SVal V) {$/;"	f	class:BasicStoreManager
Bind	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::Bind(Store store, Loc L, SVal val) {$/;"	f	class:FlatStoreManager
Bind	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::Bind(Store store, Loc L, SVal V) {$/;"	f	class:RegionStoreManager
BindArray	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::BindArray(Store store, const TypedRegion* R,$/;"	f	class:RegionStoreManager
BindCompoundLiteral	Core/BasicStore.cpp	/^  StoreRef BindCompoundLiteral(Store store, const CompoundLiteralExpr*,$/;"	f	class:__anon55::BasicStoreManager
BindCompoundLiteral	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::BindCompoundLiteral(Store store,$/;"	f	class:FlatStoreManager
BindCompoundLiteral	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::BindCompoundLiteral(Store store,$/;"	f	class:RegionStoreManager
BindDecl	Core/BasicStore.cpp	/^  StoreRef BindDecl(Store store, const VarRegion *VR, SVal InitVal) {$/;"	f	class:__anon55::BasicStoreManager
BindDecl	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::BindDecl(Store store, const VarRegion *VR, $/;"	f	class:FlatStoreManager
BindDecl	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::BindDecl(Store store, const VarRegion *VR,$/;"	f	class:RegionStoreManager
BindDeclInternal	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::BindDeclInternal(Store store, const VarRegion* VR,$/;"	f	class:BasicStoreManager
BindDeclWithNoInit	Core/BasicStore.cpp	/^  StoreRef BindDeclWithNoInit(Store store, const VarRegion *VR) {$/;"	f	class:__anon55::BasicStoreManager
BindDeclWithNoInit	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::BindDeclWithNoInit(Store store, const VarRegion *VR){$/;"	f	class:FlatStoreManager
BindDeclWithNoInit	Core/RegionStore.cpp	/^  StoreRef BindDeclWithNoInit(Store store, const VarRegion *) {$/;"	f	class:__anon32::RegionStoreManager
BindDefault	Core/RegionStore.cpp	/^  StoreRef BindDefault(Store store, const MemRegion *R, SVal V) {$/;"	f	class:__anon32::RegionStoreManager
BindDefault	Core/Store.cpp	/^StoreRef StoreManager::BindDefault(Store store, const MemRegion *R, SVal V) {$/;"	f	class:StoreManager
BindExpr	Core/GRState.cpp	/^const GRState *GRState::BindExpr(const Stmt* S, SVal V, bool Invalidate) const{$/;"	f	class:GRState
BindStruct	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::BindStruct(Store store, const TypedRegion* R,$/;"	f	class:RegionStoreManager
Binding	Core/CFRefCount.cpp	/^    const MemRegion* Binding;$/;"	m	class:__anon19::FindUniqueBinding	file:
BindingKey	Core/RegionStore.cpp	/^  explicit BindingKey(const MemRegion *r, uint64_t offset, Kind k)$/;"	f	class:__anon30::BindingKey	file:
BindingKey	Core/RegionStore.cpp	/^class BindingKey {$/;"	c	namespace:__anon30	file:
BindingVal	Core/FlatStore.cpp	/^typedef llvm::ImmutableIntervalMap<SVal> BindingVal;$/;"	t	file:
BindingsPrinter	Core/CFRefCount.cpp	/^  class BindingsPrinter : public GRState::Printer {$/;"	c	class:__anon17::CFRefCount	file:
BindingsTy	Core/BasicStore.cpp	/^typedef llvm::ImmutableMap<const MemRegion*,SVal> BindingsTy;$/;"	t	file:
BlockID	Core/BlockCounter.cpp	/^  unsigned BlockID;$/;"	m	class:__anon36::CountKey	file:
BuiltinFunctionChecker	Checkers/BuiltinFunctionChecker.cpp	/^class BuiltinFunctionChecker : public Checker<eval::Call> {$/;"	c	namespace:__anon111	file:
CF	Core/CFRefCount.cpp	/^  enum ObjKind { CF, ObjC, AnyObj };$/;"	e	enum:__anon10::RetEffect::ObjKind	file:
CFDictionaryCreateII	Core/CFRefCount.cpp	/^  IdentifierInfo* CFDictionaryCreateII;$/;"	m	class:__anon14::RetainSummaryManager	file:
CFErrorDerefBug	Checkers/NSErrorChecker.cpp	/^  CFErrorDerefBug() : BugType("CFErrorRef* null dereference",$/;"	f	class:__anon116::CFErrorDerefBug
CFErrorDerefBug	Checkers/NSErrorChecker.cpp	/^class CFErrorDerefBug : public BugType {$/;"	c	namespace:__anon116	file:
CFErrorFunctionChecker	Checkers/NSErrorChecker.cpp	/^  CFErrorFunctionChecker() : II(0) { }$/;"	f	class:__anon115::CFErrorFunctionChecker
CFErrorFunctionChecker	Checkers/NSErrorChecker.cpp	/^class CFErrorFunctionChecker$/;"	c	namespace:__anon115	file:
CFErrorII	Checkers/NSErrorChecker.cpp	/^  mutable IdentifierInfo *NSErrorII, *CFErrorII;$/;"	m	class:__anon117::NSOrCFErrorDerefChecker	file:
CFErrorOut	Checkers/NSErrorChecker.cpp	/^namespace { struct CFErrorOut {}; }$/;"	s	namespace:__anon119	file:
CFGBlocksSet	Checkers/UnreachableCodeChecker.cpp	/^  typedef llvm::SmallSet<unsigned, DEFAULT_CFGBLOCKS> CFGBlocksSet;$/;"	t	class:__anon93::UnreachableCodeChecker	file:
CFGDumper	Checkers/DebugCheckers.cpp	/^class CFGDumper : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon64	file:
CFGViewer	Checkers/DebugCheckers.cpp	/^class CFGViewer : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon63	file:
CFNumberCreateChecker	Checkers/BasicObjCFoundationChecks.cpp	/^  CFNumberCreateChecker() : II(0) {}$/;"	f	class:__anon106::CFNumberCreateChecker
CFNumberCreateChecker	Checkers/BasicObjCFoundationChecks.cpp	/^class CFNumberCreateChecker : public Checker< check::PreStmt<CallExpr> > {$/;"	c	namespace:__anon106	file:
CFNumberType	Checkers/BasicObjCFoundationChecks.cpp	/^enum CFNumberType {$/;"	g	file:
CFRefBug	Core/CFRefCount.cpp	/^    CFRefBug(CFRefCount* tf, llvm::StringRef name)$/;"	f	class:__anon18::CFRefBug
CFRefBug	Core/CFRefCount.cpp	/^  class CFRefBug : public BugType {$/;"	c	namespace:__anon18	file:
CFRefCount	Core/CFRefCount.cpp	/^  CFRefCount(ASTContext& Ctx, bool gcenabled, const LangOptions& lopts)$/;"	f	class:__anon17::CFRefCount
CFRefCount	Core/CFRefCount.cpp	/^class CFRefCount : public TransferFuncs {$/;"	c	namespace:__anon17	file:
CFRefLeakReport	Core/CFRefCount.cpp	/^  class CFRefLeakReport : public CFRefReport {$/;"	c	namespace:__anon18	file:
CFRefLeakReport	Core/CFRefCount.cpp	/^CFRefLeakReport::CFRefLeakReport(CFRefBug& D, const CFRefCount &tf,$/;"	f	class:CFRefLeakReport
CFRefReport	Core/CFRefCount.cpp	/^    CFRefReport(CFRefBug& D, const CFRefCount &tf,$/;"	f	class:__anon18::CFRefReport
CFRefReport	Core/CFRefCount.cpp	/^  class CFRefReport : public RangedBugReport {$/;"	c	namespace:__anon18	file:
CFRetainReleaseChecker	Checkers/BasicObjCFoundationChecks.cpp	/^  CFRetainReleaseChecker(): Retain(0), Release(0) {}$/;"	f	class:__anon108::CFRetainReleaseChecker
CFRetainReleaseChecker	Checkers/BasicObjCFoundationChecks.cpp	/^class CFRetainReleaseChecker : public Checker< check::PreStmt<CallExpr> > {$/;"	c	namespace:__anon108	file:
CHECKER	Checkers/ClangSACheckerProvider.cpp	92;"	d	file:
CHECKER	Checkers/ClangSACheckerProvider.cpp	96;"	d	file:
CHECKER	Checkers/ClangSACheckers.h	24;"	d
CHECKER	Checkers/ClangSACheckers.h	27;"	d
CLANG_LEVEL	Checkers/Makefile	/^CLANG_LEVEL := ..\/..\/..$/;"	m
CLANG_LEVEL	Core/Makefile	/^CLANG_LEVEL := ..\/..\/..$/;"	m
CLANG_LEVEL	Frontend/Makefile	/^CLANG_LEVEL := ..\/..\/..$/;"	m
CLANG_LEVEL	Makefile	/^CLANG_LEVEL := ..\/..$/;"	m
CLocs	Core/BugReporter.cpp	/^  std::vector<ContextLocation> CLocs;$/;"	m	class:__anon43::EdgeBuilder	file:
CStringChecker	Checkers/CStringChecker.cpp	/^class CStringChecker : public Checker< eval::Call,$/;"	c	namespace:__anon121	file:
CStringLength	Checkers/CStringChecker.cpp	/^class CStringLength {$/;"	c	namespace:__anon121	file:
CallAndMessageChecker	Checkers/CallAndMessageChecker.cpp	/^class CallAndMessageChecker$/;"	c	namespace:__anon71	file:
CallExprWLItem	Core/CXXExprEngine.cpp	/^  CallExprWLItem(const CallExpr::const_arg_iterator &i, ExplodedNode *n)$/;"	f	class:__anon5::CallExprWLItem
CallExprWLItem	Core/CXXExprEngine.cpp	/^class CallExprWLItem {$/;"	c	namespace:__anon5	file:
CallSite	Core/BlockCounter.cpp	/^  const StackFrameContext *CallSite;$/;"	m	class:__anon36::CountKey	file:
CalledInit	Checkers/ObjCSelfInitChecker.cpp	/^namespace { struct CalledInit {}; }$/;"	s	namespace:__anon91	file:
CalledReserved	Checkers/IteratorsChecker.cpp	/^namespace { struct CalledReserved {}; }$/;"	s	namespace:__anon101	file:
CallocMem	Checkers/MallocChecker.cpp	/^void MallocChecker::CallocMem(CheckerContext &C, const CallExpr *CE) {$/;"	f	class:MallocChecker
CanVary	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::CanVary(const Expr *Ex,$/;"	f	class:IdempotentOperationChecker
CastRetrievedVal	Core/Store.cpp	/^SVal StoreManager::CastRetrievedVal(SVal V, const TypedRegion *R,$/;"	f	class:StoreManager
CastSizeChecker	Checkers/CastSizeChecker.cpp	/^class CastSizeChecker : public Checker< check::PreStmt<CastExpr> > {$/;"	c	namespace:__anon83	file:
CastToStructChecker	Checkers/CastToStructChecker.cpp	/^class CastToStructChecker : public Checker< check::PreStmt<CastExpr> > {$/;"	c	namespace:__anon87	file:
Chdir	Checkers/ChrootChecker.cpp	/^void ChrootChecker::Chdir(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:ChrootChecker
CheckASTMemory	Checkers/LLVMConventionsChecker.cpp	/^static void CheckASTMemory(const CXXRecordDecl *R, BugReporter &BR) {$/;"	f	file:
CheckBindContext	Core/CheckerManager.cpp	/^    CheckBindContext(const CheckersTy &checkers,$/;"	f	struct:__anon49::CheckBindContext
CheckBindContext	Core/CheckerManager.cpp	/^  struct CheckBindContext {$/;"	s	namespace:__anon49	file:
CheckBufferAccess	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::CheckBufferAccess(CheckerContext &C,$/;"	f	class:CStringChecker
CheckCall_getpw	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_getpw(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckCall_gets	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_gets(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckCall_mktemp	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_mktemp(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckCall_rand	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_rand(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckCall_random	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_random(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckCall_strcpy	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckCall_strcpy(const CallExpr *CE, const FunctionDecl *FD) {$/;"	f	class:WalkAST
CheckDeadSymbolsContext	Core/CheckerManager.cpp	/^    CheckDeadSymbolsContext(const CheckersTy &checkers, SymbolReaper &sr,$/;"	f	struct:__anon50::CheckDeadSymbolsContext
CheckDeadSymbolsContext	Core/CheckerManager.cpp	/^  struct CheckDeadSymbolsContext {$/;"	s	namespace:__anon50	file:
CheckDeclRef	Checkers/DeadStoresChecker.cpp	/^  void CheckDeclRef(DeclRefExpr* DR, Expr* Val, DeadStoreKind dsk,$/;"	f	class:__anon75::DeadStoreObs
CheckDispatchOnce	Checkers/MacOSXAPIChecker.cpp	/^static void CheckDispatchOnce(CheckerContext &C, const CallExpr *CE,$/;"	f	file:
CheckDoubleClose	Checkers/StreamChecker.cpp	/^const GRState *StreamChecker::CheckDoubleClose(const CallExpr *CE,$/;"	f	class:StreamChecker
CheckLocation	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::CheckLocation(CheckerContext &C,$/;"	f	class:CStringChecker
CheckLocationContext	Core/CheckerManager.cpp	/^    CheckLocationContext(const CheckersTy &checkers,$/;"	f	struct:__anon48::CheckLocationContext
CheckLocationContext	Core/CheckerManager.cpp	/^  struct CheckLocationContext {$/;"	s	namespace:__anon48	file:
CheckLoopConditionForFloat	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckLoopConditionForFloat(const ForStmt *FS) {$/;"	f	class:WalkAST
CheckMallocZero	Checkers/UnixAPIChecker.cpp	/^static void CheckMallocZero(CheckerContext &C, const UnixAPIChecker &UC,$/;"	f	file:
CheckNameOption	Checkers/ClangSACheckerProvider.cpp	/^struct CheckNameOption {$/;"	s	namespace:__anon131	file:
CheckNameOptionCompare	Checkers/ClangSACheckerProvider.cpp	/^static bool CheckNameOptionCompare(const CheckNameOption &LHS,$/;"	f	file:
CheckNameTable	Checkers/ClangSACheckerProvider.cpp	/^static const CheckNameOption CheckNameTable[] = {$/;"	v	file:
CheckNameTableSize	Checkers/ClangSACheckerProvider.cpp	/^        CheckNameTableSize = sizeof(CheckNameTable) \/ sizeof(CheckNameTable[0]);$/;"	v	file:
CheckNullStream	Checkers/StreamChecker.cpp	/^const GRState *StreamChecker::CheckNullStream(SVal SV, const GRState *state,$/;"	f	class:StreamChecker
CheckObjCInstMethSignature	Checkers/CheckObjCInstMethSignature.cpp	/^static void CheckObjCInstMethSignature(const ObjCImplementationDecl* ID,$/;"	f	file:
CheckObjCMessageContext	Core/CheckerManager.cpp	/^    CheckObjCMessageContext(bool isPreVisit, const CheckersTy &checkers,$/;"	f	struct:__anon47::CheckObjCMessageContext
CheckObjCMessageContext	Core/CheckerManager.cpp	/^  struct CheckObjCMessageContext {$/;"	s	namespace:__anon47	file:
CheckOpen	Checkers/UnixAPIChecker.cpp	/^static void CheckOpen(CheckerContext &C, const UnixAPIChecker &UC,$/;"	f	file:
CheckOverlap	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::CheckOverlap(CheckerContext &C,$/;"	f	class:CStringChecker
CheckPthreadOnce	Checkers/UnixAPIChecker.cpp	/^static void CheckPthreadOnce(CheckerContext &C, const UnixAPIChecker &,$/;"	f	file:
CheckRand	Checkers/CheckSecuritySyntaxOnly.cpp	/^  const bool CheckRand;$/;"	m	class:__anon122::WalkAST	file:
CheckStmtContext	Core/CheckerManager.cpp	/^    CheckStmtContext(bool isPreVisit, const CheckersTy &checkers,$/;"	f	struct:__anon46::CheckStmtContext
CheckStmtContext	Core/CheckerManager.cpp	/^  struct CheckStmtContext {$/;"	s	namespace:__anon46	file:
CheckStringRefAssignedTemporary	Checkers/LLVMConventionsChecker.cpp	/^static void CheckStringRefAssignedTemporary(const Decl *D, BugReporter &BR) {$/;"	f	file:
CheckUncheckedReturnValue	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::CheckUncheckedReturnValue(CallExpr *CE) {$/;"	f	class:WalkAST
CheckVarDecl	Checkers/DeadStoresChecker.cpp	/^  void CheckVarDecl(VarDecl* VD, Expr* Ex, Expr* Val,$/;"	f	class:__anon75::DeadStoreObs
Checkers	Core/CheckerManager.cpp	/^    const CheckersTy &Checkers;$/;"	m	struct:__anon46::CheckStmtContext	file:
Checkers	Core/CheckerManager.cpp	/^    const CheckersTy &Checkers;$/;"	m	struct:__anon47::CheckObjCMessageContext	file:
Checkers	Core/CheckerManager.cpp	/^    const CheckersTy &Checkers;$/;"	m	struct:__anon48::CheckLocationContext	file:
Checkers	Core/CheckerManager.cpp	/^    const CheckersTy &Checkers;$/;"	m	struct:__anon49::CheckBindContext	file:
Checkers	Core/CheckerManager.cpp	/^    const CheckersTy &Checkers;$/;"	m	struct:__anon50::CheckDeadSymbolsContext	file:
CheckersTy	Core/CheckerManager.cpp	/^    typedef llvm::SmallVectorImpl<CheckerManager::CheckStmtFunc> CheckersTy;$/;"	t	struct:__anon46::CheckStmtContext	file:
CheckersTy	Core/CheckerManager.cpp	/^    typedef std::vector<CheckerManager::CheckBindFunc> CheckersTy;$/;"	t	struct:__anon49::CheckBindContext	file:
CheckersTy	Core/CheckerManager.cpp	/^    typedef std::vector<CheckerManager::CheckDeadSymbolsFunc> CheckersTy;$/;"	t	struct:__anon50::CheckDeadSymbolsContext	file:
CheckersTy	Core/CheckerManager.cpp	/^    typedef std::vector<CheckerManager::CheckLocationFunc> CheckersTy;$/;"	t	struct:__anon48::CheckLocationContext	file:
CheckersTy	Core/CheckerManager.cpp	/^    typedef std::vector<CheckerManager::CheckObjCMessageFunc> CheckersTy;$/;"	t	struct:__anon47::CheckObjCMessageContext	file:
Chroot	Checkers/ChrootChecker.cpp	/^void ChrootChecker::Chroot(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:ChrootChecker
ChrootChecker	Checkers/ChrootChecker.cpp	/^  ChrootChecker() : II_chroot(0), II_chdir(0) {}$/;"	f	class:__anon80::ChrootChecker
ChrootChecker	Checkers/ChrootChecker.cpp	/^class ChrootChecker : public Checker<eval::Call, check::PreStmt<CallExpr> > {$/;"	c	namespace:__anon80	file:
ClangSACheckerProvider	Checkers/ClangSACheckerProvider.cpp	/^class ClangSACheckerProvider : public CheckerProvider {$/;"	c	namespace:__anon129	file:
ClassReleaseChecker	Checkers/BasicObjCFoundationChecks.cpp	/^class ClassReleaseChecker : public Checker<check::PreObjCMessage> {$/;"	c	namespace:__anon109	file:
Clearerr	Checkers/StreamChecker.cpp	/^void StreamChecker::Clearerr(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Closed	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	e	enum:__anon113::StreamState::Kind	file:
ClusterAnalysis	Core/RegionStore.cpp	/^  ClusterAnalysis(RegionStoreManager &rm, GRStateManager &StateMgr,$/;"	f	class:__anon33::ClusterAnalysis
ClusterAnalysis	Core/RegionStore.cpp	/^class ClusterAnalysis  {$/;"	c	namespace:__anon33	file:
ClusterM	Core/RegionStore.cpp	/^  ClusterMap ClusterM;$/;"	m	class:__anon33::ClusterAnalysis	file:
ClusterMap	Core/RegionStore.cpp	/^  typedef llvm::DenseMap<const MemRegion *, RegionCluster *> ClusterMap;$/;"	t	class:__anon33::ClusterAnalysis	file:
Cnt	Core/CFRefCount.cpp	/^  unsigned Cnt;$/;"	m	class:__anon10::RefVal	file:
Cntr	Frontend/AnalysisConsumer.cpp	/^  unsigned Cntr;$/;"	m	class:__anon58::UbigraphViz	file:
CompactPathDiagnostic	Core/BugReporter.cpp	/^static void CompactPathDiagnostic(PathDiagnostic &PD, const SourceManager& SM) {$/;"	f	file:
CompareDiagnostics	Core/PlistDiagnostics.cpp	/^struct CompareDiagnostics {$/;"	s	namespace:__anon6	file:
CompareReturnTypes	Checkers/CheckObjCInstMethSignature.cpp	/^static void CompareReturnTypes(const ObjCMethodDecl *MethDerived,$/;"	f	file:
ConstEq	Core/BasicConstraintManager.cpp	/^namespace { class ConstEq {}; }$/;"	c	namespace:__anon3	file:
ConstEqIndex	Core/BasicConstraintManager.cpp	/^static int ConstEqIndex = 0;$/;"	v	file:
ConstEqTy	Core/BasicConstraintManager.cpp	/^typedef llvm::ImmutableMap<SymbolRef,const llvm::APSInt*> ConstEqTy;$/;"	t	file:
ConstNotEq	Core/BasicConstraintManager.cpp	/^namespace { class ConstNotEq {}; }$/;"	c	namespace:__anon2	file:
ConstNotEqIndex	Core/BasicConstraintManager.cpp	/^static int ConstNotEqIndex = 0;$/;"	v	file:
ConstNotEqTy	Core/BasicConstraintManager.cpp	/^typedef llvm::ImmutableMap<SymbolRef,GRState::IntSetTy> ConstNotEqTy;$/;"	t	file:
Constraint	Core/BugReporterVisitors.cpp	/^  DefinedSVal Constraint;$/;"	m	class:__anon51::TrackConstraintBRVisitor	file:
ConstraintRange	Core/RangeConstraintManager.cpp	/^namespace { class ConstraintRange {}; }$/;"	c	namespace:__anon37	file:
ConstraintRangeIndex	Core/RangeConstraintManager.cpp	/^static int ConstraintRangeIndex = 0;$/;"	v	file:
ConstraintRangeTy	Core/RangeConstraintManager.cpp	/^typedef llvm::ImmutableMap<SymbolRef,RangeSet> ConstraintRangeTy;$/;"	t	file:
ContextLocation	Core/BugReporter.cpp	/^  ContextLocation(const PathDiagnosticLocation &L, bool isdead = false)$/;"	f	class:__anon43::ContextLocation
ContextLocation	Core/BugReporter.cpp	/^class ContextLocation : public PathDiagnosticLocation {$/;"	c	namespace:__anon43	file:
CopyLazyBindings	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::CopyLazyBindings(nonloc::LazyCompoundVal V,$/;"	f	class:RegionStoreManager
Count	Core/RegionStore.cpp	/^  unsigned Count;$/;"	m	class:__anon34::invalidateRegionsWorker	file:
CountKey	Core/BlockCounter.cpp	/^  CountKey(const StackFrameContext *CS, unsigned ID) $/;"	f	class:__anon36::CountKey
CountKey	Core/BlockCounter.cpp	/^class CountKey {$/;"	c	namespace:__anon36	file:
CountMap	Core/BlockCounter.cpp	/^typedef llvm::ImmutableMap<CountKey, unsigned> CountMap;$/;"	t	file:
CreateASTConsumer	Frontend/FrontendActions.cpp	/^ASTConsumer *AnalysisAction::CreateASTConsumer(CompilerInstance &CI,$/;"	f	class:AnalysisAction
CreateAnalysisConsumer	Frontend/AnalysisConsumer.cpp	/^ASTConsumer* ento::CreateAnalysisConsumer(const Preprocessor& pp,$/;"	f	class:ento
CreateBasicConstraintManager	Core/BasicConstraintManager.cpp	/^ConstraintManager* ento::CreateBasicConstraintManager(GRStateManager& statemgr,$/;"	f	class:ento
CreateBasicStoreManager	Core/BasicStore.cpp	/^StoreManager* ento::CreateBasicStoreManager(GRStateManager& StMgr) {$/;"	f	class:ento
CreateCXXTemporaryObject	Core/CXXExprEngine.cpp	/^void ExprEngine::CreateCXXTemporaryObject(const Expr *Ex, ExplodedNode *Pred,$/;"	f	class:ExprEngine
CreateConstraintMgr	Frontend/AnalysisConsumer.cpp	/^  ConstraintManagerCreator CreateConstraintMgr;$/;"	m	class:__anon57::AnalysisConsumer	file:
CreateFieldsOnlyRegionStoreManager	Core/RegionStore.cpp	/^StoreManager *ento::CreateFieldsOnlyRegionStoreManager(GRStateManager &StMgr) {$/;"	f	class:ento
CreateFlatStoreManager	Core/FlatStore.cpp	/^StoreManager *ento::CreateFlatStoreManager(GRStateManager &StMgr) {$/;"	f	class:ento
CreateRangeConstraintManager	Core/RangeConstraintManager.cpp	/^ConstraintManager* ento::CreateRangeConstraintManager(GRStateManager&,$/;"	f	class:ento
CreateRegionStoreManager	Core/RegionStore.cpp	/^StoreManager *ento::CreateRegionStoreManager(GRStateManager& StMgr) {$/;"	f	class:ento
CreateStoreMgr	Frontend/AnalysisConsumer.cpp	/^  StoreManagerCreator CreateStoreMgr;$/;"	m	class:__anon57::AnalysisConsumer	file:
CreateUbiViz	Frontend/AnalysisConsumer.cpp	/^static ExplodedNode::Auditor* CreateUbiViz() {$/;"	f	file:
Ctx	Checkers/DeadStoresChecker.cpp	/^  ASTContext &Ctx;$/;"	m	class:__anon75::DeadStoreObs	file:
Ctx	Core/CFRefCount.cpp	/^  ASTContext& Ctx;$/;"	m	class:__anon14::RetainSummaryManager	file:
Ctx	Core/RegionStore.cpp	/^  ASTContext &Ctx;$/;"	m	class:__anon33::ClusterAnalysis	file:
Ctx	Frontend/AnalysisConsumer.cpp	/^  ASTContext* Ctx;$/;"	m	class:__anon57::AnalysisConsumer	file:
CurrentLCtx	Core/RegionStore.cpp	/^  const StackFrameContext *CurrentLCtx;$/;"	m	class:__anon35::removeDeadBindingsWorker	file:
DEFAULT_CFGBLOCKS	Checkers/UnreachableCodeChecker.cpp	31;"	d	file:
DFS	Core/CoreEngine.cpp	/^class DFS : public WorkList {$/;"	c	namespace:__anon27	file:
DIRS	Makefile	/^DIRS := Checkers Frontend$/;"	m
DOTGraphTraits	Core/ExprEngine.cpp	/^  DOTGraphTraits (bool isSimple=false) : DefaultDOTGraphTraits(isSimple) {}$/;"	f	struct:llvm::DOTGraphTraits
DOTGraphTraits	Core/ExprEngine.cpp	/^struct DOTGraphTraits<ExplodedNode*> :$/;"	s	namespace:llvm	file:
DeadIncrement	Checkers/DeadStoresChecker.cpp	/^  enum DeadStoreKind { Standard, Enclosing, DeadIncrement, DeadInit };$/;"	e	enum:__anon75::DeadStoreObs::DeadStoreKind	file:
DeadInit	Checkers/DeadStoresChecker.cpp	/^  enum DeadStoreKind { Standard, Enclosing, DeadIncrement, DeadInit };$/;"	e	enum:__anon75::DeadStoreObs::DeadStoreKind	file:
DeadStoreKind	Checkers/DeadStoresChecker.cpp	/^  enum DeadStoreKind { Standard, Enclosing, DeadIncrement, DeadInit };$/;"	g	class:__anon75::DeadStoreObs	file:
DeadStoreObs	Checkers/DeadStoresChecker.cpp	/^  DeadStoreObs(const CFG &cfg, ASTContext &ctx,$/;"	f	class:__anon75::DeadStoreObs
DeadStoreObs	Checkers/DeadStoresChecker.cpp	/^class DeadStoreObs : public LiveVariables::ObserverTy {$/;"	c	namespace:__anon75	file:
DeadStoresChecker	Checkers/DeadStoresChecker.cpp	/^class DeadStoresChecker : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon77	file:
Dealloc	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	e	enum:ArgEffect	file:
DeallocGC	Core/CFRefCount.cpp	/^    DeallocGC(CFRefCount *tf)$/;"	f	class:__anon18::DeallocGC
DeallocGC	Core/CFRefCount.cpp	/^  class DeallocGC : public CFRefBug {$/;"	c	namespace:__anon18	file:
DeallocNotOwned	Core/CFRefCount.cpp	/^    DeallocNotOwned(CFRefCount *tf)$/;"	f	class:__anon18::DeallocNotOwned
DeallocNotOwned	Core/CFRefCount.cpp	/^  class DeallocNotOwned : public CFRefBug {$/;"	c	namespace:__anon18	file:
DecRef	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	e	enum:ArgEffect	file:
DecRefMsg	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	e	enum:ArgEffect	file:
Default	Core/RegionStore.cpp	/^  enum Kind { Direct = 0x0, Default = 0x1 };$/;"	e	enum:__anon30::BindingKey::Kind	file:
DefaultArgEffect	Core/CFRefCount.cpp	/^  ArgEffect   DefaultArgEffect;$/;"	m	class:__anon11::RetainSummary	file:
DefaultSummary	Core/CFRefCount.cpp	/^  RetainSummary DefaultSummary;$/;"	m	class:__anon14::RetainSummaryManager	file:
DenseMapInfo	Core/CFRefCount.cpp	/^template <> struct DenseMapInfo<ObjCSummaryKey> {$/;"	s	namespace:llvm	file:
DereferenceChecker	Checkers/DereferenceChecker.cpp	/^class DereferenceChecker$/;"	c	namespace:__anon66	file:
Dest	Core/AggExprVisitor.cpp	/^  const MemRegion *Dest;$/;"	m	class:__anon56::AggExprVisitor	file:
Diag	Core/TextPathDiagnostics.cpp	/^  Diagnostic &Diag;$/;"	m	class:__anon22::TextPathDiagnostics	file:
DiagCacheItem	Core/BugReporter.cpp	/^  DiagCacheItem(BugReport *R, PathDiagnostic *PD) {$/;"	f	class:__anon45::DiagCacheItem
DiagCacheItem	Core/BugReporter.cpp	/^class DiagCacheItem : public llvm::FoldingSetNode {$/;"	c	namespace:__anon45	file:
DigestAnalyzerOptions	Frontend/AnalysisConsumer.cpp	/^  void DigestAnalyzerOptions() {$/;"	f	class:__anon57::AnalysisConsumer
Dir	Frontend/AnalysisConsumer.cpp	/^  llvm::sys::Path Dir, Filename;$/;"	m	class:__anon58::UbigraphViz	file:
Direct	Core/RegionStore.cpp	/^  enum Kind { Direct = 0x0, Default = 0x1 };$/;"	e	enum:__anon30::BindingKey::Kind	file:
Directory	Core/HTMLDiagnostics.cpp	/^  llvm::sys::Path Directory, FilePrefix;$/;"	m	class:__anon29::HTMLDiagnostics	file:
DispatchOnce	Checkers/MacOSXAPIChecker.cpp	/^    DispatchOnce = 0,$/;"	e	enum:__anon126::MacOSXAPIChecker::SubChecks	file:
DispatchOnceF	Checkers/MacOSXAPIChecker.cpp	/^    DispatchOnceF,$/;"	e	enum:__anon126::MacOSXAPIChecker::SubChecks	file:
DisplayFunction	Frontend/AnalysisConsumer.cpp	/^  void DisplayFunction(const Decl *D) {$/;"	f	class:__anon57::AnalysisConsumer
DivZeroChecker	Checkers/DivZeroChecker.cpp	/^class DivZeroChecker : public Checker< check::PreStmt<BinaryOperator> > {$/;"	c	namespace:__anon133	file:
DoNothing	Core/CFRefCount.cpp	/^enum ArgEffect { Autorelease, Dealloc, DecRef, DecRefMsg, DoNothing,$/;"	e	enum:ArgEffect	file:
DoNothingByRef	Core/CFRefCount.cpp	/^                 DoNothingByRef, IncRefMsg, IncRef, MakeCollectable, MayEscape,$/;"	e	enum:ArgEffect	file:
DstSet	Core/AggExprVisitor.cpp	/^  ExplodedNodeSet &DstSet;$/;"	m	class:__anon56::AggExprVisitor	file:
E	Core/BugReporter.cpp	/^  ExplodedNode::const_succ_iterator I, E;$/;"	m	struct:__anon44::FRIEC_WLItem	file:
ENB	Core/CFRefCount.cpp	/^  EndOfFunctionNodeBuilder *ENB;$/;"	m	class:__anon9::GenericNodeBuilderRefCount	file:
ERROR_LEAK_START	Core/CFRefCount.cpp	/^    ERROR_LEAK_START,$/;"	e	enum:__anon10::RefVal::Kind	file:
ERROR_START	Core/CFRefCount.cpp	/^    ERROR_START,$/;"	e	enum:__anon10::RefVal::Kind	file:
EagerlyAssumeTag	Core/ExprEngine.cpp	/^static std::pair<const void*,const void*> EagerlyAssumeTag$/;"	v	file:
EdgeBuilder	Core/BugReporter.cpp	/^  EdgeBuilder(PathDiagnostic &pd, PathDiagnosticBuilder &pdb)$/;"	f	class:__anon43::EdgeBuilder
EdgeBuilder	Core/BugReporter.cpp	/^class EdgeBuilder {$/;"	c	namespace:__anon43	file:
EmitAlphaCounter	Core/HTMLDiagnostics.cpp	/^static void EmitAlphaCounter(llvm::raw_ostream& os, unsigned n) {$/;"	f	file:
EmitBadCall	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::EmitBadCall(BugType *BT, CheckerContext &C,$/;"	f	class:CallAndMessageChecker
EmitBasicReport	Core/BugReporter.cpp	/^void BugReporter::EmitBasicReport(llvm::StringRef name, llvm::StringRef str,$/;"	f	class:BugReporter
EmitBasicReport	Core/BugReporter.cpp	/^void BugReporter::EmitBasicReport(llvm::StringRef name,$/;"	f	class:BugReporter
EmitLocation	Core/PlistDiagnostics.cpp	/^static void EmitLocation(llvm::raw_ostream& o, const SourceManager &SM,$/;"	f	file:
EmitRange	Core/PlistDiagnostics.cpp	/^static void EmitRange(llvm::raw_ostream& o, const SourceManager &SM,$/;"	f	file:
EmitReport	Core/BugReporter.cpp	/^void BugReporter::EmitReport(BugReport* R) {$/;"	f	class:BugReporter
EmitStackError	Checkers/StackAddrEscapeChecker.cpp	/^void StackAddrEscapeChecker::EmitStackError(CheckerContext &C, const MemRegion *R,$/;"	f	class:StackAddrEscapeChecker
EmitString	Core/PlistDiagnostics.cpp	/^static llvm::raw_ostream& EmitString(llvm::raw_ostream& o,$/;"	f	file:
Enclosing	Checkers/DeadStoresChecker.cpp	/^  enum DeadStoreKind { Standard, Enclosing, DeadIncrement, DeadInit };$/;"	e	enum:__anon75::DeadStoreObs::DeadStoreKind	file:
EndPath	Core/CFRefCount.cpp	/^  bool EndPath;$/;"	m	class:__anon11::RetainSummary	file:
EndValid	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	e	enum:__anon100::RefState::Kind	file:
Eng	Core/AggExprVisitor.cpp	/^  ExprEngine &Eng;$/;"	m	class:__anon56::AggExprVisitor	file:
Eng	Core/CheckerManager.cpp	/^    ExprEngine &Eng;$/;"	m	struct:__anon46::CheckStmtContext	file:
Eng	Core/CheckerManager.cpp	/^    ExprEngine &Eng;$/;"	m	struct:__anon47::CheckObjCMessageContext	file:
Eng	Core/CheckerManager.cpp	/^    ExprEngine &Eng;$/;"	m	struct:__anon48::CheckLocationContext	file:
Eng	Core/CheckerManager.cpp	/^    ExprEngine &Eng;$/;"	m	struct:__anon49::CheckBindContext	file:
Eng	Core/CheckerManager.cpp	/^    ExprEngine &Eng;$/;"	m	struct:__anon50::CheckDeadSymbolsContext	file:
EntryMap	Checkers/CStringChecker.cpp	/^  typedef llvm::ImmutableMap<const MemRegion *, SVal> EntryMap;$/;"	t	class:__anon121::CStringLength	file:
EntryMap	Checkers/IteratorsChecker.cpp	/^  typedef llvm::ImmutableMap<const MemRegion *, RefState> EntryMap;$/;"	t	class:__anon100::IteratorState	file:
Equal	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
ErrorDeallocGC	Core/CFRefCount.cpp	/^    ErrorDeallocGC, \/\/ Calling -dealloc with GC enabled.$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorDeallocNotOwned	Core/CFRefCount.cpp	/^    ErrorDeallocNotOwned, \/\/ -dealloc called on non-owned object.$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorGCLeakReturned	Core/CFRefCount.cpp	/^    ErrorGCLeakReturned,$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorLeak	Core/CFRefCount.cpp	/^    ErrorLeak,  \/\/ A memory leak due to excessive reference counts.$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorLeakReturned	Core/CFRefCount.cpp	/^    ErrorLeakReturned, \/\/ A memory leak due to the returning method not having$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorOutFlag	Checkers/NSErrorChecker.cpp	/^typedef llvm::ImmutableMap<SymbolRef, unsigned> ErrorOutFlag;$/;"	t	file:
ErrorOverAutorelease	Core/CFRefCount.cpp	/^    ErrorOverAutorelease,$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorReleaseNotOwned	Core/CFRefCount.cpp	/^    ErrorReleaseNotOwned, \/\/ Release of an object that was not owned.$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorReturnedNotOwned	Core/CFRefCount.cpp	/^    ErrorReturnedNotOwned$/;"	e	enum:__anon10::RefVal::Kind	file:
ErrorUseAfterRelease	Core/CFRefCount.cpp	/^    ErrorUseAfterRelease, \/\/ Object used after released.$/;"	e	enum:__anon10::RefVal::Kind	file:
Escaped	Checkers/DeadStoresChecker.cpp	/^  llvm::SmallPtrSet<VarDecl*, 20> Escaped;$/;"	m	class:__anon75::DeadStoreObs	file:
Escaped	Checkers/DeadStoresChecker.cpp	/^  llvm::SmallPtrSet<VarDecl*, 20> Escaped;$/;"	m	class:__anon76::FindEscaped	file:
Escaped	Checkers/MallocChecker.cpp	/^  enum Kind { AllocateUnchecked, AllocateFailed, Released, Escaped,$/;"	e	enum:__anon98::RefState::Kind	file:
Escaped	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	e	enum:__anon113::StreamState::Kind	file:
Ex	Core/RegionStore.cpp	/^  const Expr *Ex;$/;"	m	class:__anon34::invalidateRegionsWorker	file:
ExecuteWorkList	Core/CoreEngine.cpp	/^bool CoreEngine::ExecuteWorkList(const LocationContext *L, unsigned Steps,$/;"	f	class:CoreEngine
ExecuteWorkListWithInitialState	Core/CoreEngine.cpp	/^void CoreEngine::ExecuteWorkListWithInitialState(const LocationContext *L, $/;"	f	class:CoreEngine
ExecutionContinues	Core/BugReporter.cpp	/^PathDiagnosticBuilder::ExecutionContinues(const ExplodedNode* N) {$/;"	f	class:PathDiagnosticBuilder
ExecutionContinues	Core/BugReporter.cpp	/^PathDiagnosticBuilder::ExecutionContinues(llvm::raw_string_ostream& os,$/;"	f	class:PathDiagnosticBuilder
ExprEngine	Core/ExprEngine.cpp	/^ExprEngine::ExprEngine(AnalysisManager &mgr, TransferFuncs *tf)$/;"	f	class:ExprEngine
F	Core/RangeConstraintManager.cpp	/^  RangeSet::Factory F;$/;"	m	class:__anon39::RangeConstraintManager	file:
F	Core/RegionStore.cpp	/^  Set::Factory F;$/;"	m	class:__anon32::RegionStoreSubRegionMap	file:
FIDMap	Core/PlistDiagnostics.cpp	/^typedef llvm::DenseMap<FileID, unsigned> FIDMap;$/;"	t	file:
FRIEC_WLItem	Core/BugReporter.cpp	/^  FRIEC_WLItem(const ExplodedNode *n)$/;"	f	struct:__anon44::FRIEC_WLItem
FRIEC_WLItem	Core/BugReporter.cpp	/^struct FRIEC_WLItem {$/;"	s	namespace:__anon44	file:
Factory	Core/BlockCounter.cpp	/^BlockCounter::Factory::Factory(llvm::BumpPtrAllocator& Alloc) {$/;"	f	class:BlockCounter::Factory
Factory	Core/RangeConstraintManager.cpp	/^  typedef PrimRangeSet::Factory Factory;$/;"	t	class:__anon38::RangeSet	file:
Fclose	Checkers/StreamChecker.cpp	/^void StreamChecker::Fclose(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Features	Core/RegionStore.cpp	/^  const RegionStoreFeatures Features;$/;"	m	class:__anon32::RegionStoreManager	file:
Feof	Checkers/StreamChecker.cpp	/^void StreamChecker::Feof(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Ferror	Checkers/StreamChecker.cpp	/^void StreamChecker::Ferror(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Fgetpos	Checkers/StreamChecker.cpp	/^void StreamChecker::Fgetpos(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
FieldChain	Checkers/LLVMConventionsChecker.cpp	/^  llvm::SmallVector<FieldDecl*, 10> FieldChain;$/;"	m	class:__anon69::ASTFieldVisitor	file:
FilePrefix	Core/HTMLDiagnostics.cpp	/^  llvm::sys::Path Directory, FilePrefix;$/;"	m	class:__anon29::HTMLDiagnostics	file:
Filename	Frontend/AnalysisConsumer.cpp	/^  llvm::sys::Path Dir, Filename;$/;"	m	class:__anon58::UbigraphViz	file:
Fileno	Checkers/StreamChecker.cpp	/^void StreamChecker::Fileno(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
FindBlockDeclRefExpr	Checkers/UndefCapturedBlockVarChecker.cpp	/^static const BlockDeclRefExpr *FindBlockDeclRefExpr(const Stmt *S,$/;"	f	file:
FindBlocks	Frontend/AnalysisConsumer.cpp	/^static void FindBlocks(DeclContext *D, llvm::SmallVectorImpl<Decl*> &WL) {$/;"	f	file:
FindEscaped	Checkers/DeadStoresChecker.cpp	/^  FindEscaped(CFG *c) : cfg(c) {}$/;"	f	class:__anon76::FindEscaped
FindEscaped	Checkers/DeadStoresChecker.cpp	/^class FindEscaped : public CFGRecStmtDeclVisitor<FindEscaped>{$/;"	c	namespace:__anon76	file:
FindExpr	Checkers/UndefBranchChecker.cpp	/^    const Expr* FindExpr(const Expr* Ex) {$/;"	f	struct:__anon78::UndefBranchChecker::FindUndefExpr
FindGDM	Core/GRState.cpp	/^void* const* GRState::FindGDM(void* K) const {$/;"	f	class:GRState
FindGDMContext	Core/GRState.cpp	/^GRStateManager::FindGDMContext(void* K,$/;"	f	class:GRStateManager
FindLastStoreBRVisitor	Core/BugReporterVisitors.cpp	/^  FindLastStoreBRVisitor(SVal v, const MemRegion *r)$/;"	f	class:__anon51::FindLastStoreBRVisitor
FindLastStoreBRVisitor	Core/BugReporterVisitors.cpp	/^class FindLastStoreBRVisitor : public BugReporterVisitor {$/;"	c	namespace:__anon51	file:
FindReportInEquivalenceClass	Core/BugReporter.cpp	/^FindReportInEquivalenceClass(BugReportEquivClass& EQ,$/;"	f	file:
FindUndefExpr	Checkers/UndefBranchChecker.cpp	/^    FindUndefExpr(GRStateManager& V, const GRState* S) : VM(V), St(S) {}$/;"	f	struct:__anon78::UndefBranchChecker::FindUndefExpr
FindUndefExpr	Checkers/UndefBranchChecker.cpp	/^  struct FindUndefExpr {$/;"	s	class:__anon78::UndefBranchChecker	file:
FindUniqueBinding	Core/CFRefCount.cpp	/^    FindUniqueBinding(SymbolRef sym) : Sym(sym), Binding(0), First(true) {}$/;"	f	class:__anon19::FindUniqueBinding
FindUniqueBinding	Core/CFRefCount.cpp	/^  class FindUniqueBinding :$/;"	c	namespace:__anon19	file:
FindUnreachableEntryPoints	Checkers/UnreachableCodeChecker.cpp	/^void UnreachableCodeChecker::FindUnreachableEntryPoints(const CFGBlock *CB,$/;"	f	class:UnreachableCodeChecker
First	Core/CFRefCount.cpp	/^    bool First;$/;"	m	class:__anon19::FindUniqueBinding	file:
FixedAddressChecker	Checkers/FixedAddressChecker.cpp	/^class FixedAddressChecker $/;"	c	namespace:__anon72	file:
FlatStoreManager	Core/FlatStore.cpp	/^  FlatStoreManager(GRStateManager &mgr) $/;"	f	class:__anon23::FlatStoreManager
FlatStoreManager	Core/FlatStore.cpp	/^class FlatStoreManager : public StoreManager {$/;"	c	namespace:__anon23	file:
FlushDiagnostics	Core/HTMLDiagnostics.cpp	/^HTMLDiagnostics::FlushDiagnostics(llvm::SmallVectorImpl<std::string> *FilesMade)$/;"	f	class:HTMLDiagnostics
FlushDiagnostics	Core/PlistDiagnostics.cpp	/^void PlistDiagnostics::FlushDiagnostics(llvm::SmallVectorImpl<std::string>$/;"	f	class:PlistDiagnostics
FlushDiagnostics	Core/TextPathDiagnostics.cpp	/^  void FlushDiagnostics(llvm::SmallVectorImpl<std::string> *FilesMade) { }$/;"	f	class:__anon22::TextPathDiagnostics
FlushReport	Core/BugReporter.cpp	/^void BugReporter::FlushReport(BugReportEquivClass& EQ) {$/;"	f	class:BugReporter
FlushReports	Core/BugReporter.cpp	/^void BugReporter::FlushReports() {$/;"	f	class:BugReporter
FlushReports	Core/BugReporter.cpp	/^void BugType::FlushReports(BugReporter &BR) {}$/;"	f	class:BugType
FoldingSetTrait	Core/BasicValueFactory.cpp	/^template<> struct FoldingSetTrait<SValData> {$/;"	s	namespace:llvm	file:
FoldingSetTrait	Core/BasicValueFactory.cpp	/^template<> struct FoldingSetTrait<SValPair> {$/;"	s	namespace:llvm	file:
FoldingSetTrait	Core/CFRefCount.cpp	/^template <> struct FoldingSetTrait<ArgEffect> {$/;"	s	namespace:llvm	file:
Fopen	Checkers/StreamChecker.cpp	/^void StreamChecker::Fopen(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Fread	Checkers/StreamChecker.cpp	/^void StreamChecker::Fread(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
FreeMem	Checkers/MallocChecker.cpp	/^void MallocChecker::FreeMem(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:MallocChecker
FreeMemAttr	Checkers/MallocChecker.cpp	/^void MallocChecker::FreeMemAttr(CheckerContext &C, const CallExpr *CE,$/;"	f	class:MallocChecker
FreeMemAux	Checkers/MallocChecker.cpp	/^const GRState *MallocChecker::FreeMemAux(CheckerContext &C, const CallExpr *CE,$/;"	f	class:MallocChecker
From	Core/RangeConstraintManager.cpp	/^  const llvm::APSInt &From() const {$/;"	f	class:__anon38::Range
Fseek	Checkers/StreamChecker.cpp	/^void StreamChecker::Fseek(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Fsetpos	Checkers/StreamChecker.cpp	/^void StreamChecker::Fsetpos(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Ftell	Checkers/StreamChecker.cpp	/^void StreamChecker::Ftell(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
FullName	Checkers/ClangSACheckerProvider.cpp	/^  const char *FullName;$/;"	m	struct:__anon130::StaticCheckerInfoRec	file:
FullName	Checkers/ClangSACheckerProvider.cpp	/^  const char *FullName;$/;"	m	struct:__anon130::StaticGroupInfoRec	file:
FullName	Checkers/ClangSACheckerProvider.cpp	/^  const char *FullName;$/;"	m	struct:__anon130::StaticPackageInfoRec	file:
FuncSummaries	Core/CFRefCount.cpp	/^  FuncSummariesTy FuncSummaries;$/;"	m	class:__anon14::RetainSummaryManager	file:
FuncSummariesTy	Core/CFRefCount.cpp	/^          FuncSummariesTy;$/;"	t	class:__anon14::RetainSummaryManager	file:
Fwrite	Checkers/StreamChecker.cpp	/^void StreamChecker::Fwrite(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
GCEnabled	Core/CFRefCount.cpp	/^  const bool GCEnabled;$/;"	m	class:__anon14::RetainSummaryManager	file:
GCNotOwnedSymbol	Core/CFRefCount.cpp	/^              NotOwnedSymbol, GCNotOwnedSymbol, ReceiverAlias,$/;"	e	enum:__anon10::RetEffect::Kind	file:
GDMIndex	Checkers/CStringChecker.cpp	/^    static void *GDMIndex() { return CStringChecker::getTag(); }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/IteratorsChecker.cpp	/^      static void *GDMIndex() { return IteratorsChecker::getTag(); }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/IteratorsChecker.cpp	/^  static void *GDMIndex() { static int index = 0; return &index; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/MallocChecker.cpp	/^    static void *GDMIndex() { static int x; return &x; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/NSErrorChecker.cpp	/^    static void *GDMIndex() { static int index = 0; return &index; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/ObjCSelfInitChecker.cpp	/^    static void *GDMIndex() { static int index = 0; return &index; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/ObjCSelfInitChecker.cpp	/^    static void* GDMIndex() { static int index = 0; return &index; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/PthreadLockChecker.cpp	/^    static void* GDMIndex() { static int x = 0; return &x; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Checkers/StreamChecker.cpp	/^    static void *GDMIndex() { static int x; return &x; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/BasicConstraintManager.cpp	/^  static inline void* GDMIndex() { return &ConstEqIndex; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/BasicConstraintManager.cpp	/^  static inline void* GDMIndex() { return &ConstNotEqIndex; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/CFRefCount.cpp	/^    static void* GDMIndex() {$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/CFRefCount.cpp	/^  static inline void* GDMIndex() { return &AutoRBIndex; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/CFRefCount.cpp	/^  static inline void* GDMIndex() { return &AutoRCIndex; }$/;"	f	struct:clang::ento::GRStateTrait
GDMIndex	Core/RangeConstraintManager.cpp	/^  static inline void* GDMIndex() { return &ConstraintRangeIndex; }$/;"	f	struct:clang::ento::GRStateTrait
GET_CHECKERS	Checkers/ClangSACheckerProvider.cpp	91;"	d	file:
GET_CHECKERS	Checkers/ClangSACheckerProvider.cpp	97;"	d	file:
GET_CHECKERS	Checkers/ClangSACheckers.h	23;"	d
GET_CHECKERS	Checkers/ClangSACheckers.h	28;"	d
GET_CHECKNAME_TABLE	Checkers/ClangSACheckerProvider.cpp	120;"	d	file:
GET_CHECKNAME_TABLE	Checkers/ClangSACheckerProvider.cpp	122;"	d	file:
GET_GROUPS	Checkers/ClangSACheckerProvider.cpp	78;"	d	file:
GET_GROUPS	Checkers/ClangSACheckerProvider.cpp	84;"	d	file:
GET_MEMBER_ARRAYS	Checkers/ClangSACheckerProvider.cpp	114;"	d	file:
GET_MEMBER_ARRAYS	Checkers/ClangSACheckerProvider.cpp	116;"	d	file:
GET_PACKAGES	Checkers/ClangSACheckerProvider.cpp	65;"	d	file:
GET_PACKAGES	Checkers/ClangSACheckerProvider.cpp	71;"	d	file:
GROUP	Checkers/ClangSACheckerProvider.cpp	79;"	d	file:
GROUP	Checkers/ClangSACheckerProvider.cpp	83;"	d	file:
GRState	Core/GRState.cpp	/^GRState::GRState(GRStateManager *mgr, const Environment& env,$/;"	f	class:GRState
GRState	Core/GRState.cpp	/^GRState::GRState(const GRState& RHS)$/;"	f	class:GRState
GRStateTrait	Checkers/CStringChecker.cpp	/^  struct GRStateTrait<CStringLength> $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/IteratorsChecker.cpp	/^    struct GRStateTrait<IteratorState> $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/IteratorsChecker.cpp	/^template<> struct GRStateTrait<CalledReserved> $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/MallocChecker.cpp	/^  struct GRStateTrait<RegionState> $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/NSErrorChecker.cpp	/^  struct GRStateTrait<CFErrorOut> : public GRStatePartialTrait<ErrorOutFlag> {  $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/NSErrorChecker.cpp	/^  struct GRStateTrait<NSErrorOut> : public GRStatePartialTrait<ErrorOutFlag> {  $/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/ObjCSelfInitChecker.cpp	/^  struct GRStateTrait<CalledInit> : public GRStatePartialTrait<bool> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/ObjCSelfInitChecker.cpp	/^  struct GRStateTrait<PreCallSelfFlags> : public GRStatePartialTrait<unsigned> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/ObjCSelfInitChecker.cpp	/^  struct GRStateTrait<SelfFlag> : public GRStatePartialTrait<SelfFlag> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/PthreadLockChecker.cpp	/^template <> struct GRStateTrait<LockSet> :$/;"	s	namespace:clang::ento	file:
GRStateTrait	Checkers/StreamChecker.cpp	/^  struct GRStateTrait<StreamState> $/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/BasicConstraintManager.cpp	/^struct GRStateTrait<ConstEq> : public GRStatePartialTrait<ConstEqTy> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/BasicConstraintManager.cpp	/^struct GRStateTrait<ConstNotEq> : public GRStatePartialTrait<ConstNotEqTy> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/CFRefCount.cpp	/^  struct GRStateTrait<RefBindings> : public GRStatePartialTrait<RefBindings> {$/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/CFRefCount.cpp	/^template<> struct GRStateTrait<AutoreleasePoolContents>$/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/CFRefCount.cpp	/^template<> struct GRStateTrait<AutoreleaseStack>$/;"	s	namespace:clang::ento	file:
GRStateTrait	Core/RangeConstraintManager.cpp	/^struct GRStateTrait<ConstraintRange>$/;"	s	namespace:clang::ento	file:
GenName	Checkers/StackAddrEscapeChecker.cpp	/^SourceRange StackAddrEscapeChecker::GenName(llvm::raw_ostream &os,$/;"	f	class:StackAddrEscapeChecker
GenerateAutoTransition	Core/CoreEngine.cpp	/^void StmtNodeBuilder::GenerateAutoTransition(ExplodedNode* N) {$/;"	f	class:StmtNodeBuilder
GenerateCallExitNode	Core/CoreEngine.cpp	/^void EndOfFunctionNodeBuilder::GenerateCallExitNode(const GRState *state) {$/;"	f	class:EndOfFunctionNodeBuilder
GenerateClusters	Core/RegionStore.cpp	/^  void GenerateClusters() {$/;"	f	class:__anon33::ClusterAnalysis
GenerateExtensivePathDiagnostic	Core/BugReporter.cpp	/^static void GenerateExtensivePathDiagnostic(PathDiagnostic& PD,$/;"	f	file:
GenerateMinimalPathDiagnostic	Core/BugReporter.cpp	/^static void GenerateMinimalPathDiagnostic(PathDiagnostic& PD,$/;"	f	file:
GeneratePathDiagnostic	Core/BugReporter.cpp	/^void GRBugReporter::GeneratePathDiagnostic(PathDiagnostic& PD,$/;"	f	class:GRBugReporter
GenericNodeBuilderRefCount	Core/CFRefCount.cpp	/^  GenericNodeBuilderRefCount(EndOfFunctionNodeBuilder &enb)$/;"	f	class:__anon9::GenericNodeBuilderRefCount
GenericNodeBuilderRefCount	Core/CFRefCount.cpp	/^  GenericNodeBuilderRefCount(StmtNodeBuilder &snb, const Stmt *s,$/;"	f	class:__anon9::GenericNodeBuilderRefCount
GenericNodeBuilderRefCount	Core/CFRefCount.cpp	/^class GenericNodeBuilderRefCount {$/;"	c	namespace:__anon9	file:
GetAllocationSite	Core/CFRefCount.cpp	/^GetAllocationSite(GRStateManager& StateMgr, const ExplodedNode* N,$/;"	f	file:
GetBindings	Core/BasicStore.cpp	/^  static inline BindingsTy GetBindings(Store store) {$/;"	f	class:__anon55::BasicStoreManager
GetCFNumberSize	Checkers/BasicObjCFoundationChecks.cpp	/^static Optional<uint64_t> GetCFNumberSize(ASTContext& Ctx, uint64_t i) {$/;"	f	file:
GetCalleeExpr	Core/BugReporterVisitors.cpp	/^const Stmt *bugreporter::GetCalleeExpr(const ExplodedNode *N) {$/;"	f	class:bugreporter
GetCurrentAutoreleasePool	Core/CFRefCount.cpp	/^static SymbolRef GetCurrentAutoreleasePool(const GRState* state) {$/;"	f	file:
GetCurrentOrNextStmt	Core/BugReporter.cpp	/^GetCurrentOrNextStmt(const ExplodedNode* N) {$/;"	f	file:
GetCurrentOrPreviousStmt	Core/BugReporter.cpp	/^GetCurrentOrPreviousStmt(const ExplodedNode* N) {$/;"	f	file:
GetDenomExpr	Core/BugReporterVisitors.cpp	/^const Stmt *bugreporter::GetDenomExpr(const ExplodedNode *N) {$/;"	f	class:bugreporter
GetDerefExpr	Core/BugReporterVisitors.cpp	/^const Stmt *bugreporter::GetDerefExpr(const ExplodedNode *N) {$/;"	f	class:bugreporter
GetElementZeroRegion	Core/Store.cpp	/^const ElementRegion *StoreManager::GetElementZeroRegion(const MemRegion *R, $/;"	f	class:StoreManager
GetEmptyCounter	Core/BlockCounter.cpp	/^BlockCounter::Factory::GetEmptyCounter() {$/;"	f	class:BlockCounter::Factory
GetFID	Core/PlistDiagnostics.cpp	/^static unsigned GetFID(const FIDMap& FIDs, const SourceManager &SM,$/;"	f	file:
GetFactory	Core/BlockCounter.cpp	/^static inline CountMap::Factory& GetFactory(void* F) {$/;"	f	file:
GetGraphNode	Core/ExprEngine.cpp	/^ExplodedNode* GetGraphNode(ITERATOR I) { return *I; }$/;"	f
GetGraphNode	Core/ExprEngine.cpp	/^GetGraphNode<llvm::DenseMap<ExplodedNode*, Expr*>::iterator>$/;"	f
GetIdentifier	Checkers/CheckSecuritySyntaxOnly.cpp	/^IdentifierInfo *WalkAST::GetIdentifier(IdentifierInfo *& II, const char *str) {$/;"	f	class:WalkAST
GetIncrementedVar	Checkers/CheckSecuritySyntaxOnly.cpp	/^GetIncrementedVar(const Expr *expr, const VarDecl *x, const VarDecl *y) {$/;"	f	file:
GetLazyBinding	Core/RegionStore.cpp	/^RegionStoreManager::GetLazyBinding(RegionBindings B, const MemRegion *R) {$/;"	f	class:RegionStoreManager
GetMap	Core/BlockCounter.cpp	/^static inline CountMap GetMap(void* D) {$/;"	f	file:
GetMostRecentVarDeclBinding	Core/BugReporter.cpp	/^GetMostRecentVarDeclBinding(const ExplodedNode* N,$/;"	f	file:
GetNextStmt	Core/BugReporter.cpp	/^static const Stmt* GetNextStmt(const ExplodedNode* N) {$/;"	f	file:
GetNullarySelector	Core/ExprEngine.cpp	/^static inline Selector GetNullarySelector(const char* name, ASTContext& Ctx) {$/;"	f	file:
GetPredecessorNode	Core/BugReporter.cpp	/^GetPredecessorNode(const ExplodedNode* N) {$/;"	f	file:
GetPreviousStmt	Core/BugReporter.cpp	/^static const Stmt* GetPreviousStmt(const ExplodedNode* N) {$/;"	f	file:
GetProgramPoint	Core/CoreEngine.cpp	/^static ProgramPoint GetProgramPoint(const Stmt *S, ProgramPoint::Kind K,$/;"	f	file:
GetRange	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::GetRange(const GRState *state, SymbolRef sym) {$/;"	f	class:RangeConstraintManager
GetReceiverNameType	Checkers/BasicObjCFoundationChecks.cpp	/^static const char* GetReceiverNameType(const ObjCMessage &msg) {$/;"	f	file:
GetRegionBindings	Core/RegionStore.cpp	/^  static inline RegionBindings GetRegionBindings(Store store) {$/;"	f	class:__anon32::RegionStoreManager
GetRetValExpr	Core/BugReporterVisitors.cpp	/^const Stmt *bugreporter::GetRetValExpr(const ExplodedNode *N) {$/;"	f	class:bugreporter
GetReturnType	Core/CFRefCount.cpp	/^static QualType GetReturnType(const Expr* RetE, ASTContext& Ctx) {$/;"	f	file:
GetStmt	Core/BugReporter.cpp	/^static inline const Stmt* GetStmt(const ProgramPoint &P) {$/;"	f	file:
GetSuccessorNode	Core/BugReporter.cpp	/^GetSuccessorNode(const ExplodedNode* N) {$/;"	f	file:
GraphPrintCheckerState	Core/ExprEngine.cpp	/^static ExprEngine* GraphPrintCheckerState;$/;"	v	file:
GraphPrintSourceManager	Core/ExprEngine.cpp	/^static SourceManager* GraphPrintSourceManager;$/;"	v	file:
GroupIndex	Checkers/ClangSACheckerProvider.cpp	/^  int GroupIndex;$/;"	m	struct:__anon130::StaticCheckerInfoRec	file:
GroupIndex	Checkers/ClangSACheckerProvider.cpp	/^  int GroupIndex;$/;"	m	struct:__anon130::StaticPackageInfoRec	file:
HTMLDiagnostics	Core/HTMLDiagnostics.cpp	/^HTMLDiagnostics::HTMLDiagnostics(const std::string& prefix,$/;"	f	class:HTMLDiagnostics
HTMLDiagnostics	Core/HTMLDiagnostics.cpp	/^class HTMLDiagnostics : public PathDiagnosticClient {$/;"	c	namespace:__anon29	file:
HandleAutoreleaseCounts	Core/CFRefCount.cpp	/^CFRefCount::HandleAutoreleaseCounts(const GRState * state, $/;"	f	class:CFRefCount
HandleBinding	Core/BugReporter.cpp	/^  bool HandleBinding(StoreManager& SMgr, Store store, const MemRegion* R,$/;"	f	class:__anon41::NotableSymbolHandler
HandleBinding	Core/BugReporter.cpp	/^  bool HandleBinding(StoreManager& SMgr, Store store,$/;"	f	class:__anon42::ScanNotableSymbols
HandleBinding	Core/CFRefCount.cpp	/^    bool HandleBinding(StoreManager& SMgr, Store store, const MemRegion* R,$/;"	f	class:__anon19::FindUniqueBinding
HandleBlockEdge	Core/CoreEngine.cpp	/^void CoreEngine::HandleBlockEdge(const BlockEdge& L, ExplodedNode* Pred) {$/;"	f	class:CoreEngine
HandleBlockEntrance	Core/CoreEngine.cpp	/^void CoreEngine::HandleBlockEntrance(const BlockEntrance& L,$/;"	f	class:CoreEngine
HandleBlockExit	Core/CoreEngine.cpp	/^void CoreEngine::HandleBlockExit(const CFGBlock * B, ExplodedNode* Pred) {$/;"	f	class:CoreEngine
HandleBranch	Core/CoreEngine.cpp	/^void CoreEngine::HandleBranch(const Stmt* Cond, const Stmt* Term, $/;"	f	class:CoreEngine
HandleCallEnter	Core/CoreEngine.cpp	/^void CoreEngine::HandleCallEnter(const CallEnter &L, const CFGBlock *Block,$/;"	f	class:CoreEngine
HandleCallExit	Core/CoreEngine.cpp	/^void CoreEngine::HandleCallExit(const CallExit &L, ExplodedNode *Pred) {$/;"	f	class:CoreEngine
HandleCode	Frontend/AnalysisConsumer.cpp	/^void AnalysisConsumer::HandleCode(Decl *D) {$/;"	f	class:AnalysisConsumer
HandleDeclContext	Frontend/AnalysisConsumer.cpp	/^void AnalysisConsumer::HandleDeclContext(ASTContext &C, DeclContext *dc) {$/;"	f	class:AnalysisConsumer
HandleDiagnostic	Core/PathDiagnostic.cpp	/^void PathDiagnosticClient::HandleDiagnostic(Diagnostic::Level DiagLevel,$/;"	f	class:PathDiagnosticClient
HandleNilReceiver	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::HandleNilReceiver(CheckerContext &C,$/;"	f	class:CallAndMessageChecker
HandleNotableSymbol	Core/BugReporter.cpp	/^static void HandleNotableSymbol(const ExplodedNode* N,$/;"	f	file:
HandlePathDiagnostic	Core/HTMLDiagnostics.cpp	/^void HTMLDiagnostics::HandlePathDiagnostic(const PathDiagnostic* D) {$/;"	f	class:HTMLDiagnostics
HandlePathDiagnostic	Core/PlistDiagnostics.cpp	/^void PlistDiagnostics::HandlePathDiagnostic(const PathDiagnostic* D) {$/;"	f	class:PlistDiagnostics
HandlePathDiagnostic	Core/TextPathDiagnostics.cpp	/^void TextPathDiagnostics::HandlePathDiagnostic(const PathDiagnostic* D) {$/;"	f	class:TextPathDiagnostics
HandlePiece	Core/HTMLDiagnostics.cpp	/^void HTMLDiagnostics::HandlePiece(Rewriter& R, FileID BugFileID,$/;"	f	class:HTMLDiagnostics
HandlePostStmt	Core/CoreEngine.cpp	/^void CoreEngine::HandlePostStmt(const CFGBlock* B, unsigned StmtIdx, $/;"	f	class:CoreEngine
HandleSymbolDeath	Core/CFRefCount.cpp	/^CFRefCount::HandleSymbolDeath(const GRState * state, SymbolRef sid, RefVal V,$/;"	f	class:CFRefCount
HandleTranslationUnit	Frontend/AnalysisConsumer.cpp	/^void AnalysisConsumer::HandleTranslationUnit(ASTContext &C) {$/;"	f	class:AnalysisConsumer
HelpText	Checkers/ClangSACheckerProvider.cpp	/^  const char *HelpText;$/;"	m	struct:__anon130::StaticCheckerInfoRec	file:
Hidden	Checkers/ClangSACheckerProvider.cpp	/^  bool Hidden;$/;"	m	struct:__anon130::StaticCheckerInfoRec	file:
Hidden	Checkers/ClangSACheckerProvider.cpp	/^  bool Hidden;$/;"	m	struct:__anon130::StaticPackageInfoRec	file:
Hidden	Checkers/ClangSACheckerProvider.cpp	/^  bool Hidden;$/;"	m	struct:__anon131::CheckNameOption	file:
HighlightRange	Core/HTMLDiagnostics.cpp	/^void HTMLDiagnostics::HighlightRange(Rewriter& R, FileID BugFileID,$/;"	f	class:HTMLDiagnostics
I	Core/BugReporter.cpp	/^  ExplodedNode::const_succ_iterator I, E;$/;"	m	struct:__anon44::FRIEC_WLItem	file:
I	Core/CXXExprEngine.cpp	/^  CallExpr::const_arg_iterator I;$/;"	m	class:__anon5::CallExprWLItem	file:
I	Core/ExprEngine.cpp	/^  ObjCMessageExpr::const_arg_iterator I;$/;"	m	class:__anon25::ObjCMsgWLItem	file:
I	Core/FlatStore.cpp	/^    Interval I;$/;"	m	class:__anon23::FlatStoreManager::RegionInterval	file:
ID	Core/BugReporter.cpp	/^  llvm::FoldingSetNodeID ID;$/;"	m	class:__anon45::DiagCacheItem	file:
II	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable IdentifierInfo* II;$/;"	m	class:__anon106::CFNumberCreateChecker	file:
II	Checkers/NSErrorChecker.cpp	/^  mutable IdentifierInfo *II;$/;"	m	class:__anon114::NSErrorMethodChecker	file:
II	Checkers/NSErrorChecker.cpp	/^  mutable IdentifierInfo *II;$/;"	m	class:__anon115::CFErrorFunctionChecker	file:
II	Core/CFRefCount.cpp	/^  IdentifierInfo* II;$/;"	m	class:__anon12::ObjCSummaryKey	file:
II_calloc	Checkers/MallocChecker.cpp	/^  mutable IdentifierInfo *II_malloc, *II_free, *II_realloc, *II_calloc;$/;"	m	class:__anon98::MallocChecker	file:
II_chdir	Checkers/ChrootChecker.cpp	/^  mutable IdentifierInfo *II_chroot, *II_chdir;$/;"	m	class:__anon80::ChrootChecker	file:
II_chroot	Checkers/ChrootChecker.cpp	/^  mutable IdentifierInfo *II_chroot, *II_chdir;$/;"	m	class:__anon80::ChrootChecker	file:
II_clearerr	Checkers/StreamChecker.cpp	/^                 *II_clearerr, *II_feof, *II_ferror, *II_fileno;$/;"	m	class:__anon113::StreamChecker	file:
II_fclose	Checkers/StreamChecker.cpp	/^  mutable IdentifierInfo *II_fopen, *II_tmpfile, *II_fclose, *II_fread,$/;"	m	class:__anon113::StreamChecker	file:
II_feof	Checkers/StreamChecker.cpp	/^                 *II_clearerr, *II_feof, *II_ferror, *II_fileno;$/;"	m	class:__anon113::StreamChecker	file:
II_ferror	Checkers/StreamChecker.cpp	/^                 *II_clearerr, *II_feof, *II_ferror, *II_fileno;$/;"	m	class:__anon113::StreamChecker	file:
II_fgetpos	Checkers/StreamChecker.cpp	/^                 *II_fseek, *II_ftell, *II_rewind, *II_fgetpos, *II_fsetpos,  $/;"	m	class:__anon113::StreamChecker	file:
II_fileno	Checkers/StreamChecker.cpp	/^                 *II_clearerr, *II_feof, *II_ferror, *II_fileno;$/;"	m	class:__anon113::StreamChecker	file:
II_fopen	Checkers/StreamChecker.cpp	/^  mutable IdentifierInfo *II_fopen, *II_tmpfile, *II_fclose, *II_fread,$/;"	m	class:__anon113::StreamChecker	file:
II_fread	Checkers/StreamChecker.cpp	/^  mutable IdentifierInfo *II_fopen, *II_tmpfile, *II_fclose, *II_fread,$/;"	m	class:__anon113::StreamChecker	file:
II_free	Checkers/MallocChecker.cpp	/^  mutable IdentifierInfo *II_malloc, *II_free, *II_realloc, *II_calloc;$/;"	m	class:__anon98::MallocChecker	file:
II_fseek	Checkers/StreamChecker.cpp	/^                 *II_fseek, *II_ftell, *II_rewind, *II_fgetpos, *II_fsetpos,  $/;"	m	class:__anon113::StreamChecker	file:
II_fsetpos	Checkers/StreamChecker.cpp	/^                 *II_fseek, *II_ftell, *II_rewind, *II_fgetpos, *II_fsetpos,  $/;"	m	class:__anon113::StreamChecker	file:
II_ftell	Checkers/StreamChecker.cpp	/^                 *II_fseek, *II_ftell, *II_rewind, *II_fgetpos, *II_fsetpos,  $/;"	m	class:__anon113::StreamChecker	file:
II_fwrite	Checkers/StreamChecker.cpp	/^                 *II_fwrite, $/;"	m	class:__anon113::StreamChecker	file:
II_getpw	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_getpw;$/;"	m	class:__anon122::WalkAST	file:
II_gets	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_gets;$/;"	m	class:__anon122::WalkAST	file:
II_malloc	Checkers/MallocChecker.cpp	/^  mutable IdentifierInfo *II_malloc, *II_free, *II_realloc, *II_calloc;$/;"	m	class:__anon98::MallocChecker	file:
II_mktemp	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_mktemp;$/;"	m	class:__anon122::WalkAST	file:
II_rand	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_rand[num_rands];$/;"	m	class:__anon122::WalkAST	file:
II_random	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_random;$/;"	m	class:__anon122::WalkAST	file:
II_realloc	Checkers/MallocChecker.cpp	/^  mutable IdentifierInfo *II_malloc, *II_free, *II_realloc, *II_calloc;$/;"	m	class:__anon98::MallocChecker	file:
II_rewind	Checkers/StreamChecker.cpp	/^                 *II_fseek, *II_ftell, *II_rewind, *II_fgetpos, *II_fsetpos,  $/;"	m	class:__anon113::StreamChecker	file:
II_setid	Checkers/CheckSecuritySyntaxOnly.cpp	/^  IdentifierInfo *II_setid[num_setids];$/;"	m	class:__anon122::WalkAST	file:
II_tmpfile	Checkers/StreamChecker.cpp	/^  mutable IdentifierInfo *II_fopen, *II_tmpfile, *II_fclose, *II_fread,$/;"	m	class:__anon113::StreamChecker	file:
IS	Core/RegionStore.cpp	/^  StoreManager::InvalidatedSymbols *IS;$/;"	m	class:__anon34::invalidateRegionsWorker	file:
ISetFactory	Core/BasicConstraintManager.cpp	/^  GRState::IntSetTy::Factory ISetFactory;$/;"	m	class:__anon4::BasicConstraintManager	file:
IVarState	Checkers/ObjCUnusedIVarsChecker.cpp	/^enum IVarState { Unused, Used };$/;"	g	file:
IdempotentOperationChecker	Checkers/IdempotentOperationChecker.cpp	/^class IdempotentOperationChecker$/;"	c	namespace:__anon65	file:
Impossible	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
InNamespace	Checkers/LLVMConventionsChecker.cpp	/^static bool InNamespace(const Decl *D, llvm::StringRef NS) {$/;"	f	file:
IncRef	Core/CFRefCount.cpp	/^                 DoNothingByRef, IncRefMsg, IncRef, MakeCollectable, MayEscape,$/;"	e	enum:ArgEffect	file:
IncRefMsg	Core/CFRefCount.cpp	/^                 DoNothingByRef, IncRefMsg, IncRef, MakeCollectable, MayEscape,$/;"	e	enum:ArgEffect	file:
Includes	Core/RangeConstraintManager.cpp	/^  bool Includes(const llvm::APSInt &v) const {$/;"	f	class:__anon38::Range
IncrementCount	Core/BlockCounter.cpp	/^BlockCounter::Factory::IncrementCount(BlockCounter BC, $/;"	f	class:BlockCounter::Factory
Indent	Core/PlistDiagnostics.cpp	/^static llvm::raw_ostream& Indent(llvm::raw_ostream& o, const unsigned indent) {$/;"	f	file:
InitListWLItem	Core/ExprEngine.cpp	/^  InitListWLItem(ExplodedNode* n, llvm::ImmutableList<SVal> vals,$/;"	f	class:__anon26::InitListWLItem
InitListWLItem	Core/ExprEngine.cpp	/^class InitListWLItem {$/;"	c	namespace:__anon26	file:
InitSelfBug	Checkers/ObjCSelfInitChecker.cpp	/^  InitSelfBug() : BugType("missing \\"self = [(super or self) init...]\\"",$/;"	f	class:__anon89::InitSelfBug
InitSelfBug	Checkers/ObjCSelfInitChecker.cpp	/^class InitSelfBug : public BugType {$/;"	c	namespace:__anon89	file:
Initialize	Frontend/AnalysisConsumer.cpp	/^  virtual void Initialize(ASTContext &Context) {$/;"	f	class:__anon57::AnalysisConsumer
InitializeClassMethodSummaries	Core/CFRefCount.cpp	/^void RetainSummaryManager::InitializeClassMethodSummaries() {$/;"	f	class:RetainSummaryManager
InitializeMethodSummaries	Core/CFRefCount.cpp	/^void RetainSummaryManager::InitializeMethodSummaries() {$/;"	f	class:RetainSummaryManager
InlineCall	Core/ExprEngine.cpp	/^bool ExprEngine::InlineCall(ExplodedNodeSet &Dst, const CallExpr *CE, $/;"	f	class:ExprEngine
InstanceReceiver	Core/CFRefCount.cpp	/^  InstanceReceiver() : LC(0) { }$/;"	f	class:__anon8::InstanceReceiver
InstanceReceiver	Core/CFRefCount.cpp	/^  InstanceReceiver(const ObjCMessage &msg,$/;"	f	class:__anon8::InstanceReceiver
InstanceReceiver	Core/CFRefCount.cpp	/^class InstanceReceiver {$/;"	c	namespace:__anon8	file:
Intersect	Core/RangeConstraintManager.cpp	/^  RangeSet Intersect(BasicValueFactory &BV, Factory &F,$/;"	f	class:__anon38::RangeSet
IntersectInRange	Core/RangeConstraintManager.cpp	/^  void IntersectInRange(BasicValueFactory &BV, Factory &F,$/;"	f	class:__anon38::RangeSet	file:
Invalid	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	e	enum:__anon100::RefState::Kind	file:
InvalidateBuffer	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::InvalidateBuffer(CheckerContext &C,$/;"	f	class:CStringChecker
InvalidatedSymbols	Core/FlatStore.cpp	/^  typedef llvm::DenseSet<SymbolRef> InvalidatedSymbols;$/;"	t	class:__anon23::FlatStoreManager	file:
IsCFError	Checkers/NSErrorChecker.cpp	/^static bool IsCFError(QualType T, IdentifierInfo *II) {$/;"	f	file:
IsCachedDiagnostic	Core/BugReporter.cpp	/^static bool IsCachedDiagnostic(BugReport *R, PathDiagnostic *PD) {$/;"	f	file:
IsClangAttr	Checkers/LLVMConventionsChecker.cpp	/^static bool IsClangAttr(const RecordDecl *RD) {$/;"	f	file:
IsClangDecl	Checkers/LLVMConventionsChecker.cpp	/^static bool IsClangDecl(const RecordDecl *RD) {$/;"	f	file:
IsClangStmt	Checkers/LLVMConventionsChecker.cpp	/^static bool IsClangStmt(const RecordDecl *RD) {$/;"	f	file:
IsClangType	Checkers/LLVMConventionsChecker.cpp	/^static bool IsClangType(const RecordDecl *RD) {$/;"	f	file:
IsCompleteType	Checkers/ArrayBoundCheckerV2.cpp	/^static bool IsCompleteType(ASTContext &Ctx, QualType Ty) {$/;"	f	file:
IsCompleteType	Core/MemRegion.cpp	/^static bool IsCompleteType(ASTContext &Ctx, QualType Ty) {$/;"	f	file:
IsCompleteType	Core/Store.cpp	/^static bool IsCompleteType(ASTContext &Ctx, QualType Ty) {$/;"	f	file:
IsConsumedExpr	Core/BugReporter.cpp	/^bool EdgeBuilder::IsConsumedExpr(const PathDiagnosticLocation &L) {$/;"	f	class:EdgeBuilder
IsControlFlowExpr	Core/BugReporter.cpp	/^static bool IsControlFlowExpr(const Stmt *S) {$/;"	f	file:
IsDead	Core/BugReporter.cpp	/^  bool IsDead;$/;"	m	class:__anon43::ContextLocation	file:
IsEnvLoc	Core/GRState.cpp	/^static bool IsEnvLoc(const Stmt *S) {$/;"	f	file:
IsKnown	Checkers/BasicObjCFoundationChecks.cpp	/^    bool IsKnown;$/;"	m	class:__anon107::Optional	file:
IsLLVMStringRef	Checkers/LLVMConventionsChecker.cpp	/^static bool IsLLVMStringRef(QualType T) {$/;"	f	file:
IsLiveRegion	Core/SymbolManager.cpp	/^static bool IsLiveRegion(SymbolReaper &Reaper, const MemRegion *MR) {$/;"	f	file:
IsLoad	Core/CheckerManager.cpp	/^    bool IsLoad;$/;"	m	struct:__anon48::CheckLocationContext	file:
IsLocation	Core/Environment.cpp	/^static inline bool IsLocation(const Stmt *S) {$/;"	f	file:
IsNSError	Checkers/NSErrorChecker.cpp	/^static bool IsNSError(QualType T, IdentifierInfo *II) {$/;"	f	file:
IsNested	Core/BugReporter.cpp	/^static bool IsNested(const Stmt *S, ParentMap &PM) {$/;"	f	file:
IsPartOfAST	Checkers/LLVMConventionsChecker.cpp	/^static bool IsPartOfAST(const CXXRecordDecl *R) {$/;"	f	file:
IsPreVisit	Core/CheckerManager.cpp	/^    bool IsPreVisit;$/;"	m	struct:__anon46::CheckStmtContext	file:
IsPreVisit	Core/CheckerManager.cpp	/^    bool IsPreVisit;$/;"	m	struct:__anon47::CheckObjCMessageContext	file:
IsSmallVector	Checkers/LLVMConventionsChecker.cpp	/^static bool IsSmallVector(QualType T) {$/;"	f	file:
IsStdString	Checkers/LLVMConventionsChecker.cpp	/^static bool IsStdString(QualType T) {$/;"	f	file:
IsStdVector	Checkers/LLVMConventionsChecker.cpp	/^static bool IsStdVector(QualType T) {$/;"	f	file:
IteratorState	Checkers/IteratorsChecker.cpp	/^class IteratorState {$/;"	c	namespace:__anon100	file:
IteratorsChecker	Checkers/IteratorsChecker.cpp	/^  IteratorsChecker() :$/;"	f	class:__anon100::IteratorsChecker
IteratorsChecker	Checkers/IteratorsChecker.cpp	/^class IteratorsChecker : $/;"	c	namespace:__anon100	file:
Itr	Core/ExprEngine.cpp	/^  InitListExpr::const_reverse_iterator Itr;$/;"	m	class:__anon26::InitListWLItem	file:
IvarUsageMap	Checkers/ObjCUnusedIVarsChecker.cpp	/^typedef llvm::DenseMap<const ObjCIvarDecl*,IVarState> IvarUsageMap;$/;"	t	file:
JAIL_ENTERED	Checkers/ChrootChecker.cpp	/^enum Kind { NO_CHROOT, ROOT_CHANGED, JAIL_ENTERED };$/;"	e	enum:__anon80::Kind	file:
K	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	m	class:__anon100::RefState	typeref:enum:__anon100::RefState::Kind	file:
K	Checkers/MallocChecker.cpp	/^              Relinquished } K;$/;"	m	class:__anon98::RefState	typeref:enum:__anon98::RefState::Kind	file:
K	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	m	struct:__anon113::StreamState	typeref:enum:__anon113::StreamState::Kind	file:
K	Core/CFRefCount.cpp	/^  Kind K;$/;"	m	class:__anon10::RetEffect	file:
KillStruct	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::KillStruct(Store store, const TypedRegion* R,$/;"	f	class:RegionStoreManager
Kind	Checkers/ChrootChecker.cpp	/^enum Kind { NO_CHROOT, ROOT_CHANGED, JAIL_ENTERED };$/;"	g	namespace:__anon80	file:
Kind	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	g	class:__anon100::RefState	file:
Kind	Checkers/MallocChecker.cpp	/^  enum Kind { AllocateUnchecked, AllocateFailed, Released, Escaped,$/;"	g	class:__anon98::RefState	file:
Kind	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	g	struct:__anon113::StreamState	file:
Kind	Core/CFRefCount.cpp	/^  enum Kind { NoRet, Alias, OwnedSymbol, OwnedAllocatedSymbol,$/;"	g	class:__anon10::RetEffect	file:
Kind	Core/CFRefCount.cpp	/^  enum Kind {$/;"	g	class:__anon10::RefVal	file:
Kind	Core/RegionStore.cpp	/^  enum Kind { Direct = 0x0, Default = 0x1 };$/;"	g	class:__anon30::BindingKey	file:
LC	Core/CFRefCount.cpp	/^  const LocationContext *LC;$/;"	m	class:__anon8::InstanceReceiver	file:
LHSis0	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
LHSis1	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
LIBRARYNAME	Checkers/Makefile	/^LIBRARYNAME := clangStaticAnalyzerCheckers$/;"	m
LIBRARYNAME	Core/Makefile	/^LIBRARYNAME := clangStaticAnalyzerCore$/;"	m
LIBRARYNAME	Frontend/Makefile	/^LIBRARYNAME := clangStaticAnalyzerFrontend$/;"	m
LLVMConventionsChecker	Checkers/LLVMConventionsChecker.cpp	/^class LLVMConventionsChecker : public Checker<$/;"	c	namespace:__anon70	file:
LLVM_CLANG_GR_ANALYSISCONSUMER_H	Frontend/AnalysisConsumer.h	16;"	d
LLVM_CLANG_GR_SIMPLE_CONSTRAINT_MANAGER_H	Core/SimpleConstraintManager.h	15;"	d
LLVM_CLANG_SA_CHECKERS_CLANGSACHECKERPROVIDER_H	Checkers/ClangSACheckerProvider.h	16;"	d
LLVM_CLANG_SA_LIB_CHECKERS_CLANGSACHECKERS_H	Checkers/ClangSACheckers.h	16;"	d
LOpts	Core/CFRefCount.cpp	/^  const LangOptions&   LOpts;$/;"	m	class:__anon17::CFRefCount	file:
LangOpts	Core/PlistDiagnostics.cpp	/^    const LangOptions &LangOpts;$/;"	m	class:__anon7::PlistDiagnostics	file:
LazyAllocate	Core/MemRegion.cpp	/^const REG *MemRegionManager::LazyAllocate(REG*& region) {$/;"	f	class:MemRegionManager
LazyAllocate	Core/MemRegion.cpp	/^const REG *MemRegionManager::LazyAllocate(REG*& region, ARG a) {$/;"	f	class:MemRegionManager
LazyInit_BT	Checkers/CallAndMessageChecker.cpp	/^  static void LazyInit_BT(const char *desc, llvm::OwningPtr<BugType> &BT) {$/;"	f	class:__anon71::CallAndMessageChecker	file:
LazyInitialize	Checkers/UnixAPIChecker.cpp	/^static inline void LazyInitialize(BugType *&BT, const char *name) {$/;"	f	file:
LazyInitializeReferencedVars	Core/MemRegion.cpp	/^void BlockDataRegion::LazyInitializeReferencedVars() {$/;"	f	class:BlockDataRegion
LazyRetrieve	Core/BasicStore.cpp	/^SVal BasicStoreManager::LazyRetrieve(Store store, const TypedRegion *R) {$/;"	f	class:BasicStoreManager
Leak	Core/CFRefCount.cpp	/^    Leak(CFRefCount* tf, llvm::StringRef name, bool isRet)$/;"	f	class:__anon18::Leak
Leak	Core/CFRefCount.cpp	/^  class Leak : public CFRefBug {$/;"	c	namespace:__anon18	file:
LeakAtReturn	Core/CFRefCount.cpp	/^    LeakAtReturn(CFRefCount* tf, llvm::StringRef name)$/;"	f	class:__anon18::LeakAtReturn
LeakAtReturn	Core/CFRefCount.cpp	/^  class LeakAtReturn : public Leak {$/;"	c	namespace:__anon18	file:
LeakWithinFunction	Core/CFRefCount.cpp	/^    LeakWithinFunction(CFRefCount* tf, llvm::StringRef name)$/;"	f	class:__anon18::LeakWithinFunction
LeakWithinFunction	Core/CFRefCount.cpp	/^  class LeakWithinFunction : public Leak {$/;"	c	namespace:__anon18	file:
LiveVariablesDumper	Checkers/DebugCheckers.cpp	/^class LiveVariablesDumper : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon62	file:
Loc	Core/CheckerManager.cpp	/^    SVal Loc;$/;"	m	struct:__anon48::CheckLocationContext	file:
Loc	Core/CheckerManager.cpp	/^    SVal Loc;$/;"	m	struct:__anon49::CheckBindContext	file:
LockSet	Checkers/PthreadLockChecker.cpp	/^namespace { class LockSet {}; }$/;"	c	namespace:__anon60	file:
M	Core/BugReporter.cpp	/^  NodeBackMap& M;$/;"	m	class:__anon40::NodeMapClosure	file:
M	Core/CFRefCount.cpp	/^  MapTy M;$/;"	m	class:__anon13::ObjCSummaryCache	file:
M	Core/RegionStore.cpp	/^  Map M;$/;"	m	class:__anon32::RegionStoreSubRegionMap	file:
M	Frontend/AnalysisConsumer.cpp	/^  VMap M;$/;"	m	class:__anon58::UbigraphViz	file:
MacOSXAPIChecker	Checkers/MacOSXAPIChecker.cpp	/^  MacOSXAPIChecker() { memset(BTypes, 0, sizeof(*BTypes) * NumChecks); }$/;"	f	class:__anon126::MacOSXAPIChecker
MacOSXAPIChecker	Checkers/MacOSXAPIChecker.cpp	/^class MacOSXAPIChecker : public Checker< check::PreStmt<CallExpr> > {$/;"	c	namespace:__anon126	file:
Make	Core/RegionStore.cpp	/^BindingKey BindingKey::Make(const MemRegion *R, Kind k) {$/;"	f	class:BindingKey
MakeAlias	Core/CFRefCount.cpp	/^  static RetEffect MakeAlias(unsigned Idx) {$/;"	f	class:__anon10::RetEffect
MakeCFRefCountTF	Core/CFRefCount.cpp	/^TransferFuncs* ento::MakeCFRefCountTF(ASTContext& Ctx, bool GCEnabled,$/;"	f	class:ento
MakeCollectable	Core/CFRefCount.cpp	/^                 DoNothingByRef, IncRefMsg, IncRef, MakeCollectable, MayEscape,$/;"	e	enum:ArgEffect	file:
MakeElementRegion	Core/Store.cpp	/^const MemRegion *StoreManager::MakeElementRegion(const MemRegion *Base,$/;"	f	class:StoreManager
MakeGCNotOwned	Core/CFRefCount.cpp	/^  static RetEffect MakeGCNotOwned() {$/;"	f	class:__anon10::RetEffect
MakeLocation	Core/Environment.cpp	/^static inline const Stmt *MakeLocation(const Stmt *S) {$/;"	f	file:
MakeNoRet	Core/CFRefCount.cpp	/^  static RetEffect MakeNoRet() {$/;"	f	class:__anon10::RetEffect
MakeNode	Core/CFRefCount.cpp	/^  ExplodedNode *MakeNode(const GRState *state, ExplodedNode *Pred) {$/;"	f	class:__anon9::GenericNodeBuilderRefCount
MakeNode	Core/CoreEngine.cpp	/^ExplodedNode* StmtNodeBuilder::MakeNode(ExplodedNodeSet& Dst, const Stmt* S, $/;"	f	class:StmtNodeBuilder
MakeNode	Core/ExprEngine.cpp	/^ExplodedNode* ExprEngine::MakeNode(ExplodedNodeSet& Dst, const Stmt* S,$/;"	f	class:ExprEngine
MakeNotOwned	Core/CFRefCount.cpp	/^  static RetEffect MakeNotOwned(ObjKind o) {$/;"	f	class:__anon10::RetEffect
MakeOwned	Core/CFRefCount.cpp	/^  static RetEffect MakeOwned(ObjKind o, bool isAllocated = false) {$/;"	f	class:__anon10::RetEffect
MakeOwnedWhenTrackedReceiver	Core/CFRefCount.cpp	/^  static RetEffect MakeOwnedWhenTrackedReceiver() {$/;"	f	class:__anon10::RetEffect
MakeReceiverAlias	Core/CFRefCount.cpp	/^  static RetEffect MakeReceiverAlias() {$/;"	f	class:__anon10::RetEffect
MakeReportGraph	Core/BugReporter.cpp	/^MakeReportGraph(const ExplodedGraph* G,$/;"	f	file:
MakeSymIntVal	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::MakeSymIntVal(const SymExpr *LHS,$/;"	f	class:SimpleSValBuilder
MallocChecker	Checkers/MallocChecker.cpp	/^  MallocChecker() : II_malloc(0), II_free(0), II_realloc(0), II_calloc(0) {}$/;"	f	class:__anon98::MallocChecker
MallocChecker	Checkers/MallocChecker.cpp	/^class MallocChecker : public Checker<eval::Call, check::DeadSymbols, check::EndPath, check::PreStmt<ReturnStmt>, check::Location,$/;"	c	namespace:__anon98	file:
MallocMem	Checkers/MallocChecker.cpp	/^void MallocChecker::MallocMem(CheckerContext &C, const CallExpr *CE) {$/;"	f	class:MallocChecker
MallocMemAux	Checkers/MallocChecker.cpp	/^  static const GRState *MallocMemAux(CheckerContext &C, const CallExpr *CE,$/;"	f	class:__anon98::MallocChecker	file:
MallocMemAux	Checkers/MallocChecker.cpp	/^const GRState *MallocChecker::MallocMemAux(CheckerContext &C,  $/;"	f	class:MallocChecker
MallocMemReturnsAttr	Checkers/MallocChecker.cpp	/^void MallocChecker::MallocMemReturnsAttr(CheckerContext &C, const CallExpr *CE,$/;"	f	class:MallocChecker
MallocZero	Checkers/UnixAPIChecker.cpp	/^    MallocZero = 2,$/;"	e	enum:__anon136::UnixAPIChecker::SubChecks	file:
Map	Core/RegionStore.cpp	/^  typedef llvm::DenseMap<const MemRegion*, Set> Map;$/;"	t	class:__anon32::RegionStoreSubRegionMap	file:
MapTy	Core/CFRefCount.cpp	/^  typedef llvm::DenseMap<ObjCSummaryKey, RetainSummary*> MapTy;$/;"	t	class:__anon13::ObjCSummaryCache	file:
MarkBranch	Core/ExprEngine.cpp	/^const GRState* ExprEngine::MarkBranch(const GRState* state,$/;"	f	class:ExprEngine
MarkLiveCallback	Core/Environment.cpp	/^  MarkLiveCallback(SymbolReaper &symreaper) : SymReaper(symreaper) {}$/;"	f	class:__anon1::MarkLiveCallback
MarkLiveCallback	Core/Environment.cpp	/^class MarkLiveCallback : public SymbolVisitor {$/;"	c	namespace:__anon1	file:
MarshalState	Core/GRState.cpp	/^const GRState *GRStateManager::MarshalState(const GRState *state,$/;"	f	class:GRStateManager
MatchesCriteria	Checkers/UndefBranchChecker.cpp	/^    bool MatchesCriteria(const Expr* Ex) { return St->getSVal(Ex).isUndef(); }$/;"	f	struct:__anon78::UndefBranchChecker::FindUndefExpr
MayEscape	Core/CFRefCount.cpp	/^                 DoNothingByRef, IncRefMsg, IncRef, MakeCollectable, MayEscape,$/;"	e	enum:ArgEffect	file:
Members	Checkers/ClangSACheckerProvider.cpp	/^  const short *Members;$/;"	m	struct:__anon131::CheckNameOption	file:
Mgr	Frontend/AnalysisConsumer.cpp	/^  llvm::OwningPtr<AnalysisManager> Mgr;$/;"	m	class:__anon57::AnalysisConsumer	file:
Msg	Core/CFRefCount.cpp	/^  ObjCMessage Msg;$/;"	m	class:__anon8::InstanceReceiver	file:
Msg	Core/CheckerManager.cpp	/^    const ObjCMessage &Msg;$/;"	m	struct:__anon47::CheckObjCMessageContext	file:
Msgs	Core/CFRefCount.cpp	/^static const char* Msgs[] = {$/;"	v	file:
N	Core/BugReporter.cpp	/^  const ExplodedNode *N;$/;"	m	struct:__anon44::FRIEC_WLItem	file:
N	Core/BugReporter.cpp	/^  const ExplodedNode* N;$/;"	m	class:__anon42::ScanNotableSymbols	file:
N	Core/CXXExprEngine.cpp	/^  ExplodedNode *N;$/;"	m	class:__anon5::CallExprWLItem	file:
N	Core/ExprEngine.cpp	/^  ExplodedNode *N;$/;"	m	class:__anon25::ObjCMsgWLItem	file:
N	Core/ExprEngine.cpp	/^  ExplodedNode* N;$/;"	m	class:__anon26::InitListWLItem	file:
NMC	Core/BugReporter.cpp	/^  NodeMapClosure NMC;$/;"	m	class:__anon40::PathDiagnosticBuilder	file:
NO_CHROOT	Checkers/ChrootChecker.cpp	/^enum Kind { NO_CHROOT, ROOT_CHANGED, JAIL_ENTERED };$/;"	e	enum:__anon80::Kind	file:
NSAutoreleasePoolChecker	Checkers/NSAutoreleasePoolChecker.cpp	/^class NSAutoreleasePoolChecker$/;"	c	namespace:__anon120	file:
NSErrorDerefBug	Checkers/NSErrorChecker.cpp	/^  NSErrorDerefBug() : BugType("NSError** null dereference",$/;"	f	class:__anon116::NSErrorDerefBug
NSErrorDerefBug	Checkers/NSErrorChecker.cpp	/^class NSErrorDerefBug : public BugType {$/;"	c	namespace:__anon116	file:
NSErrorII	Checkers/NSErrorChecker.cpp	/^  mutable IdentifierInfo *NSErrorII, *CFErrorII;$/;"	m	class:__anon117::NSOrCFErrorDerefChecker	file:
NSErrorMethodChecker	Checkers/NSErrorChecker.cpp	/^  NSErrorMethodChecker() : II(0) { }$/;"	f	class:__anon114::NSErrorMethodChecker
NSErrorMethodChecker	Checkers/NSErrorChecker.cpp	/^class NSErrorMethodChecker$/;"	c	namespace:__anon114	file:
NSErrorOut	Checkers/NSErrorChecker.cpp	/^namespace { struct NSErrorOut {}; }$/;"	s	namespace:__anon118	file:
NSOrCFErrorDerefChecker	Checkers/NSErrorChecker.cpp	/^  NSOrCFErrorDerefChecker() : NSErrorII(0), CFErrorII(0),$/;"	f	class:__anon117::NSOrCFErrorDerefChecker
NSOrCFErrorDerefChecker	Checkers/NSErrorChecker.cpp	/^class NSOrCFErrorDerefChecker$/;"	c	namespace:__anon117	file:
Name	Checkers/ClangSACheckerProvider.cpp	/^  const char  *Name;$/;"	m	struct:__anon131::CheckNameOption	file:
NegateComparison	Core/SimpleConstraintManager.cpp	/^static BinaryOperator::Opcode NegateComparison(BinaryOperator::Opcode op) {$/;"	f	namespace:clang::ento	file:
NegateComparison	Core/SimpleSValBuilder.cpp	/^static BinaryOperator::Opcode NegateComparison(BinaryOperator::Opcode op) {$/;"	f	file:
NewAutoreleasePool	Core/CFRefCount.cpp	/^                 NewAutoreleasePool, SelfOwn, StopTracking };$/;"	e	enum:ArgEffect	file:
NilArgChecker	Checkers/BasicObjCFoundationChecks.cpp	/^  class NilArgChecker : public Checker<check::PreObjCMessage> {$/;"	c	namespace:__anon105	file:
NilReceiverVisitor	Core/BugReporterVisitors.cpp	/^  NilReceiverVisitor() {}$/;"	f	class:__anon52::NilReceiverVisitor
NilReceiverVisitor	Core/BugReporterVisitors.cpp	/^class NilReceiverVisitor : public BugReporterVisitor {$/;"	c	namespace:__anon52	file:
NoKind	Checkers/IteratorsChecker.cpp	/^enum RefKind { NoKind, VectorKind, VectorIteratorKind };$/;"	e	enum:__anon100::RefKind	file:
NoRet	Core/CFRefCount.cpp	/^  enum Kind { NoRet, Alias, OwnedSymbol, OwnedAllocatedSymbol,$/;"	e	enum:__anon10::RetEffect::Kind	file:
NoReturnFunctionChecker	Checkers/NoReturnFunctionChecker.cpp	/^class NoReturnFunctionChecker : public Checker< check::PostStmt<CallExpr> > {$/;"	c	namespace:__anon102	file:
NodeAuditor	Core/ExplodedGraph.cpp	/^static ExplodedNode::Auditor* NodeAuditor = 0;$/;"	v	file:
NodeBackMap	Core/BugReporter.cpp	/^const ExplodedNode*> NodeBackMap;$/;"	t	file:
NodeList	Core/ExplodedGraph.cpp	/^typedef std::vector<ExplodedNode*> NodeList;$/;"	t	file:
NodeMapClosure	Core/BugReporter.cpp	/^  NodeMapClosure(NodeBackMap *m) : M(*m) {}$/;"	f	class:__anon40::NodeMapClosure
NodeMapClosure	Core/BugReporter.cpp	/^class NodeMapClosure : public BugReport::NodeResolver {$/;"	c	namespace:__anon40	file:
NotOwned	Core/CFRefCount.cpp	/^    NotOwned,  \/\/ Reference is not owned by still valid (not freed).$/;"	e	enum:__anon10::RefVal::Kind	file:
NotOwnedSymbol	Core/CFRefCount.cpp	/^              NotOwnedSymbol, GCNotOwnedSymbol, ReceiverAlias,$/;"	e	enum:__anon10::RetEffect::Kind	file:
NotableSymbolHandler	Core/BugReporter.cpp	/^  NotableSymbolHandler(SymbolRef sym, const GRState* prevst, const Stmt* s,$/;"	f	class:__anon41::NotableSymbolHandler
NotableSymbolHandler	Core/BugReporter.cpp	/^class NotableSymbolHandler$/;"	c	namespace:__anon41	file:
NumCheckers	Checkers/ClangSACheckerProvider.cpp	/^static const unsigned NumCheckers =   sizeof(StaticCheckerInfo)$/;"	v	file:
NumChecks	Checkers/MacOSXAPIChecker.cpp	/^    NumChecks$/;"	e	enum:__anon126::MacOSXAPIChecker::SubChecks	file:
NumChecks	Checkers/UnixAPIChecker.cpp	/^    NumChecks$/;"	e	enum:__anon136::UnixAPIChecker::SubChecks	file:
NumGroups	Checkers/ClangSACheckerProvider.cpp	/^static const unsigned NumGroups =   sizeof(StaticGroupInfo)$/;"	v	file:
NumPackages	Checkers/ClangSACheckerProvider.cpp	/^static const unsigned NumPackages =   sizeof(StaticPackageInfo)$/;"	v	file:
O	Core/CFRefCount.cpp	/^  ObjKind O;$/;"	m	class:__anon10::RetEffect	file:
OOB_Excedes	Checkers/ArrayBoundCheckerV2.cpp	/^  enum OOB_Kind { OOB_Precedes, OOB_Excedes };$/;"	e	enum:__anon67::ArrayBoundCheckerV2::OOB_Kind	file:
OOB_Kind	Checkers/ArrayBoundCheckerV2.cpp	/^  enum OOB_Kind { OOB_Precedes, OOB_Excedes };$/;"	g	class:__anon67::ArrayBoundCheckerV2	file:
OOB_Precedes	Checkers/ArrayBoundCheckerV2.cpp	/^  enum OOB_Kind { OOB_Precedes, OOB_Excedes };$/;"	e	enum:__anon67::ArrayBoundCheckerV2::OOB_Kind	file:
OSAtomicChecker	Checkers/OSAtomicChecker.cpp	/^class OSAtomicChecker : public Checker<eval::Call> {$/;"	c	namespace:__anon61	file:
ObjC	Core/CFRefCount.cpp	/^  enum ObjKind { CF, ObjC, AnyObj };$/;"	e	enum:__anon10::RetEffect::ObjKind	file:
ObjCAllocRetE	Core/CFRefCount.cpp	/^  RetEffect ObjCAllocRetE;$/;"	m	class:__anon14::RetainSummaryManager	file:
ObjCAtSyncChecker	Checkers/ObjCAtSyncChecker.cpp	/^class ObjCAtSyncChecker$/;"	c	namespace:__anon86	file:
ObjCClassMethodSummaries	Core/CFRefCount.cpp	/^  ObjCMethodSummariesTy ObjCClassMethodSummaries;$/;"	m	class:__anon14::RetainSummaryManager	file:
ObjCDeallocChecker	Checkers/CheckObjCDealloc.cpp	/^class ObjCDeallocChecker : public Checker<$/;"	c	namespace:__anon99	file:
ObjCInitRetE	Core/CFRefCount.cpp	/^  RetEffect ObjCInitRetE;$/;"	m	class:__anon14::RetainSummaryManager	file:
ObjCMethSigsChecker	Checkers/CheckObjCInstMethSignature.cpp	/^class ObjCMethSigsChecker : public Checker<$/;"	c	namespace:__anon95	file:
ObjCMethodSummaries	Core/CFRefCount.cpp	/^  ObjCMethodSummariesTy ObjCMethodSummaries;$/;"	m	class:__anon14::RetainSummaryManager	file:
ObjCMethodSummariesTy	Core/CFRefCount.cpp	/^  typedef ObjCSummaryCache ObjCMethodSummariesTy;$/;"	t	class:__anon14::RetainSummaryManager	file:
ObjCMsgWLItem	Core/ExprEngine.cpp	/^  ObjCMsgWLItem(const ObjCMessageExpr::const_arg_iterator &i, ExplodedNode *n)$/;"	f	class:__anon25::ObjCMsgWLItem
ObjCMsgWLItem	Core/ExprEngine.cpp	/^class ObjCMsgWLItem {$/;"	c	namespace:__anon25	file:
ObjCSelfInitChecker	Checkers/ObjCSelfInitChecker.cpp	/^class ObjCSelfInitChecker : public Checker<$/;"	c	namespace:__anon88	file:
ObjCSummaryCache	Core/CFRefCount.cpp	/^  ObjCSummaryCache() {}$/;"	f	class:__anon13::ObjCSummaryCache
ObjCSummaryCache	Core/CFRefCount.cpp	/^class ObjCSummaryCache {$/;"	c	namespace:__anon13	file:
ObjCSummaryKey	Core/CFRefCount.cpp	/^  ObjCSummaryKey(IdentifierInfo* ii, Selector s)$/;"	f	class:__anon12::ObjCSummaryKey
ObjCSummaryKey	Core/CFRefCount.cpp	/^  ObjCSummaryKey(Selector s)$/;"	f	class:__anon12::ObjCSummaryKey
ObjCSummaryKey	Core/CFRefCount.cpp	/^  ObjCSummaryKey(const ObjCInterfaceDecl* d, IdentifierInfo *ii, Selector s)$/;"	f	class:__anon12::ObjCSummaryKey
ObjCSummaryKey	Core/CFRefCount.cpp	/^  ObjCSummaryKey(const ObjCInterfaceDecl* d, Selector s)$/;"	f	class:__anon12::ObjCSummaryKey
ObjCSummaryKey	Core/CFRefCount.cpp	/^class ObjCSummaryKey {$/;"	c	namespace:__anon12	file:
ObjCUnusedIvarsChecker	Checkers/ObjCUnusedIVarsChecker.cpp	/^class ObjCUnusedIvarsChecker : public Checker<$/;"	c	namespace:__anon94	file:
ObjKind	Core/CFRefCount.cpp	/^  enum ObjKind { CF, ObjC, AnyObj };$/;"	g	class:__anon10::RetEffect	file:
ObserveStmt	Checkers/DeadStoresChecker.cpp	/^  virtual void ObserveStmt(Stmt* S, const CFGBlock *block,$/;"	f	class:__anon75::DeadStoreObs
Offset	Core/RegionStore.cpp	/^  uint64_t Offset;$/;"	m	class:__anon30::BindingKey	file:
OpenFailed	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	e	enum:__anon113::StreamState::Kind	file:
OpenFileAux	Checkers/StreamChecker.cpp	/^void StreamChecker::OpenFileAux(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
OpenFn	Checkers/UnixAPIChecker.cpp	/^    OpenFn = 0,$/;"	e	enum:__anon136::UnixAPIChecker::SubChecks	file:
Opened	Checkers/StreamChecker.cpp	/^  enum Kind { Opened, Closed, OpenFailed, Escaped } K;$/;"	e	enum:__anon113::StreamState::Kind	file:
Optional	Checkers/BasicObjCFoundationChecks.cpp	/^    Optional() : IsKnown(false), Val(0) {}$/;"	f	class:__anon107::Optional
Optional	Checkers/BasicObjCFoundationChecks.cpp	/^    Optional(const T& val) : IsKnown(true), Val(val) {}$/;"	f	class:__anon107::Optional
Optional	Checkers/BasicObjCFoundationChecks.cpp	/^  class Optional {$/;"	c	namespace:__anon107	file:
Opts	Frontend/AnalysisConsumer.cpp	/^  AnalyzerOptions Opts;$/;"	m	class:__anon57::AnalysisConsumer	file:
Out	Frontend/AnalysisConsumer.cpp	/^  llvm::OwningPtr<llvm::raw_ostream> Out;$/;"	m	class:__anon58::UbigraphViz	file:
OutDir	Frontend/AnalysisConsumer.cpp	/^  const std::string OutDir;$/;"	m	class:__anon57::AnalysisConsumer	file:
OutputFile	Core/PlistDiagnostics.cpp	/^    const std::string OutputFile;$/;"	m	class:__anon7::PlistDiagnostics	file:
OutputFile	Core/TextPathDiagnostics.cpp	/^  const std::string OutputFile;$/;"	m	class:__anon22::TextPathDiagnostics	file:
OverAutorelease	Core/CFRefCount.cpp	/^    OverAutorelease(CFRefCount *tf) :$/;"	f	class:__anon18::OverAutorelease
OverAutorelease	Core/CFRefCount.cpp	/^  class OverAutorelease : public CFRefBug {$/;"	c	namespace:__anon18	file:
Owned	Core/CFRefCount.cpp	/^    Owned = 0, \/\/ Owning reference.$/;"	e	enum:__anon10::RefVal::Kind	file:
OwnedAllocatedSymbol	Core/CFRefCount.cpp	/^  enum Kind { NoRet, Alias, OwnedSymbol, OwnedAllocatedSymbol,$/;"	e	enum:__anon10::RetEffect::Kind	file:
OwnedSymbol	Core/CFRefCount.cpp	/^  enum Kind { NoRet, Alias, OwnedSymbol, OwnedAllocatedSymbol,$/;"	e	enum:__anon10::RetEffect::Kind	file:
OwnedWhenTrackedReceiver	Core/CFRefCount.cpp	/^              OwnedWhenTrackedReceiver };$/;"	e	enum:__anon10::RetEffect::Kind	file:
P	Core/RegionStore.cpp	/^  llvm ::PointerIntPair<const MemRegion*, 1> P;$/;"	m	class:__anon30::BindingKey	file:
PACKAGE	Checkers/ClangSACheckerProvider.cpp	66;"	d	file:
PACKAGE	Checkers/ClangSACheckerProvider.cpp	70;"	d	file:
PARALLEL_DIRS	Makefile	/^PARALLEL_DIRS := Core$/;"	m
PD	Core/BugReporter.cpp	/^  PathDiagnostic &PD;$/;"	m	class:__anon43::EdgeBuilder	file:
PD	Core/BugReporter.cpp	/^  PathDiagnostic& PD;$/;"	m	class:__anon41::NotableSymbolHandler	file:
PD	Core/BugReporter.cpp	/^  PathDiagnostic& PD;$/;"	m	class:__anon42::ScanNotableSymbols	file:
PD	Frontend/AnalysisConsumer.cpp	/^  PathDiagnosticClient *PD;$/;"	m	class:__anon57::AnalysisConsumer	file:
PDB	Core/BugReporter.cpp	/^  PathDiagnosticBuilder &PDB;$/;"	m	class:__anon43::EdgeBuilder	file:
PDC	Core/BugReporter.cpp	/^  PathDiagnosticClient *PDC;$/;"	m	class:__anon40::PathDiagnosticBuilder	file:
PM	Core/BugReporter.cpp	/^  llvm::OwningPtr<ParentMap> PM;$/;"	m	class:__anon40::PathDiagnosticBuilder	file:
PP	Core/HTMLDiagnostics.cpp	/^  const Preprocessor &PP;$/;"	m	class:__anon29::HTMLDiagnostics	file:
PP	Frontend/AnalysisConsumer.cpp	/^  const Preprocessor &PP;$/;"	m	class:__anon57::AnalysisConsumer	file:
Parents	Checkers/DeadStoresChecker.cpp	/^  ParentMap& Parents;$/;"	m	class:__anon75::DeadStoreObs	file:
PathDiagnostic	Core/PathDiagnostic.cpp	/^PathDiagnostic::PathDiagnostic() : Size(0) {}$/;"	f	class:PathDiagnostic
PathDiagnostic	Core/PathDiagnostic.cpp	/^PathDiagnostic::PathDiagnostic(llvm::StringRef bugtype, llvm::StringRef desc,$/;"	f	class:PathDiagnostic
PathDiagnosticBuilder	Core/BugReporter.cpp	/^  PathDiagnosticBuilder(GRBugReporter &br,$/;"	f	class:__anon40::PathDiagnosticBuilder
PathDiagnosticBuilder	Core/BugReporter.cpp	/^class PathDiagnosticBuilder : public BugReporterContext {$/;"	c	namespace:__anon40	file:
PathDiagnosticPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticPiece::PathDiagnosticPiece(Kind k, DisplayHint hint)$/;"	f	class:PathDiagnosticPiece
PathDiagnosticPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticPiece::PathDiagnosticPiece(llvm::StringRef s,$/;"	f	class:PathDiagnosticPiece
PersistentSValPairsTy	Core/BasicValueFactory.cpp	/^  PersistentSValPairsTy;$/;"	t	file:
PersistentSValsTy	Core/BasicValueFactory.cpp	/^  PersistentSValsTy;$/;"	t	file:
PlistDiagnostics	Core/PlistDiagnostics.cpp	/^  class PlistDiagnostics : public PathDiagnosticClient {$/;"	c	namespace:__anon7	file:
PlistDiagnostics	Core/PlistDiagnostics.cpp	/^PlistDiagnostics::PlistDiagnostics(const std::string& output,$/;"	f	class:PlistDiagnostics
PointerArithChecker	Checkers/PointerArithChecker.cpp	/^class PointerArithChecker $/;"	c	namespace:__anon85	file:
PointerSubChecker	Checkers/PointerSubChecker.cpp	/^class PointerSubChecker $/;"	c	namespace:__anon97	file:
Possible	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
Postponed	Core/RegionStore.cpp	/^  llvm::SmallVector<const SymbolicRegion*, 12> Postponed;$/;"	m	class:__anon35::removeDeadBindingsWorker	file:
PreCallSelfFlags	Checkers/ObjCSelfInitChecker.cpp	/^namespace { struct PreCallSelfFlags {}; }$/;"	s	namespace:__anon92	file:
PreVisitProcessArg	Checkers/CallAndMessageChecker.cpp	/^bool CallAndMessageChecker::PreVisitProcessArg(CheckerContext &C,$/;"	f	class:CallAndMessageChecker
PreVisitProcessArgs	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::PreVisitProcessArgs(CheckerContext &C,$/;"	f	class:CallAndMessageChecker
Pred	Core/AggExprVisitor.cpp	/^  ExplodedNode *Pred;$/;"	m	class:__anon56::AggExprVisitor	file:
Pred	Core/BugReporter.cpp	/^  const ExplodedNode* Pred;$/;"	m	class:__anon41::NotableSymbolHandler	file:
PrevLoc	Core/BugReporter.cpp	/^  PathDiagnosticLocation PrevLoc;$/;"	m	class:__anon43::EdgeBuilder	file:
PrevSt	Core/BugReporter.cpp	/^  const GRState* PrevSt;$/;"	m	class:__anon41::NotableSymbolHandler	file:
PrimRangeSet	Core/RangeConstraintManager.cpp	/^  typedef llvm::ImmutableSet<Range, RangeTrait> PrimRangeSet;$/;"	t	class:__anon38::RangeSet	file:
Print	Core/CFRefCount.cpp	/^void CFRefCount::BindingsPrinter::Print(llvm::raw_ostream& Out,$/;"	f	class:CFRefCount::BindingsPrinter
PrintPool	Core/CFRefCount.cpp	/^static void PrintPool(llvm::raw_ostream &Out, SymbolRef Sym,$/;"	f	file:
ProcessAutomaticObjDtor	Core/ExprEngine.cpp	/^void ExprEngine::ProcessAutomaticObjDtor(const CFGAutomaticObjDtor dtor,$/;"	f	class:ExprEngine
ProcessBaseDtor	Core/ExprEngine.cpp	/^void ExprEngine::ProcessBaseDtor(const CFGBaseDtor D,$/;"	f	class:ExprEngine
ProcessImplicitDtor	Core/ExprEngine.cpp	/^void ExprEngine::ProcessImplicitDtor(const CFGImplicitDtor D,$/;"	f	class:ExprEngine
ProcessInitializer	Core/ExprEngine.cpp	/^void ExprEngine::ProcessInitializer(const CFGInitializer Init,$/;"	f	class:ExprEngine
ProcessLeaks	Core/CFRefCount.cpp	/^CFRefCount::ProcessLeaks(const GRState * state,$/;"	f	class:CFRefCount
ProcessMacroPiece	Core/HTMLDiagnostics.cpp	/^unsigned HTMLDiagnostics::ProcessMacroPiece(llvm::raw_ostream& os,$/;"	f	class:HTMLDiagnostics
ProcessMemberDtor	Core/ExprEngine.cpp	/^void ExprEngine::ProcessMemberDtor(const CFGMemberDtor D,$/;"	f	class:ExprEngine
ProcessNonLeakError	Core/CFRefCount.cpp	/^void CFRefCount::ProcessNonLeakError(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
ProcessStmt	Core/ExprEngine.cpp	/^void ExprEngine::ProcessStmt(const CFGStmt S, StmtNodeBuilder& builder) {$/;"	f	class:ExprEngine
ProcessTemporaryDtor	Core/ExprEngine.cpp	/^void ExprEngine::ProcessTemporaryDtor(const CFGTemporaryDtor D,$/;"	f	class:ExprEngine
Profile	Checkers/IteratorsChecker.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon100::RefState
Profile	Checkers/MallocChecker.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon98::RefState
Profile	Checkers/StreamChecker.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	struct:__anon113::StreamState
Profile	Core/BasicValueFactory.cpp	/^  static inline void Profile(const SValData& X, llvm::FoldingSetNodeID& ID) {$/;"	f	struct:llvm::FoldingSetTrait
Profile	Core/BasicValueFactory.cpp	/^  static inline void Profile(const SValPair& X, llvm::FoldingSetNodeID& ID) {$/;"	f	struct:llvm::FoldingSetTrait
Profile	Core/BasicValueFactory.cpp	/^void CompoundValData::Profile(llvm::FoldingSetNodeID& ID, QualType T,$/;"	f	class:CompoundValData
Profile	Core/BasicValueFactory.cpp	/^void LazyCompoundValData::Profile(llvm::FoldingSetNodeID& ID,$/;"	f	class:LazyCompoundValData
Profile	Core/BlockCounter.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon36::CountKey
Profile	Core/BugReporter.cpp	/^  void Profile(llvm::FoldingSetNodeID &id) {$/;"	f	class:__anon45::DiagCacheItem
Profile	Core/BugReporterVisitors.cpp	/^  virtual void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon51::FindLastStoreBRVisitor
Profile	Core/BugReporterVisitors.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon51::TrackConstraintBRVisitor
Profile	Core/BugReporterVisitors.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon52::NilReceiverVisitor
Profile	Core/CFRefCount.cpp	/^  void Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:__anon10::RefVal
Profile	Core/CFRefCount.cpp	/^static inline void Profile(const ArgEffect X, FoldingSetNodeID& ID) {$/;"	f	struct:llvm::FoldingSetTrait
Profile	Core/MemRegion.cpp	/^void AllocaRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:AllocaRegion
Profile	Core/MemRegion.cpp	/^void BlockDataRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:BlockDataRegion
Profile	Core/MemRegion.cpp	/^void BlockTextRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:BlockTextRegion
Profile	Core/MemRegion.cpp	/^void CXXBaseObjectRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:CXXBaseObjectRegion
Profile	Core/MemRegion.cpp	/^void CXXTempObjectRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:CXXTempObjectRegion
Profile	Core/MemRegion.cpp	/^void CXXThisRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:CXXThisRegion
Profile	Core/MemRegion.cpp	/^void CompoundLiteralRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:CompoundLiteralRegion
Profile	Core/MemRegion.cpp	/^void DeclRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:DeclRegion
Profile	Core/MemRegion.cpp	/^void ElementRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:ElementRegion
Profile	Core/MemRegion.cpp	/^void FunctionTextRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:FunctionTextRegion
Profile	Core/MemRegion.cpp	/^void MemSpaceRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:MemSpaceRegion
Profile	Core/MemRegion.cpp	/^void StackSpaceRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:StackSpaceRegion
Profile	Core/MemRegion.cpp	/^void StaticGlobalSpaceRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:StaticGlobalSpaceRegion
Profile	Core/MemRegion.cpp	/^void SymbolicRegion::Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:SymbolicRegion
Profile	Core/MemRegion.cpp	/^void VarRegion::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:VarRegion
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnostic::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnostic
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnosticControlFlowPiece::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnosticControlFlowPiece
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnosticLocation::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnosticLocation
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnosticMacroPiece::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnosticMacroPiece
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnosticPiece::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnosticPiece
Profile	Core/PathDiagnostic.cpp	/^void PathDiagnosticSpotPiece::Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:PathDiagnosticSpotPiece
Profile	Core/RangeConstraintManager.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const { ranges.Profile(ID); }$/;"	f	class:__anon38::RangeSet
Profile	Core/RangeConstraintManager.cpp	/^  void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	class:__anon38::Range
Profile	Core/RegionStore.cpp	/^  void Profile(llvm::FoldingSetNodeID& ID) const {$/;"	f	class:__anon30::BindingKey
ProfileRegion	Core/MemRegion.cpp	/^void AllocaRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:AllocaRegion
ProfileRegion	Core/MemRegion.cpp	/^void BlockDataRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:BlockDataRegion
ProfileRegion	Core/MemRegion.cpp	/^void BlockTextRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:BlockTextRegion
ProfileRegion	Core/MemRegion.cpp	/^void CXXBaseObjectRegion::ProfileRegion(llvm::FoldingSetNodeID &ID,$/;"	f	class:CXXBaseObjectRegion
ProfileRegion	Core/MemRegion.cpp	/^void CXXTempObjectRegion::ProfileRegion(llvm::FoldingSetNodeID &ID,$/;"	f	class:CXXTempObjectRegion
ProfileRegion	Core/MemRegion.cpp	/^void CXXThisRegion::ProfileRegion(llvm::FoldingSetNodeID &ID,$/;"	f	class:CXXThisRegion
ProfileRegion	Core/MemRegion.cpp	/^void CompoundLiteralRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:CompoundLiteralRegion
ProfileRegion	Core/MemRegion.cpp	/^void DeclRegion::ProfileRegion(llvm::FoldingSetNodeID& ID, const Decl* D,$/;"	f	class:DeclRegion
ProfileRegion	Core/MemRegion.cpp	/^void ElementRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:ElementRegion
ProfileRegion	Core/MemRegion.cpp	/^void FunctionTextRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:FunctionTextRegion
ProfileRegion	Core/MemRegion.cpp	/^void StringRegion::ProfileRegion(llvm::FoldingSetNodeID& ID,$/;"	f	class:StringRegion
ProfileRegion	Core/MemRegion.cpp	/^void SymbolicRegion::ProfileRegion(llvm::FoldingSetNodeID& ID, SymbolRef sym,$/;"	f	class:SymbolicRegion
PthreadLockChecker	Checkers/PthreadLockChecker.cpp	/^class PthreadLockChecker$/;"	c	namespace:__anon59	file:
PthreadOnceFn	Checkers/UnixAPIChecker.cpp	/^    PthreadOnceFn = 1,$/;"	e	enum:__anon136::UnixAPIChecker::SubChecks	file:
Queue	Core/CoreEngine.cpp	/^    std::deque<WorkListUnit> Queue;$/;"	m	class:__anon28::BFSBlockDFSContents	file:
Queue	Core/CoreEngine.cpp	/^  std::deque<WorkListUnit> Queue;$/;"	m	class:__anon27::BFS	file:
R	Core/BugReporter.cpp	/^  BugReport *R;$/;"	m	class:__anon40::PathDiagnosticBuilder	file:
R	Core/BugReporterVisitors.cpp	/^  const MemRegion *R;$/;"	m	class:__anon51::FindLastStoreBRVisitor	file:
R	Core/FlatStore.cpp	/^    const MemRegion *R;$/;"	m	class:__anon23::FlatStoreManager::RegionInterval	file:
RBFactory	Core/FlatStore.cpp	/^  RegionBindings::Factory RBFactory;$/;"	m	class:__anon23::FlatStoreManager	file:
RBFactory	Core/RegionStore.cpp	/^  RegionBindings::Factory RBFactory;$/;"	m	class:__anon32::RegionStoreManager	file:
RHSis0	Checkers/IdempotentOperationChecker.cpp	/^      RHSis0 };$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
RHSis1	Checkers/IdempotentOperationChecker.cpp	/^  enum Assumption { Possible = 0, Impossible, Equal, LHSis1, RHSis1, LHSis0,$/;"	e	enum:__anon65::IdempotentOperationChecker::Assumption	file:
RM	Core/RegionStore.cpp	/^  RegionStoreManager &RM;$/;"	m	class:__anon33::ClusterAnalysis	file:
ROOT_CHANGED	Checkers/ChrootChecker.cpp	/^enum Kind { NO_CHROOT, ROOT_CHANGED, JAIL_ENTERED };$/;"	e	enum:__anon80::Kind	file:
Range	Core/RangeConstraintManager.cpp	/^  Range(const llvm::APSInt &from, const llvm::APSInt &to)$/;"	f	class:__anon38::Range
Range	Core/RangeConstraintManager.cpp	/^class Range : public std::pair<const llvm::APSInt*,$/;"	c	namespace:__anon38	file:
RangeConstraintManager	Core/RangeConstraintManager.cpp	/^  RangeConstraintManager(SubEngine &subengine)$/;"	f	class:__anon39::RangeConstraintManager
RangeConstraintManager	Core/RangeConstraintManager.cpp	/^class RangeConstraintManager : public SimpleConstraintManager{$/;"	c	namespace:__anon39	file:
RangeSet	Core/RangeConstraintManager.cpp	/^  RangeSet(Factory &F, const llvm::APSInt &from, const llvm::APSInt &to)$/;"	f	class:__anon38::RangeSet
RangeSet	Core/RangeConstraintManager.cpp	/^  RangeSet(PrimRangeSet RS) : ranges(RS) {}$/;"	f	class:__anon38::RangeSet
RangeSet	Core/RangeConstraintManager.cpp	/^class RangeSet {$/;"	c	namespace:__anon38	file:
RangeTrait	Core/RangeConstraintManager.cpp	/^class RangeTrait : public llvm::ImutContainerInfo<Range> {$/;"	c	namespace:__anon38	file:
ReachableCode	Checkers/DeadStoresChecker.cpp	/^  ReachableCode(const CFG &cfg)$/;"	f	class:__anon74::ReachableCode
ReachableCode	Checkers/DeadStoresChecker.cpp	/^class ReachableCode {$/;"	c	namespace:__anon74	file:
ReallocMem	Checkers/MallocChecker.cpp	/^void MallocChecker::ReallocMem(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:MallocChecker
Receiver	Core/CFRefCount.cpp	/^  ArgEffect   Receiver;$/;"	m	class:__anon11::RetainSummary	file:
ReceiverAlias	Core/CFRefCount.cpp	/^              NotOwnedSymbol, GCNotOwnedSymbol, ReceiverAlias,$/;"	e	enum:__anon10::RetEffect::Kind	file:
RecoverCastedSymbol	Core/ExprEngine.cpp	/^static SVal RecoverCastedSymbol(GRStateManager& StateMgr, const GRState* state,$/;"	f	file:
RefBindings	Core/CFRefCount.cpp	/^typedef llvm::ImmutableMap<SymbolRef, RefVal> RefBindings;$/;"	t	file:
RefKind	Checkers/IteratorsChecker.cpp	/^enum RefKind { NoKind, VectorKind, VectorIteratorKind };$/;"	g	namespace:__anon100	file:
RefState	Checkers/IteratorsChecker.cpp	/^  RefState(Kind k, const void *vr) : K(k), VR(vr) {}$/;"	f	class:__anon100::RefState
RefState	Checkers/IteratorsChecker.cpp	/^class RefState {$/;"	c	namespace:__anon100	file:
RefState	Checkers/MallocChecker.cpp	/^  RefState(Kind k, const Stmt *s) : K(k), S(s) {}$/;"	f	class:__anon98::RefState
RefState	Checkers/MallocChecker.cpp	/^class RefState {$/;"	c	namespace:__anon98	file:
RefVal	Core/CFRefCount.cpp	/^  RefVal(Kind k, RetEffect::ObjKind o, unsigned cnt, unsigned acnt, QualType t)$/;"	f	class:__anon10::RefVal	file:
RefVal	Core/CFRefCount.cpp	/^class RefVal {$/;"	c	namespace:__anon10	file:
RegFunc	Checkers/ClangSACheckerProvider.cpp	/^  void (*RegFunc)(CheckerManager &mgr);$/;"	m	struct:__anon130::StaticCheckerInfoRec	file:
RegionBindings	Core/FlatStore.cpp	/^typedef llvm::ImmutableMap<const MemRegion *, BindingVal> RegionBindings;$/;"	t	file:
RegionBindings	Core/RegionStore.cpp	/^typedef llvm::ImmutableMap<BindingKey, SVal> RegionBindings;$/;"	t	file:
RegionCluster	Core/RegionStore.cpp	/^  typedef BumpVector<BindingKey> RegionCluster;$/;"	t	class:__anon33::ClusterAnalysis	file:
RegionInterval	Core/FlatStore.cpp	/^    RegionInterval(const MemRegion *r, int64_t s, int64_t e) : R(r), I(s, e){}$/;"	f	class:__anon23::FlatStoreManager::RegionInterval
RegionInterval	Core/FlatStore.cpp	/^  class RegionInterval {$/;"	c	class:__anon23::FlatStoreManager	file:
RegionRawOffsetV2	Checkers/ArrayBoundCheckerV2.cpp	/^  RegionRawOffsetV2()$/;"	f	class:__anon67::RegionRawOffsetV2	file:
RegionRawOffsetV2	Checkers/ArrayBoundCheckerV2.cpp	/^  RegionRawOffsetV2(const SubRegion* base, SVal offset)$/;"	f	class:__anon67::RegionRawOffsetV2
RegionRawOffsetV2	Checkers/ArrayBoundCheckerV2.cpp	/^class RegionRawOffsetV2 {$/;"	c	namespace:__anon67	file:
RegionState	Checkers/MallocChecker.cpp	/^class RegionState {};$/;"	c	namespace:__anon98	file:
RegionStateTy	Checkers/MallocChecker.cpp	/^typedef llvm::ImmutableMap<SymbolRef, RefState> RegionStateTy;$/;"	t	file:
RegionStoreFeatures	Core/RegionStore.cpp	/^  RegionStoreFeatures(maximal_features_tag) :$/;"	f	class:__anon31::RegionStoreFeatures
RegionStoreFeatures	Core/RegionStore.cpp	/^  RegionStoreFeatures(minimal_features_tag) :$/;"	f	class:__anon31::RegionStoreFeatures
RegionStoreFeatures	Core/RegionStore.cpp	/^class RegionStoreFeatures {$/;"	c	namespace:__anon31	file:
RegionStoreManager	Core/RegionStore.cpp	/^  RegionStoreManager(GRStateManager& mgr, const RegionStoreFeatures &f)$/;"	f	class:__anon32::RegionStoreManager
RegionStoreManager	Core/RegionStore.cpp	/^class RegionStoreManager : public StoreManager {$/;"	c	namespace:__anon32	file:
RegionStoreSubRegionMap	Core/RegionStore.cpp	/^class RegionStoreSubRegionMap : public SubRegionMap {$/;"	c	namespace:__anon32	file:
RegionToInterval	Core/FlatStore.cpp	/^FlatStoreManager::RegionToInterval(const MemRegion *R) { $/;"	f	class:FlatStoreManager
Regions	Core/RegionStore.cpp	/^  StoreManager::InvalidatedRegions *Regions;$/;"	m	class:__anon34::invalidateRegionsWorker	file:
Register	Core/BugReporter.cpp	/^void BugReporter::Register(BugType *BT) {$/;"	f	class:BugReporter
RegisterChecks	Core/CFRefCount.cpp	/^void CFRefCount::RegisterChecks(ExprEngine& Eng) {$/;"	f	class:CFRefCount
RegisterPrinters	Core/CFRefCount.cpp	/^  virtual void RegisterPrinters(std::vector<GRState::Printer*>& Printers) {$/;"	f	class:__anon17::CFRefCount
Release	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable IdentifierInfo *Retain, *Release;$/;"	m	class:__anon108::CFRetainReleaseChecker	file:
ReleaseLock	Checkers/PthreadLockChecker.cpp	/^void PthreadLockChecker::ReleaseLock(CheckerContext &C, const CallExpr *CE,$/;"	f	class:PthreadLockChecker
Released	Checkers/MallocChecker.cpp	/^  enum Kind { AllocateUnchecked, AllocateFailed, Released, Escaped,$/;"	e	enum:__anon98::RefState::Kind	file:
Released	Core/CFRefCount.cpp	/^    Released,  \/\/ Object has been released.$/;"	e	enum:__anon10::RefVal::Kind	file:
Relinquished	Checkers/MallocChecker.cpp	/^              Relinquished } K;$/;"	e	enum:__anon98::RefState::Kind	file:
Remove	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::Remove(Store store, Loc loc) {$/;"	f	class:BasicStoreManager
Remove	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::Remove(Store store, Loc L) {$/;"	f	class:FlatStoreManager
Remove	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::Remove(Store store, Loc L) {$/;"	f	class:RegionStoreManager
RemoveSubRegionBindings	Core/RegionStore.cpp	/^void RegionStoreManager::RemoveSubRegionBindings(RegionBindings &B,$/;"	f	class:RegionStoreManager
Report	Checkers/DeadStoresChecker.cpp	/^  void Report(VarDecl* V, DeadStoreKind dsk, SourceLocation L, SourceRange R) {$/;"	f	class:__anon75::DeadStoreObs
ReportBadFree	Checkers/MallocChecker.cpp	/^void MallocChecker::ReportBadFree(CheckerContext &C, SVal ArgVal,$/;"	f	class:MallocChecker
ReportControlFlow	Core/PlistDiagnostics.cpp	/^static void ReportControlFlow(llvm::raw_ostream& o,$/;"	f	file:
ReportDiag	Core/HTMLDiagnostics.cpp	/^void HTMLDiagnostics::ReportDiag(const PathDiagnostic& D,$/;"	f	class:HTMLDiagnostics
ReportDiag	Core/PlistDiagnostics.cpp	/^static void ReportDiag(llvm::raw_ostream& o, const PathDiagnosticPiece& P,$/;"	f	file:
ReportError	Checkers/LLVMConventionsChecker.cpp	/^void ASTFieldVisitor::ReportError(QualType T) {$/;"	f	class:ASTFieldVisitor
ReportEvent	Core/PlistDiagnostics.cpp	/^static void ReportEvent(llvm::raw_ostream& o, const PathDiagnosticPiece& P,$/;"	f	file:
ReportMacro	Core/PlistDiagnostics.cpp	/^static void ReportMacro(llvm::raw_ostream& o,$/;"	f	file:
ResolveToInterfaceMethodDecl	Core/CFRefCount.cpp	/^ResolveToInterfaceMethodDecl(const ObjCMethodDecl *MD) {$/;"	f	file:
Ret	Core/CFRefCount.cpp	/^  RetEffect   Ret;$/;"	m	class:__anon11::RetainSummary	file:
RetEffect	Core/CFRefCount.cpp	/^  RetEffect(Kind k, ObjKind o) : K(k), O(o), index(0) {}$/;"	f	class:__anon10::RetEffect	file:
RetEffect	Core/CFRefCount.cpp	/^  RetEffect(Kind k, unsigned idx = 0) : K(k), O(AnyObj), index(idx) {}$/;"	f	class:__anon10::RetEffect	file:
RetEffect	Core/CFRefCount.cpp	/^class RetEffect {$/;"	c	namespace:__anon10	file:
Retain	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable IdentifierInfo *Retain, *Release;$/;"	m	class:__anon108::CFRetainReleaseChecker	file:
RetainReleaseChecker	Core/CFRefCount.cpp	/^class RetainReleaseChecker$/;"	c	namespace:__anon21	file:
RetainSummary	Core/CFRefCount.cpp	/^  RetainSummary(ArgEffects A, RetEffect R, ArgEffect defaultEff,$/;"	f	class:__anon11::RetainSummary
RetainSummary	Core/CFRefCount.cpp	/^class RetainSummary {$/;"	c	namespace:__anon11	file:
RetainSummaryManager	Core/CFRefCount.cpp	/^  RetainSummaryManager(ASTContext& ctx, bool gcenabled)$/;"	f	class:__anon14::RetainSummaryManager
RetainSummaryManager	Core/CFRefCount.cpp	/^class RetainSummaryManager {$/;"	c	namespace:__anon14	file:
Retrieve	Core/BasicStore.cpp	/^SVal BasicStoreManager::Retrieve(Store store, Loc loc, QualType T) {$/;"	f	class:BasicStoreManager
Retrieve	Core/FlatStore.cpp	/^SVal FlatStoreManager::Retrieve(Store store, Loc L, QualType T) {$/;"	f	class:FlatStoreManager
Retrieve	Core/RegionStore.cpp	/^SVal RegionStoreManager::Retrieve(Store store, Loc L, QualType T) {$/;"	f	class:RegionStoreManager
RetrieveArray	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveArray(Store store, const TypedRegion * R) {$/;"	f	class:RegionStoreManager
RetrieveDerivedDefaultValue	Core/RegionStore.cpp	/^RegionStoreManager::RetrieveDerivedDefaultValue(RegionBindings B,$/;"	f	class:RegionStoreManager
RetrieveElement	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveElement(Store store,$/;"	f	class:RegionStoreManager
RetrieveField	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveField(Store store,$/;"	f	class:RegionStoreManager
RetrieveFieldOrElementCommon	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveFieldOrElementCommon(Store store,$/;"	f	class:RegionStoreManager
RetrieveLazyBinding	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveLazyBinding(const MemRegion *lazyBindingRegion,$/;"	f	class:RegionStoreManager
RetrieveLazySymbol	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveLazySymbol(const TypedRegion *R) {$/;"	f	class:RegionStoreManager
RetrieveObjCIvar	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveObjCIvar(Store store, const ObjCIvarRegion* R){$/;"	f	class:RegionStoreManager
RetrieveRegionWithNoBinding	Core/FlatStore.cpp	/^SVal FlatStoreManager::RetrieveRegionWithNoBinding(const MemRegion *R,$/;"	f	class:FlatStoreManager
RetrieveStruct	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveStruct(Store store, const TypedRegion* R) {$/;"	f	class:RegionStoreManager
RetrieveVar	Core/RegionStore.cpp	/^SVal RegionStoreManager::RetrieveVar(Store store, const VarRegion *R) {$/;"	f	class:RegionStoreManager
ReturnExpr	Core/ExprEngine.cpp	/^  struct ReturnExpr {$/;"	s	namespace:__anon24	file:
ReturnPointerRangeChecker	Checkers/ReturnPointerRangeChecker.cpp	/^class ReturnPointerRangeChecker : $/;"	c	namespace:__anon96	file:
ReturnUndefChecker	Checkers/ReturnUndefChecker.cpp	/^class ReturnUndefChecker : $/;"	c	namespace:__anon79	file:
ReturnedNotOwned	Core/CFRefCount.cpp	/^    ReturnedNotOwned, \/\/ Return object does not pass ownership to caller.$/;"	e	enum:__anon10::RefVal::Kind	file:
ReturnedNotOwnedForOwned	Core/CFRefCount.cpp	/^    ReturnedNotOwnedForOwned(CFRefCount *tf) :$/;"	f	class:__anon18::ReturnedNotOwnedForOwned
ReturnedNotOwnedForOwned	Core/CFRefCount.cpp	/^  class ReturnedNotOwnedForOwned : public CFRefBug {$/;"	c	namespace:__anon18	file:
ReturnedOwned	Core/CFRefCount.cpp	/^    ReturnedOwned, \/\/ Returned object passes ownership to caller.$/;"	e	enum:__anon10::RefVal::Kind	file:
ReverseComparison	Core/SimpleSValBuilder.cpp	/^static BinaryOperator::Opcode ReverseComparison(BinaryOperator::Opcode op) {$/;"	f	file:
Rewind	Checkers/StreamChecker.cpp	/^void StreamChecker::Rewind(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
Root	Checkers/LLVMConventionsChecker.cpp	/^  const CXXRecordDecl *Root;$/;"	m	class:__anon69::ASTFieldVisitor	file:
RunWorkList	Core/RegionStore.cpp	/^  void RunWorkList() {$/;"	f	class:__anon33::ClusterAnalysis
S	Checkers/MallocChecker.cpp	/^  const Stmt *S;$/;"	m	class:__anon98::RefState	file:
S	Checkers/StreamChecker.cpp	/^  const Stmt *S;$/;"	m	struct:__anon113::StreamState	file:
S	Core/BugReporter.cpp	/^  const Stmt* S;$/;"	m	class:__anon41::NotableSymbolHandler	file:
S	Core/BugReporter.cpp	/^  const Stmt* S;$/;"	m	class:__anon42::ScanNotableSymbols	file:
S	Core/CFRefCount.cpp	/^  Selector S;$/;"	m	class:__anon12::ObjCSummaryKey	file:
S	Core/CFRefCount.cpp	/^  const Stmt *S;$/;"	m	class:__anon9::GenericNodeBuilderRefCount	file:
S	Core/CheckerManager.cpp	/^    const Stmt *S;$/;"	m	struct:__anon46::CheckStmtContext	file:
S	Core/CheckerManager.cpp	/^    const Stmt *S;$/;"	m	struct:__anon48::CheckLocationContext	file:
S	Core/CheckerManager.cpp	/^    const Stmt *S;$/;"	m	struct:__anon49::CheckBindContext	file:
S	Core/CheckerManager.cpp	/^    const Stmt *S;$/;"	m	struct:__anon50::CheckDeadSymbolsContext	file:
SC	Checkers/MacOSXAPIChecker.cpp	/^    SubChecker SC;$/;"	m	class:__anon127::SubCheck	file:
SC	Checkers/UnixAPIChecker.cpp	/^    SubChecker SC;$/;"	m	class:__anon137::SubCheck	file:
SNB	Core/CFRefCount.cpp	/^  StmtNodeBuilder *SNB;$/;"	m	class:__anon9::GenericNodeBuilderRefCount	file:
SR	Core/CheckerManager.cpp	/^    SymbolReaper &SR;$/;"	m	struct:__anon50::CheckDeadSymbolsContext	file:
SRM	Core/GRState.cpp	/^  llvm::OwningPtr<SubRegionMap> SRM;$/;"	m	class:__anon53::ScanReachableSymbols	file:
SU	Core/SimpleConstraintManager.h	/^  SubEngine &SU;$/;"	m	class:clang::ento::SimpleConstraintManager
SValData	Core/BasicValueFactory.cpp	/^typedef std::pair<SVal, uintptr_t> SValData;$/;"	t	file:
SValPair	Core/BasicValueFactory.cpp	/^typedef std::pair<SVal, SVal> SValPair;$/;"	t	file:
Scan	Checkers/ObjCUnusedIVarsChecker.cpp	/^static void Scan(IvarUsageMap &M, const DeclContext *C, const FileID FID,$/;"	f	file:
Scan	Checkers/ObjCUnusedIVarsChecker.cpp	/^static void Scan(IvarUsageMap& M, const ObjCContainerDecl* D) {$/;"	f	file:
Scan	Checkers/ObjCUnusedIVarsChecker.cpp	/^static void Scan(IvarUsageMap& M, const ObjCPropertyImplDecl* D) {$/;"	f	file:
Scan	Checkers/ObjCUnusedIVarsChecker.cpp	/^static void Scan(IvarUsageMap& M, const Stmt* S) {$/;"	f	file:
ScanNotableSymbols	Core/BugReporter.cpp	/^  ScanNotableSymbols(const ExplodedNode* n, const Stmt* s,$/;"	f	class:__anon42::ScanNotableSymbols
ScanNotableSymbols	Core/BugReporter.cpp	/^class ScanNotableSymbols$/;"	c	namespace:__anon42	file:
ScanReachableSymbols	Core/GRState.cpp	/^  ScanReachableSymbols(const GRState *st, SymbolVisitor& v)$/;"	f	class:__anon53::ScanReachableSymbols
ScanReachableSymbols	Core/GRState.cpp	/^class ScanReachableSymbols : public SubRegionMap::Visitor  {$/;"	c	namespace:__anon53	file:
ScratchArgs	Core/CFRefCount.cpp	/^  ArgEffects ScratchArgs;$/;"	m	class:__anon14::RetainSummaryManager	file:
SecuritySyntaxChecker	Checkers/CheckSecuritySyntaxOnly.cpp	/^class SecuritySyntaxChecker : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon125	file:
SelfFlag	Checkers/ObjCSelfInitChecker.cpp	/^typedef llvm::ImmutableMap<SymbolRef, unsigned> SelfFlag;$/;"	t	file:
SelfFlagEnum	Checkers/ObjCSelfInitChecker.cpp	/^enum SelfFlagEnum {$/;"	g	namespace:__anon90	file:
SelfFlag_InitRes	Checkers/ObjCSelfInitChecker.cpp	/^  SelfFlag_InitRes = 0x2$/;"	e	enum:__anon90::SelfFlagEnum	file:
SelfFlag_None	Checkers/ObjCSelfInitChecker.cpp	/^  SelfFlag_None = 0x0,$/;"	e	enum:__anon90::SelfFlagEnum	file:
SelfFlag_Self	Checkers/ObjCSelfInitChecker.cpp	/^  SelfFlag_Self    = 0x1,$/;"	e	enum:__anon90::SelfFlagEnum	file:
SelfOwn	Core/CFRefCount.cpp	/^                 NewAutoreleasePool, SelfOwn, StopTracking };$/;"	e	enum:ArgEffect	file:
SendAutorelease	Core/CFRefCount.cpp	/^static const GRState * SendAutorelease(const GRState *state,$/;"	f	file:
Set	Core/RegionStore.cpp	/^  typedef llvm::ImmutableSet<const MemRegion*> Set;$/;"	t	class:__anon32::RegionStoreSubRegionMap	file:
SetAuditor	Core/ExplodedGraph.cpp	/^void ExplodedNode::SetAuditor(ExplodedNode::Auditor* A) {$/;"	f	class:ExplodedNode
ShouldCheckCFError	Checkers/NSErrorChecker.cpp	/^  bool ShouldCheckNSError, ShouldCheckCFError;$/;"	m	class:__anon117::NSOrCFErrorDerefChecker	file:
ShouldCheckNSError	Checkers/NSErrorChecker.cpp	/^  bool ShouldCheckNSError, ShouldCheckCFError;$/;"	m	class:__anon117::NSOrCFErrorDerefChecker	file:
SimpleConstraintManager	Core/SimpleConstraintManager.h	/^  SimpleConstraintManager(SubEngine &subengine) : SU(subengine) {}$/;"	f	class:clang::ento::SimpleConstraintManager
SimpleConstraintManager	Core/SimpleConstraintManager.h	/^class SimpleConstraintManager : public ConstraintManager {$/;"	c	namespace:clang::ento
SimpleSValBuilder	Core/SimpleSValBuilder.cpp	/^  SimpleSValBuilder(llvm::BumpPtrAllocator &alloc, ASTContext &context,$/;"	f	class:__anon54::SimpleSValBuilder
SimpleSValBuilder	Core/SimpleSValBuilder.cpp	/^class SimpleSValBuilder : public SValBuilder {$/;"	c	namespace:__anon54	file:
SizeofPointerChecker	Checkers/CheckSizeofPointer.cpp	/^class SizeofPointerChecker : public Checker<check::ASTCodeBody> {$/;"	c	namespace:__anon82	file:
SortedCheckers	Checkers/ClangSACheckerProvider.cpp	/^typedef std::map<std::string, const StaticCheckerInfoRec *> SortedCheckers;$/;"	t	file:
St	Checkers/UndefBranchChecker.cpp	/^    const GRState* St;$/;"	m	struct:__anon78::UndefBranchChecker::FindUndefExpr	file:
Stack	Core/CoreEngine.cpp	/^    llvm::SmallVector<WorkListUnit,20> Stack;$/;"	m	class:__anon28::BFSBlockDFSContents	file:
Stack	Core/CoreEngine.cpp	/^  llvm::SmallVector<WorkListUnit,20> Stack;$/;"	m	class:__anon27::DFS	file:
StackAddrEscapeChecker	Checkers/StackAddrEscapeChecker.cpp	/^class StackAddrEscapeChecker : public Checker< check::PreStmt<ReturnStmt>,$/;"	c	namespace:__anon132	file:
Standard	Checkers/DeadStoresChecker.cpp	/^  enum DeadStoreKind { Standard, Enclosing, DeadIncrement, DeadInit };$/;"	e	enum:__anon75::DeadStoreObs::DeadStoreKind	file:
StaticCheckerInfo	Checkers/ClangSACheckerProvider.cpp	/^static const StaticCheckerInfoRec StaticCheckerInfo[] = {$/;"	v	file:
StaticCheckerInfoRec	Checkers/ClangSACheckerProvider.cpp	/^struct StaticCheckerInfoRec {$/;"	s	namespace:__anon130	file:
StaticGroupInfo	Checkers/ClangSACheckerProvider.cpp	/^static const StaticGroupInfoRec StaticGroupInfo[] = {$/;"	v	file:
StaticGroupInfoRec	Checkers/ClangSACheckerProvider.cpp	/^struct StaticGroupInfoRec {$/;"	s	namespace:__anon130	file:
StaticPackageInfo	Checkers/ClangSACheckerProvider.cpp	/^static const StaticPackageInfoRec StaticPackageInfo[] = {$/;"	v	file:
StaticPackageInfoRec	Checkers/ClangSACheckerProvider.cpp	/^struct StaticPackageInfoRec {$/;"	s	namespace:__anon130	file:
StmtNodeBuilder	Core/CoreEngine.cpp	/^StmtNodeBuilder::StmtNodeBuilder(const CFGBlock* b, unsigned idx,$/;"	f	class:StmtNodeBuilder
StopSummary	Core/CFRefCount.cpp	/^  RetainSummary* StopSummary;$/;"	m	class:__anon14::RetainSummaryManager	file:
StopTracking	Core/CFRefCount.cpp	/^                 NewAutoreleasePool, SelfOwn, StopTracking };$/;"	e	enum:ArgEffect	file:
StopTrackingCallback	Core/CFRefCount.cpp	/^  StopTrackingCallback(const GRState *st) : state(st) {}$/;"	f	class:__anon20::StopTrackingCallback
StopTrackingCallback	Core/CFRefCount.cpp	/^class StopTrackingCallback : public SymbolVisitor {$/;"	c	namespace:__anon20	file:
StoreManager	Core/Store.cpp	/^StoreManager::StoreManager(GRStateManager &stateMgr)$/;"	f	class:StoreManager
StoreSite	Core/BugReporterVisitors.cpp	/^  const ExplodedNode *StoreSite;$/;"	m	class:__anon51::FindLastStoreBRVisitor	file:
StreamChecker	Checkers/StreamChecker.cpp	/^  StreamChecker() $/;"	f	class:__anon113::StreamChecker
StreamChecker	Checkers/StreamChecker.cpp	/^class StreamChecker : public Checker<eval::Call,$/;"	c	namespace:__anon113	file:
StreamState	Checkers/StreamChecker.cpp	/^  StreamState(Kind k, const Stmt *s) : K(k), S(s) {}$/;"	f	struct:__anon113::StreamState
StreamState	Checkers/StreamChecker.cpp	/^struct StreamState {$/;"	s	namespace:__anon113	file:
StringRefCheckerVisitor	Checkers/LLVMConventionsChecker.cpp	/^  StringRefCheckerVisitor(BugReporter &br) : BR(br) {}$/;"	f	class:__anon68::StringRefCheckerVisitor
StringRefCheckerVisitor	Checkers/LLVMConventionsChecker.cpp	/^class StringRefCheckerVisitor : public StmtVisitor<StringRefCheckerVisitor> {$/;"	c	namespace:__anon68	file:
StripCasts	Core/MemRegion.cpp	/^const MemRegion *MemRegion::StripCasts() const {$/;"	f	class:MemRegion
StripTrailingDots	Core/PathDiagnostic.cpp	/^static llvm::StringRef StripTrailingDots(llvm::StringRef s) {$/;"	f	file:
SubCheck	Checkers/MacOSXAPIChecker.cpp	/^    SubCheck() : SC(NULL), BT(NULL) {}$/;"	f	class:__anon127::SubCheck
SubCheck	Checkers/MacOSXAPIChecker.cpp	/^    SubCheck(SubChecker sc, BugType *& bt) : SC(sc), BT(&bt) {}$/;"	f	class:__anon127::SubCheck
SubCheck	Checkers/MacOSXAPIChecker.cpp	/^  class SubCheck {$/;"	c	namespace:__anon127	file:
SubCheck	Checkers/UnixAPIChecker.cpp	/^    SubCheck() : SC(NULL), UC(NULL), BT(NULL) {}$/;"	f	class:__anon137::SubCheck
SubCheck	Checkers/UnixAPIChecker.cpp	/^    SubCheck(SubChecker sc, const UnixAPIChecker *uc, BugType *& bt)$/;"	f	class:__anon137::SubCheck
SubCheck	Checkers/UnixAPIChecker.cpp	/^  class SubCheck {$/;"	c	namespace:__anon137	file:
SubChecker	Checkers/MacOSXAPIChecker.cpp	/^typedef void (*SubChecker)(CheckerContext &C, const CallExpr *CE, BugType *&BT,$/;"	t	file:
SubChecker	Checkers/UnixAPIChecker.cpp	/^typedef void (*SubChecker)(CheckerContext &C, const UnixAPIChecker &UC,$/;"	t	file:
SubChecks	Checkers/MacOSXAPIChecker.cpp	/^  enum SubChecks {$/;"	g	class:__anon126::MacOSXAPIChecker	file:
SubChecks	Checkers/UnixAPIChecker.cpp	/^  enum SubChecks {$/;"	g	class:__anon136::UnixAPIChecker	file:
SubGroups	Checkers/ClangSACheckerProvider.cpp	/^  const short *SubGroups;$/;"	m	struct:__anon131::CheckNameOption	file:
SubPD	Core/PlistDiagnostics.cpp	/^    llvm::OwningPtr<PathDiagnosticClient> SubPD;$/;"	m	class:__anon7::PlistDiagnostics	file:
Summaries	Core/CFRefCount.cpp	/^  RetainSummaryManager Summaries;$/;"	m	class:__anon17::CFRefCount	file:
SummarizeRegion	Checkers/CStringChecker.cpp	/^bool CStringChecker::SummarizeRegion(llvm::raw_ostream& os, ASTContext& Ctx,$/;"	f	class:CStringChecker
SummarizeRegion	Checkers/MallocChecker.cpp	/^bool MallocChecker::SummarizeRegion(llvm::raw_ostream& os,$/;"	f	class:MallocChecker
SummarizeValue	Checkers/MallocChecker.cpp	/^bool MallocChecker::SummarizeValue(llvm::raw_ostream& os, SVal V) {$/;"	f	class:MallocChecker
SummaryLog	Core/CFRefCount.cpp	/^  SummaryLogTy SummaryLog;$/;"	m	class:__anon17::CFRefCount	file:
SummaryLogTy	Core/CFRefCount.cpp	/^    SummaryLogTy;$/;"	t	class:__anon17::CFRefCount	file:
SupportsFields	Core/RegionStore.cpp	/^  bool SupportsFields;$/;"	m	class:__anon31::RegionStoreFeatures	file:
Sym	Core/BugReporter.cpp	/^  SymbolRef Sym;$/;"	m	class:__anon41::NotableSymbolHandler	file:
Sym	Core/CFRefCount.cpp	/^    SymbolRef Sym;$/;"	m	class:__anon18::CFRefReport	file:
Sym	Core/CFRefCount.cpp	/^    SymbolRef Sym;$/;"	m	class:__anon19::FindUniqueBinding	file:
SymReaper	Core/Environment.cpp	/^  SymbolReaper &SymReaper;$/;"	m	class:__anon1::MarkLiveCallback	file:
SymReaper	Core/RegionStore.cpp	/^  SymbolReaper &SymReaper;$/;"	m	class:__anon35::removeDeadBindingsWorker	file:
T	Core/CFRefCount.cpp	/^  QualType T;$/;"	m	class:__anon10::RefVal	file:
TABLEGEN_INC_FILES_COMMON	Checkers/Makefile	/^TABLEGEN_INC_FILES_COMMON = 1$/;"	m
TF	Core/CFRefCount.cpp	/^    CFRefCount& TF;$/;"	m	class:__anon18::CFRefBug	file:
TF	Core/CFRefCount.cpp	/^    const CFRefCount &TF;$/;"	m	class:__anon18::CFRefReport	file:
TagInt	Core/ExprEngine.cpp	/^    static int TagInt;$/;"	m	struct:__anon24::ReturnExpr	file:
TagInt	Core/ExprEngine.cpp	/^  int ReturnExpr::TagInt; $/;"	m	class:__anon24::ReturnExpr	file:
TextPathDiagnostics	Core/TextPathDiagnostics.cpp	/^  TextPathDiagnostics(const std::string& output, Diagnostic &diag)$/;"	f	class:__anon22::TextPathDiagnostics
TextPathDiagnostics	Core/TextPathDiagnostics.cpp	/^class TextPathDiagnostics : public PathDiagnosticClient {$/;"	c	namespace:__anon22	file:
Tmpfile	Checkers/StreamChecker.cpp	/^void StreamChecker::Tmpfile(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:StreamChecker
To	Core/RangeConstraintManager.cpp	/^  const llvm::APSInt &To() const {$/;"	f	class:__anon38::Range
TrackConstraintBRVisitor	Core/BugReporterVisitors.cpp	/^  TrackConstraintBRVisitor(DefinedSVal constraint, bool assumption)$/;"	f	class:__anon51::TrackConstraintBRVisitor
TrackConstraintBRVisitor	Core/BugReporterVisitors.cpp	/^class TrackConstraintBRVisitor : public BugReporterVisitor {$/;"	c	namespace:__anon51	file:
Trim	Core/ExplodedGraph.cpp	/^ExplodedGraph::Trim(const NodeTy* const* NBeg, const NodeTy* const* NEnd,$/;"	f	class:ExplodedGraph
TrimInternal	Core/ExplodedGraph.cpp	/^ExplodedGraph::TrimInternal(const ExplodedNode* const* BeginSources,$/;"	f	class:ExplodedGraph
UC	Checkers/UnixAPIChecker.cpp	/^    const UnixAPIChecker *UC;$/;"	m	class:__anon137::SubCheck	file:
UbigraphViz	Frontend/AnalysisConsumer.cpp	/^UbigraphViz::UbigraphViz(llvm::raw_ostream* out, llvm::sys::Path& dir,$/;"	f	class:UbigraphViz
UbigraphViz	Frontend/AnalysisConsumer.cpp	/^class UbigraphViz : public ExplodedNode::Auditor {$/;"	c	namespace:__anon58	file:
UnaryFuncKind	Core/CFRefCount.cpp	/^  enum UnaryFuncKind { cfretain, cfrelease, cfmakecollectable };$/;"	g	class:__anon14::RetainSummaryManager	file:
UndefBranchChecker	Checkers/UndefBranchChecker.cpp	/^class UndefBranchChecker : public Checker<check::BranchCondition> {$/;"	c	namespace:__anon78	file:
UndefCapturedBlockVarChecker	Checkers/UndefCapturedBlockVarChecker.cpp	/^class UndefCapturedBlockVarChecker$/;"	c	namespace:__anon112	file:
UndefResultChecker	Checkers/UndefResultChecker.cpp	/^class UndefResultChecker $/;"	c	namespace:__anon135	file:
Undefined	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	e	enum:__anon100::RefState::Kind	file:
UndefinedArraySubscriptChecker	Checkers/UndefinedArraySubscriptChecker.cpp	/^class UndefinedArraySubscriptChecker$/;"	c	namespace:__anon128	file:
UndefinedAssignmentChecker	Checkers/UndefinedAssignmentChecker.cpp	/^class UndefinedAssignmentChecker$/;"	c	namespace:__anon73	file:
UnixAPIChecker	Checkers/UnixAPIChecker.cpp	/^  UnixAPIChecker() { memset(BTypes, 0, sizeof(*BTypes) * NumChecks); }$/;"	f	class:__anon136::UnixAPIChecker
UnixAPIChecker	Checkers/UnixAPIChecker.cpp	/^class UnixAPIChecker : public Checker< check::PreStmt<CallExpr> > {$/;"	c	namespace:__anon136	file:
Unknown	Checkers/IteratorsChecker.cpp	/^  enum Kind { BeginValid, EndValid, Invalid, Undefined, Unknown } K;$/;"	e	enum:__anon100::RefState::Kind	file:
UnreachableCodeChecker	Checkers/UnreachableCodeChecker.cpp	/^class UnreachableCodeChecker : public Checker<check::EndAnalysis> {$/;"	c	namespace:__anon93	file:
Unused	Checkers/ObjCUnusedIVarsChecker.cpp	/^enum IVarState { Unused, Used };$/;"	e	enum:IVarState	file:
Update	Core/CFRefCount.cpp	/^const GRState * CFRefCount::Update(const GRState * state, SymbolRef sym,$/;"	f	class:CFRefCount
UpdateAssumption	Checkers/IdempotentOperationChecker.cpp	/^inline void IdempotentOperationChecker::UpdateAssumption(Assumption &A,$/;"	f	class:IdempotentOperationChecker
UpdatePostponed	Core/RegionStore.cpp	/^bool removeDeadBindingsWorker::UpdatePostponed() {$/;"	f	class:removeDeadBindingsWorker
UseAfterRelease	Core/CFRefCount.cpp	/^    UseAfterRelease(CFRefCount* tf)$/;"	f	class:__anon18::UseAfterRelease
UseAfterRelease	Core/CFRefCount.cpp	/^  class UseAfterRelease : public CFRefBug {$/;"	c	namespace:__anon18	file:
Used	Checkers/ObjCUnusedIVarsChecker.cpp	/^enum IVarState { Unused, Used };$/;"	e	enum:IVarState	file:
V	Core/BugReporterVisitors.cpp	/^  SVal V;$/;"	m	class:__anon51::FindLastStoreBRVisitor	file:
VBFactory	Core/BasicStore.cpp	/^  BindingsTy::Factory VBFactory;$/;"	m	class:__anon55::BasicStoreManager	file:
VLASizeChecker	Checkers/VLASizeChecker.cpp	/^class VLASizeChecker : public Checker< check::PreStmt<DeclStmt> > {$/;"	c	namespace:__anon139	file:
VM	Checkers/UndefBranchChecker.cpp	/^    GRStateManager& VM;$/;"	m	struct:__anon78::UndefBranchChecker::FindUndefExpr	file:
VMap	Frontend/AnalysisConsumer.cpp	/^  typedef llvm::DenseMap<void*,unsigned> VMap;$/;"	t	class:__anon58::UbigraphViz	file:
VMgr	Core/BugReporter.cpp	/^  GRStateManager& VMgr;$/;"	m	class:__anon41::NotableSymbolHandler	file:
VR	Checkers/IteratorsChecker.cpp	/^  const void *VR;$/;"	m	class:__anon100::RefState	file:
Val	Checkers/BasicObjCFoundationChecks.cpp	/^    T Val;$/;"	m	class:__anon107::Optional	file:
Val	Core/CheckerManager.cpp	/^    SVal Val;$/;"	m	struct:__anon49::CheckBindContext	file:
Val_O_CREAT	Checkers/UnixAPIChecker.cpp	/^  mutable Optional<uint64_t> Val_O_CREAT;$/;"	m	class:__anon136::UnixAPIChecker	file:
Vals	Core/ExprEngine.cpp	/^  llvm::ImmutableList<SVal> Vals;$/;"	m	class:__anon26::InitListWLItem	file:
VariadicMethodTypeChecker	Checkers/BasicObjCFoundationChecks.cpp	/^class VariadicMethodTypeChecker : public Checker<check::PreObjCMessage> {$/;"	c	namespace:__anon110	file:
VectorIteratorKind	Checkers/IteratorsChecker.cpp	/^enum RefKind { NoKind, VectorKind, VectorIteratorKind };$/;"	e	enum:__anon100::RefKind	file:
VectorKind	Checkers/IteratorsChecker.cpp	/^enum RefKind { NoKind, VectorKind, VectorIteratorKind };$/;"	e	enum:__anon100::RefKind	file:
ViewGraph	Core/ExprEngine.cpp	/^void ExprEngine::ViewGraph(ExplodedNode** Beg, ExplodedNode** End) {$/;"	f	class:ExprEngine
ViewGraph	Core/ExprEngine.cpp	/^void ExprEngine::ViewGraph(bool trim) {$/;"	f	class:ExprEngine
Visit	Checkers/LLVMConventionsChecker.cpp	/^void ASTFieldVisitor::Visit(FieldDecl *D) {$/;"	f	class:ASTFieldVisitor
Visit	Core/ExprEngine.cpp	/^void ExprEngine::Visit(const Stmt* S, ExplodedNode* Pred, $/;"	f	class:ExprEngine
Visit	Core/GRState.cpp	/^  bool Visit(const MemRegion* Parent, const MemRegion* SubRegion) {$/;"	f	class:__anon53::ScanReachableSymbols
VisitAddedToCluster	Core/RegionStore.cpp	/^  void VisitAddedToCluster(const MemRegion *baseR, RegionCluster &C) {}$/;"	f	class:__anon33::ClusterAnalysis
VisitAddedToCluster	Core/RegionStore.cpp	/^void removeDeadBindingsWorker::VisitAddedToCluster(const MemRegion *baseR,$/;"	f	class:removeDeadBindingsWorker
VisitAggExpr	Core/AggExprVisitor.cpp	/^void ExprEngine::VisitAggExpr(const Expr *E, const MemRegion *Dest, $/;"	f	class:ExprEngine
VisitAsmStmt	Core/ExprEngine.cpp	/^void ExprEngine::VisitAsmStmt(const AsmStmt* A, ExplodedNode* Pred,$/;"	f	class:ExprEngine
VisitAsmStmtHelperInputs	Core/ExprEngine.cpp	/^void ExprEngine::VisitAsmStmtHelperInputs(const AsmStmt* A,$/;"	f	class:ExprEngine
VisitAsmStmtHelperOutputs	Core/ExprEngine.cpp	/^void ExprEngine::VisitAsmStmtHelperOutputs(const AsmStmt* A,$/;"	f	class:ExprEngine
VisitBaseRegion	Core/RegionStore.cpp	/^  void VisitBaseRegion(const MemRegion *baseR) {}$/;"	f	class:__anon33::ClusterAnalysis
VisitBaseRegion	Core/RegionStore.cpp	/^void invalidateRegionsWorker::VisitBaseRegion(const MemRegion *baseR) {$/;"	f	class:invalidateRegionsWorker
VisitBinaryOperator	Core/ExprEngine.cpp	/^void ExprEngine::VisitBinaryOperator(const BinaryOperator* B,$/;"	f	class:ExprEngine
VisitBinding	Core/RegionStore.cpp	/^void invalidateRegionsWorker::VisitBinding(SVal V) {$/;"	f	class:invalidateRegionsWorker
VisitBinding	Core/RegionStore.cpp	/^void removeDeadBindingsWorker::VisitBinding(SVal V) {$/;"	f	class:removeDeadBindingsWorker
VisitBindingKey	Core/RegionStore.cpp	/^void removeDeadBindingsWorker::VisitBindingKey(BindingKey K) {$/;"	f	class:removeDeadBindingsWorker
VisitBlockExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitBlockExpr(const BlockExpr *BE, ExplodedNode *Pred,$/;"	f	class:ExprEngine
VisitCXXConstructExpr	Core/AggExprVisitor.cpp	/^void AggExprVisitor::VisitCXXConstructExpr(CXXConstructExpr *E) {$/;"	f	class:AggExprVisitor
VisitCXXConstructExpr	Core/CXXExprEngine.cpp	/^void ExprEngine::VisitCXXConstructExpr(const CXXConstructExpr *E, $/;"	f	class:ExprEngine
VisitCXXDeleteExpr	Core/CXXExprEngine.cpp	/^void ExprEngine::VisitCXXDeleteExpr(const CXXDeleteExpr *CDE, $/;"	f	class:ExprEngine
VisitCXXDestructor	Core/CXXExprEngine.cpp	/^void ExprEngine::VisitCXXDestructor(const CXXDestructorDecl *DD,$/;"	f	class:ExprEngine
VisitCXXMemberCallExpr	Core/AggExprVisitor.cpp	/^void AggExprVisitor::VisitCXXMemberCallExpr(CXXMemberCallExpr *E) {$/;"	f	class:AggExprVisitor
VisitCXXNewExpr	Core/CXXExprEngine.cpp	/^void ExprEngine::VisitCXXNewExpr(const CXXNewExpr *CNE, ExplodedNode *Pred,$/;"	f	class:ExprEngine
VisitCXXThisExpr	Core/CXXExprEngine.cpp	/^void ExprEngine::VisitCXXThisExpr(const CXXThisExpr *TE, ExplodedNode *Pred,$/;"	f	class:ExprEngine
VisitCallExpr	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::VisitCallExpr(CallExpr *CE) {$/;"	f	class:WalkAST
VisitCallExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitCallExpr(const CallExpr* CE, ExplodedNode* Pred,$/;"	f	class:ExprEngine
VisitCast	Core/ExprEngine.cpp	/^void ExprEngine::VisitCast(const CastExpr *CastE, const Expr *Ex, $/;"	f	class:ExprEngine
VisitCastExpr	Core/AggExprVisitor.cpp	/^void AggExprVisitor::VisitCastExpr(CastExpr *E) {$/;"	f	class:AggExprVisitor
VisitChildren	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::VisitChildren(Stmt *S) {$/;"	f	class:WalkAST
VisitChildren	Checkers/CheckSizeofPointer.cpp	/^void WalkAST::VisitChildren(Stmt *S) {$/;"	f	class:WalkAST
VisitChildren	Checkers/LLVMConventionsChecker.cpp	/^  void VisitChildren(Stmt *S) {$/;"	f	class:__anon68::StringRefCheckerVisitor
VisitCluster	Core/RegionStore.cpp	/^  void VisitCluster(const MemRegion *baseR, BindingKey *I, BindingKey *E) {}$/;"	f	class:__anon33::ClusterAnalysis
VisitCluster	Core/RegionStore.cpp	/^void invalidateRegionsWorker::VisitCluster(const MemRegion *baseR,$/;"	f	class:invalidateRegionsWorker
VisitCluster	Core/RegionStore.cpp	/^void removeDeadBindingsWorker::VisitCluster(const MemRegion *baseR,$/;"	f	class:removeDeadBindingsWorker
VisitCommonDeclRefExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitCommonDeclRefExpr(const Expr *Ex, const NamedDecl *D,$/;"	f	class:ExprEngine
VisitCompoundLiteralExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitCompoundLiteralExpr(const CompoundLiteralExpr* CL,$/;"	f	class:ExprEngine
VisitCompoundStmt	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::VisitCompoundStmt(CompoundStmt *S) {$/;"	f	class:WalkAST
VisitCondInit	Core/ExprEngine.cpp	/^void ExprEngine::VisitCondInit(const VarDecl *VD, const Stmt *S,$/;"	f	class:ExprEngine
VisitDeclStmt	Checkers/LLVMConventionsChecker.cpp	/^void StringRefCheckerVisitor::VisitDeclStmt(DeclStmt *S) {$/;"	f	class:StringRefCheckerVisitor
VisitDeclStmt	Core/ExprEngine.cpp	/^void ExprEngine::VisitDeclStmt(const DeclStmt *DS, ExplodedNode *Pred,$/;"	f	class:ExprEngine
VisitForStmt	Checkers/CheckSecuritySyntaxOnly.cpp	/^void WalkAST::VisitForStmt(ForStmt *FS) {$/;"	f	class:WalkAST
VisitGuardedExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitGuardedExpr(const Expr* Ex, const Expr* L, $/;"	f	class:ExprEngine
VisitInitListExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitInitListExpr(const InitListExpr* E, ExplodedNode* Pred,$/;"	f	class:ExprEngine
VisitLogicalExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitLogicalExpr(const BinaryOperator* B, ExplodedNode* Pred,$/;"	f	class:ExprEngine
VisitLvalArraySubscriptExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitLvalArraySubscriptExpr(const ArraySubscriptExpr* A,$/;"	f	class:ExprEngine
VisitLvalObjCIvarRefExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitLvalObjCIvarRefExpr(const ObjCIvarRefExpr* Ex, $/;"	f	class:ExprEngine
VisitMemberExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitMemberExpr(const MemberExpr* M, ExplodedNode* Pred,$/;"	f	class:ExprEngine
VisitNode	Core/BugReporter.cpp	/^PathDiagnosticPiece* BugReport::VisitNode(const ExplodedNode* N,$/;"	f	class:BugReport
VisitNode	Core/BugReporterVisitors.cpp	/^  PathDiagnosticPiece* VisitNode(const ExplodedNode *N,$/;"	f	class:__anon51::FindLastStoreBRVisitor
VisitNode	Core/BugReporterVisitors.cpp	/^  PathDiagnosticPiece* VisitNode(const ExplodedNode *N,$/;"	f	class:__anon51::TrackConstraintBRVisitor
VisitNode	Core/BugReporterVisitors.cpp	/^  PathDiagnosticPiece* VisitNode(const ExplodedNode *N,$/;"	f	class:__anon52::NilReceiverVisitor
VisitNode	Core/CFRefCount.cpp	/^PathDiagnosticPiece* CFRefReport::VisitNode(const ExplodedNode* N,$/;"	f	class:CFRefReport
VisitObjCAtSynchronizedStmt	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCAtSynchronizedStmt(const ObjCAtSynchronizedStmt *S,$/;"	f	class:ExprEngine
VisitObjCForCollectionStmt	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCForCollectionStmt(const ObjCForCollectionStmt* S,$/;"	f	class:ExprEngine
VisitObjCForCollectionStmtAux	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCForCollectionStmtAux(const ObjCForCollectionStmt* S,$/;"	f	class:ExprEngine
VisitObjCMessage	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCMessage(const ObjCMessage &msg,$/;"	f	class:ExprEngine
VisitObjCMessageExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCMessageExpr(const ObjCMessageExpr* ME, $/;"	f	class:ExprEngine
VisitObjCPropertyRefExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitObjCPropertyRefExpr(const ObjCPropertyRefExpr *Ex,$/;"	f	class:ExprEngine
VisitOffsetOfExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitOffsetOfExpr(const OffsetOfExpr* OOE, $/;"	f	class:ExprEngine
VisitReturnStmt	Core/ExprEngine.cpp	/^void ExprEngine::VisitReturnStmt(const ReturnStmt *RS, ExplodedNode *Pred,$/;"	f	class:ExprEngine
VisitStmt	Checkers/CheckSecuritySyntaxOnly.cpp	/^  void VisitStmt(Stmt *S) { VisitChildren(S); }$/;"	f	class:__anon122::WalkAST
VisitStmt	Checkers/CheckSizeofPointer.cpp	/^  void VisitStmt(Stmt *S) { VisitChildren(S); }$/;"	f	class:__anon81::WalkAST
VisitStmt	Checkers/LLVMConventionsChecker.cpp	/^  void VisitStmt(Stmt *S) { VisitChildren(S); }$/;"	f	class:__anon68::StringRefCheckerVisitor
VisitSymbol	Core/CFRefCount.cpp	/^  bool VisitSymbol(SymbolRef sym) {$/;"	f	class:__anon20::StopTrackingCallback
VisitSymbol	Core/Environment.cpp	/^  bool VisitSymbol(SymbolRef sym) { SymReaper.markLive(sym); return true; }$/;"	f	class:__anon1::MarkLiveCallback
VisitUnaryExprOrTypeTraitExpr	Checkers/CheckSizeofPointer.cpp	/^void WalkAST::VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr *E) {$/;"	f	class:WalkAST
VisitUnaryExprOrTypeTraitExpr	Core/ExprEngine.cpp	/^void ExprEngine::VisitUnaryExprOrTypeTraitExpr($/;"	f	class:ExprEngine
VisitUnaryOperator	Checkers/DeadStoresChecker.cpp	/^  void VisitUnaryOperator(UnaryOperator* U) {$/;"	f	class:__anon76::FindEscaped
VisitUnaryOperator	Core/ExprEngine.cpp	/^void ExprEngine::VisitUnaryOperator(const UnaryOperator* U, $/;"	f	class:ExprEngine
VisitVarDecl	Checkers/LLVMConventionsChecker.cpp	/^void StringRefCheckerVisitor::VisitVarDecl(VarDecl *VD) {$/;"	f	class:StringRefCheckerVisitor
Visited	Core/RegionStore.cpp	/^  llvm::DenseMap<const RegionCluster*, unsigned> Visited;$/;"	m	class:__anon33::ClusterAnalysis	file:
VisitedRegionsTy	Core/GRState.cpp	/^  typedef llvm::DenseSet<const MemRegion*> VisitedRegionsTy;$/;"	t	class:__anon53::ScanReachableSymbols	file:
WL	Core/RegionStore.cpp	/^  WorkList WL;$/;"	m	class:__anon33::ClusterAnalysis	file:
WalkAST	Checkers/CheckSecuritySyntaxOnly.cpp	/^  WalkAST(BugReporter &br) : BR(br),$/;"	f	class:__anon122::WalkAST
WalkAST	Checkers/CheckSecuritySyntaxOnly.cpp	/^class WalkAST : public StmtVisitor<WalkAST> {$/;"	c	namespace:__anon122	file:
WalkAST	Checkers/CheckSizeofPointer.cpp	/^  WalkAST(BugReporter &br) : BR(br) {}$/;"	f	class:__anon81::WalkAST
WalkAST	Checkers/CheckSizeofPointer.cpp	/^class WalkAST : public StmtVisitor<WalkAST> {$/;"	c	namespace:__anon81	file:
WarnNilArg	Checkers/BasicObjCFoundationChecks.cpp	/^void NilArgChecker::WarnNilArg(CheckerContext &C,$/;"	f	class:NilArgChecker
WorkList	Core/RegionStore.cpp	/^    WorkList;$/;"	t	class:__anon33::ClusterAnalysis	file:
_registerForBind	Core/CheckerManager.cpp	/^void CheckerManager::_registerForBind(CheckBindFunc checkfn) {$/;"	f	class:CheckerManager
_registerForBody	Core/CheckerManager.cpp	/^void CheckerManager::_registerForBody(CheckDeclFunc checkfn) {$/;"	f	class:CheckerManager
_registerForBranchCondition	Core/CheckerManager.cpp	/^void CheckerManager::_registerForBranchCondition($/;"	f	class:CheckerManager
_registerForDeadSymbols	Core/CheckerManager.cpp	/^void CheckerManager::_registerForDeadSymbols(CheckDeadSymbolsFunc checkfn) {$/;"	f	class:CheckerManager
_registerForDecl	Core/CheckerManager.cpp	/^void CheckerManager::_registerForDecl(CheckDeclFunc checkfn,$/;"	f	class:CheckerManager
_registerForEndAnalysis	Core/CheckerManager.cpp	/^void CheckerManager::_registerForEndAnalysis(CheckEndAnalysisFunc checkfn) {$/;"	f	class:CheckerManager
_registerForEndPath	Core/CheckerManager.cpp	/^void CheckerManager::_registerForEndPath(CheckEndPathFunc checkfn) {$/;"	f	class:CheckerManager
_registerForEvalAssume	Core/CheckerManager.cpp	/^void CheckerManager::_registerForEvalAssume(EvalAssumeFunc checkfn) {$/;"	f	class:CheckerManager
_registerForEvalCall	Core/CheckerManager.cpp	/^void CheckerManager::_registerForEvalCall(EvalCallFunc checkfn) {$/;"	f	class:CheckerManager
_registerForLiveSymbols	Core/CheckerManager.cpp	/^void CheckerManager::_registerForLiveSymbols(CheckLiveSymbolsFunc checkfn) {$/;"	f	class:CheckerManager
_registerForLocation	Core/CheckerManager.cpp	/^void CheckerManager::_registerForLocation(CheckLocationFunc checkfn) {$/;"	f	class:CheckerManager
_registerForPostObjCMessage	Core/CheckerManager.cpp	/^void CheckerManager::_registerForPostObjCMessage(CheckObjCMessageFunc checkfn) {$/;"	f	class:CheckerManager
_registerForPostStmt	Core/CheckerManager.cpp	/^void CheckerManager::_registerForPostStmt(CheckStmtFunc checkfn,$/;"	f	class:CheckerManager
_registerForPreObjCMessage	Core/CheckerManager.cpp	/^void CheckerManager::_registerForPreObjCMessage(CheckObjCMessageFunc checkfn) {$/;"	f	class:CheckerManager
_registerForPreStmt	Core/CheckerManager.cpp	/^void CheckerManager::_registerForPreStmt(CheckStmtFunc checkfn,$/;"	f	class:CheckerManager
_registerForRegionChanges	Core/CheckerManager.cpp	/^void CheckerManager::_registerForRegionChanges(CheckRegionChangesFunc checkfn,$/;"	f	class:CheckerManager
add	Core/RegionStore.cpp	/^  bool add(const MemRegion* Parent, const MemRegion* SubRegion) {$/;"	f	class:__anon32::RegionStoreSubRegionMap
addArg	Core/CFRefCount.cpp	/^  void addArg(ArgEffects::Factory &af, unsigned idx, ArgEffect e) {$/;"	f	class:__anon11::RetainSummary
addBinding	Core/RegionStore.cpp	/^RegionBindings RegionStoreManager::addBinding(RegionBindings B, BindingKey K,$/;"	f	class:RegionStoreManager
addBinding	Core/RegionStore.cpp	/^RegionBindings RegionStoreManager::addBinding(RegionBindings B,$/;"	f	class:RegionStoreManager
addClassMethSummary	Core/CFRefCount.cpp	/^  void addClassMethSummary(const char* Cls, const char* nullaryName,$/;"	f	class:__anon14::RetainSummaryManager	file:
addClsMethSummary	Core/CFRefCount.cpp	/^  void addClsMethSummary(IdentifierInfo *II, RetainSummary* Summ, ...) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addClsMethSummary	Core/CFRefCount.cpp	/^  void addClsMethSummary(const char* Cls, RetainSummary* Summ, ...) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addContext	Core/BugReporter.cpp	/^void EdgeBuilder::addContext(const Stmt *S) {$/;"	f	class:EdgeBuilder
addEdge	Core/BugReporter.cpp	/^void EdgeBuilder::addEdge(PathDiagnosticLocation NewLoc, bool alwaysAdd) {$/;"	f	class:EdgeBuilder
addExtendedContext	Core/BugReporter.cpp	/^void EdgeBuilder::addExtendedContext(const Stmt *S) {$/;"	f	class:EdgeBuilder
addGDM	Core/GRState.cpp	/^const GRState* GRStateManager::addGDM(const GRState* St, void* Key, void* Data){$/;"	f	class:GRStateManager
addInstMethSummary	Core/CFRefCount.cpp	/^  void addInstMethSummary(const char* Cls, RetainSummary* Summ, ...) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addInstMethSummary	Core/CFRefCount.cpp	/^  void addInstMethSummary(const char* Cls, const char* nullaryName,$/;"	f	class:__anon14::RetainSummaryManager	file:
addMethodSummary	Core/CFRefCount.cpp	/^  void addMethodSummary(IdentifierInfo *ClsII, ObjCMethodSummariesTy& Summaries,$/;"	f	class:__anon14::RetainSummaryManager	file:
addNSObjectClsMethSummary	Core/CFRefCount.cpp	/^  void addNSObjectClsMethSummary(Selector S, RetainSummary *Summ) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addNSObjectMethSummary	Core/CFRefCount.cpp	/^  void addNSObjectMethSummary(Selector S, RetainSummary *Summ) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addNode	Core/ExplodedGraph.cpp	/^void ExplodedNode::NodeGroup::addNode(ExplodedNode* N, ExplodedGraph &G) {$/;"	f	class:ExplodedNode::NodeGroup
addPanicSummary	Core/CFRefCount.cpp	/^  void addPanicSummary(const char* Cls, ...) {$/;"	f	class:__anon14::RetainSummaryManager	file:
addPredecessor	Core/ExplodedGraph.cpp	/^void ExplodedNode::addPredecessor(ExplodedNode* V, ExplodedGraph &G) {$/;"	f	class:ExplodedNode
addSelfFlag	Checkers/ObjCSelfInitChecker.cpp	/^static void addSelfFlag(const GRState *state, SVal val,$/;"	f	file:
addValue	Checkers/ArrayBoundCheckerV2.cpp	/^static SVal addValue(const GRState *state, SVal x, SVal y,$/;"	f	file:
addVisitor	Core/BugReporter.cpp	/^void BugReporterContext::addVisitor(BugReporterVisitor* visitor) {$/;"	f	class:BugReporterContext
analysisContext	Checkers/IdempotentOperationChecker.cpp	/^    AnalysisContext *analysisContext;$/;"	m	struct:__anon65::IdempotentOperationChecker::BinaryOperatorData	file:
arrayWithObjectsS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector arrayWithObjectsS;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
asLocation	Core/PathDiagnostic.cpp	/^FullSourceLoc PathDiagnosticLocation::asLocation() const {$/;"	f	class:PathDiagnosticLocation
asRange	Core/PathDiagnostic.cpp	/^PathDiagnosticRange PathDiagnosticLocation::asRange() const {$/;"	f	class:PathDiagnosticLocation
assume	Core/SimpleConstraintManager.cpp	/^const GRState *SimpleConstraintManager::assume(const GRState *state, Loc cond,$/;"	f	class:clang::ento::SimpleConstraintManager
assume	Core/SimpleConstraintManager.cpp	/^const GRState *SimpleConstraintManager::assume(const GRState *state,$/;"	f	class:clang::ento::SimpleConstraintManager
assumeAux	Core/SimpleConstraintManager.cpp	/^const GRState *SimpleConstraintManager::assumeAux(const GRState *state,$/;"	f	class:clang::ento::SimpleConstraintManager
assumeInBound	Core/GRState.cpp	/^const GRState *GRState::assumeInBound(DefinedOrUnknownSVal Idx,$/;"	f	class:GRState
assumeSymEQ	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymEQ(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymEQ	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymEQ(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymGE	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymGE(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymGE	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymGE(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymGT	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymGT(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymGT	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymGT(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymLE	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymLE(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymLE	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymLE(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymLT	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymLT(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymLT	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymLT(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymNE	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::assumeSymNE(const GRState *state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
assumeSymNE	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::assumeSymNE(const GRState* state, SymbolRef sym,$/;"	f	class:RangeConstraintManager
assumeSymRel	Core/SimpleConstraintManager.cpp	/^const GRState *SimpleConstraintManager::assumeSymRel(const GRState *state,$/;"	f	class:clang::ento::SimpleConstraintManager
assumeZero	Checkers/CStringChecker.cpp	/^CStringChecker::assumeZero(CheckerContext &C, const GRState *state, SVal V,$/;"	f	class:CStringChecker
assumption	Checkers/IdempotentOperationChecker.cpp	/^    Assumption assumption;$/;"	m	struct:__anon65::IdempotentOperationChecker::BinaryOperatorData	file:
autorelease	Core/CFRefCount.cpp	/^  RefVal autorelease() const {$/;"	f	class:__anon10::RefVal
autoreleaseS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector autoreleaseS;$/;"	m	class:__anon109::ClassReleaseChecker	file:
baseRegion	Checkers/ArrayBoundCheckerV2.cpp	/^  const SubRegion *baseRegion;$/;"	m	class:__anon67::RegionRawOffsetV2	file:
begin	Core/ExplodedGraph.cpp	/^ExplodedNode **ExplodedNode::NodeGroup::begin() const {$/;"	f	class:ExplodedNode::NodeGroup
begin	Core/RangeConstraintManager.cpp	/^  iterator begin() const { return ranges.begin(); }$/;"	f	class:__anon38::RangeSet
begin	Core/SVals.cpp	/^nonloc::CompoundVal::iterator nonloc::CompoundVal::begin() const {$/;"	f	class:nonloc::CompoundVal
bindCompoundLiteral	Core/GRState.cpp	/^const GRState *GRState::bindCompoundLiteral(const CompoundLiteralExpr* CL,$/;"	f	class:GRState
bindDecl	Core/GRState.cpp	/^const GRState *GRState::bindDecl(const VarRegion* VR, SVal IVal) const {$/;"	f	class:GRState
bindDeclWithNoInit	Core/GRState.cpp	/^const GRState *GRState::bindDeclWithNoInit(const VarRegion* VR) const {$/;"	f	class:GRState
bindDefault	Core/GRState.cpp	/^const GRState *GRState::bindDefault(SVal loc, SVal V) const {$/;"	f	class:GRState
bindExpr	Core/Environment.cpp	/^Environment EnvironmentManager::bindExpr(Environment Env, const Stmt *S,$/;"	f	class:EnvironmentManager
bindExprAndLocation	Core/Environment.cpp	/^Environment EnvironmentManager::bindExprAndLocation(Environment Env,$/;"	f	class:EnvironmentManager
bindExprAndLocation	Core/GRState.cpp	/^const GRState *GRState::bindExprAndLocation(const Stmt *S, SVal location,$/;"	f	class:GRState
bindLoc	Core/GRState.cpp	/^const GRState *GRState::bindLoc(Loc LV, SVal V) const {$/;"	f	class:GRState
byteOffset	Checkers/ArrayBoundCheckerV2.cpp	/^  SVal byteOffset;$/;"	m	class:__anon67::RegionRawOffsetV2	file:
canReasonAbout	Core/SimpleConstraintManager.cpp	/^bool SimpleConstraintManager::canReasonAbout(SVal X) const {$/;"	f	class:clang::ento::SimpleConstraintManager
canSymbolicate	Core/SymbolManager.cpp	/^bool SymbolManager::canSymbolicate(QualType T) {$/;"	f	class:SymbolManager
castRegion	Core/Store.cpp	/^const MemRegion *StoreManager::castRegion(const MemRegion *R, QualType CastToTy) {$/;"	f	class:StoreManager
cfg	Checkers/DeadStoresChecker.cpp	/^  CFG *cfg;$/;"	m	class:__anon76::FindEscaped	file:
cfg	Checkers/DeadStoresChecker.cpp	/^  const CFG &cfg;$/;"	m	class:__anon74::ReachableCode	file:
cfg	Checkers/DeadStoresChecker.cpp	/^  const CFG &cfg;$/;"	m	class:__anon75::DeadStoreObs	file:
cfmakecollectable	Core/CFRefCount.cpp	/^  enum UnaryFuncKind { cfretain, cfrelease, cfmakecollectable };$/;"	e	enum:__anon14::RetainSummaryManager::UnaryFuncKind	file:
cfrelease	Core/CFRefCount.cpp	/^  enum UnaryFuncKind { cfretain, cfrelease, cfmakecollectable };$/;"	e	enum:__anon14::RetainSummaryManager::UnaryFuncKind	file:
cfretain	Core/CFRefCount.cpp	/^  enum UnaryFuncKind { cfretain, cfrelease, cfmakecollectable };$/;"	e	enum:__anon14::RetainSummaryManager::UnaryFuncKind	file:
checkASTCodeBody	Checkers/CheckSecuritySyntaxOnly.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon125::SecuritySyntaxChecker
checkASTCodeBody	Checkers/CheckSizeofPointer.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon82::SizeofPointerChecker
checkASTCodeBody	Checkers/DeadStoresChecker.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon77::DeadStoresChecker
checkASTCodeBody	Checkers/DebugCheckers.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon62::LiveVariablesDumper
checkASTCodeBody	Checkers/DebugCheckers.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon63::CFGViewer
checkASTCodeBody	Checkers/DebugCheckers.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon64::CFGDumper
checkASTCodeBody	Checkers/LLVMConventionsChecker.cpp	/^  void checkASTCodeBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:__anon70::LLVMConventionsChecker
checkASTDecl	Checkers/CheckObjCDealloc.cpp	/^  void checkASTDecl(const ObjCImplementationDecl *D, AnalysisManager& mgr,$/;"	f	class:__anon99::ObjCDeallocChecker
checkASTDecl	Checkers/CheckObjCInstMethSignature.cpp	/^  void checkASTDecl(const ObjCImplementationDecl *D, AnalysisManager& mgr,$/;"	f	class:__anon95::ObjCMethSigsChecker
checkASTDecl	Checkers/LLVMConventionsChecker.cpp	/^  void checkASTDecl(const CXXRecordDecl *R, AnalysisManager& mgr,$/;"	f	class:__anon70::LLVMConventionsChecker
checkASTDecl	Checkers/NSErrorChecker.cpp	/^void CFErrorFunctionChecker::checkASTDecl(const FunctionDecl *D,$/;"	f	class:CFErrorFunctionChecker
checkASTDecl	Checkers/NSErrorChecker.cpp	/^void NSErrorMethodChecker::checkASTDecl(const ObjCMethodDecl *D,$/;"	f	class:NSErrorMethodChecker
checkASTDecl	Checkers/ObjCUnusedIVarsChecker.cpp	/^  void checkASTDecl(const ObjCImplementationDecl *D, AnalysisManager& mgr,$/;"	f	class:__anon94::ObjCUnusedIvarsChecker
checkArgs	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkArgs(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:IteratorsChecker
checkBind	Checkers/MallocChecker.cpp	/^void MallocChecker::checkBind(SVal location, SVal val,CheckerContext &C) const {$/;"	f	class:MallocChecker
checkBind	Checkers/UndefinedAssignmentChecker.cpp	/^void UndefinedAssignmentChecker::checkBind(SVal location, SVal val,$/;"	f	class:UndefinedAssignmentChecker
checkBranchCondition	Checkers/UndefBranchChecker.cpp	/^void UndefBranchChecker::checkBranchCondition(const Stmt *Condition,$/;"	f	class:UndefBranchChecker
checkDeadSymbols	Checkers/CStringChecker.cpp	/^void CStringChecker::checkDeadSymbols(SymbolReaper &SR,$/;"	f	class:CStringChecker
checkDeadSymbols	Checkers/MallocChecker.cpp	/^void MallocChecker::checkDeadSymbols(SymbolReaper &SymReaper,$/;"	f	class:MallocChecker
checkDeadSymbols	Checkers/StreamChecker.cpp	/^void StreamChecker::checkDeadSymbols(SymbolReaper &SymReaper,$/;"	f	class:StreamChecker
checkEndAnalysis	Checkers/AnalyzerStatsChecker.cpp	/^void AnalyzerStatsChecker::checkEndAnalysis(ExplodedGraph &G,$/;"	f	class:AnalyzerStatsChecker
checkEndAnalysis	Checkers/IdempotentOperationChecker.cpp	/^void IdempotentOperationChecker::checkEndAnalysis(ExplodedGraph &G,$/;"	f	class:IdempotentOperationChecker
checkEndAnalysis	Checkers/UnreachableCodeChecker.cpp	/^void UnreachableCodeChecker::checkEndAnalysis(ExplodedGraph &G,$/;"	f	class:UnreachableCodeChecker
checkEndPath	Checkers/MallocChecker.cpp	/^void MallocChecker::checkEndPath(EndOfFunctionNodeBuilder &B,$/;"	f	class:MallocChecker
checkEndPath	Checkers/StackAddrEscapeChecker.cpp	/^void StackAddrEscapeChecker::checkEndPath(EndOfFunctionNodeBuilder &B,$/;"	f	class:StackAddrEscapeChecker
checkEndPath	Checkers/StreamChecker.cpp	/^void StreamChecker::checkEndPath(EndOfFunctionNodeBuilder &B,$/;"	f	class:StreamChecker
checkEvent	Checkers/NSErrorChecker.cpp	/^void NSOrCFErrorDerefChecker::checkEvent(ImplicitNullDerefEvent event) const {$/;"	f	class:NSOrCFErrorDerefChecker
checkExpr	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkExpr(CheckerContext &C, const Expr *E) const {$/;"	f	class:IteratorsChecker
checkForInvalidSelf	Checkers/ObjCSelfInitChecker.cpp	/^static void checkForInvalidSelf(const Expr *E, CheckerContext &C,$/;"	f	file:
checkLiveSymbols	Checkers/CStringChecker.cpp	/^void CStringChecker::checkLiveSymbols(const GRState *state,$/;"	f	class:CStringChecker
checkLocation	Checkers/ArrayBoundChecker.cpp	/^void ArrayBoundChecker::checkLocation(SVal l, bool isLoad,$/;"	f	class:ArrayBoundChecker
checkLocation	Checkers/ArrayBoundCheckerV2.cpp	/^void ArrayBoundCheckerV2::checkLocation(SVal location, bool isLoad,$/;"	f	class:ArrayBoundCheckerV2
checkLocation	Checkers/DereferenceChecker.cpp	/^void DereferenceChecker::checkLocation(SVal l, bool isLoad,$/;"	f	class:DereferenceChecker
checkLocation	Checkers/MallocChecker.cpp	/^void MallocChecker::checkLocation(SVal l, bool isLoad,CheckerContext &C) const {$/;"	f	class:MallocChecker
checkLocation	Checkers/NSErrorChecker.cpp	/^void NSOrCFErrorDerefChecker::checkLocation(SVal loc, bool isLoad,$/;"	f	class:NSOrCFErrorDerefChecker
checkLocation	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkLocation(SVal location, bool isLoad,$/;"	f	class:ObjCSelfInitChecker
checkNonNull	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::checkNonNull(CheckerContext &C,$/;"	f	class:CStringChecker
checkObjCDealloc	Checkers/CheckObjCDealloc.cpp	/^static void checkObjCDealloc(const ObjCImplementationDecl* D,$/;"	f	file:
checkObjCUnusedIvar	Checkers/ObjCUnusedIVarsChecker.cpp	/^static void checkObjCUnusedIvar(const ObjCImplementationDecl *D,$/;"	f	file:
checkPostObjCMessage	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkPostObjCMessage(ObjCMessage msg,$/;"	f	class:ObjCSelfInitChecker
checkPostStmt	Checkers/AdjustedReturnValueChecker.cpp	/^void AdjustedReturnValueChecker::checkPostStmt(const CallExpr *CE,$/;"	f	class:AdjustedReturnValueChecker
checkPostStmt	Checkers/IdempotentOperationChecker.cpp	/^void IdempotentOperationChecker::checkPostStmt(const BinaryOperator *B,$/;"	f	class:IdempotentOperationChecker
checkPostStmt	Checkers/NoReturnFunctionChecker.cpp	/^void NoReturnFunctionChecker::checkPostStmt(const CallExpr *CE,$/;"	f	class:NoReturnFunctionChecker
checkPostStmt	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkPostStmt(const CallExpr *CE,$/;"	f	class:ObjCSelfInitChecker
checkPostStmt	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkPostStmt(const ObjCIvarRefExpr *E,$/;"	f	class:ObjCSelfInitChecker
checkPostStmt	Checkers/PthreadLockChecker.cpp	/^void PthreadLockChecker::checkPostStmt(const CallExpr *CE,$/;"	f	class:PthreadLockChecker
checkPostStmt	Checkers/UndefCapturedBlockVarChecker.cpp	/^UndefCapturedBlockVarChecker::checkPostStmt(const BlockExpr *BE,$/;"	f	class:UndefCapturedBlockVarChecker
checkPostStmt	Checkers/UndefResultChecker.cpp	/^void UndefResultChecker::checkPostStmt(const BinaryOperator *B,$/;"	f	class:UndefResultChecker
checkPostStmt	Core/CFRefCount.cpp	/^void RetainReleaseChecker::checkPostStmt(const BlockExpr *BE,$/;"	f	class:RetainReleaseChecker
checkPreObjCMessage	Checkers/BasicObjCFoundationChecks.cpp	/^void ClassReleaseChecker::checkPreObjCMessage(ObjCMessage msg,$/;"	f	class:ClassReleaseChecker
checkPreObjCMessage	Checkers/BasicObjCFoundationChecks.cpp	/^void NilArgChecker::checkPreObjCMessage(ObjCMessage msg,$/;"	f	class:NilArgChecker
checkPreObjCMessage	Checkers/BasicObjCFoundationChecks.cpp	/^void VariadicMethodTypeChecker::checkPreObjCMessage(ObjCMessage msg,$/;"	f	class:VariadicMethodTypeChecker
checkPreObjCMessage	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::checkPreObjCMessage(ObjCMessage msg,$/;"	f	class:CallAndMessageChecker
checkPreObjCMessage	Checkers/NSAutoreleasePoolChecker.cpp	/^void NSAutoreleasePoolChecker::checkPreObjCMessage(ObjCMessage msg,$/;"	f	class:NSAutoreleasePoolChecker
checkPreStmt	Checkers/AttrNonNullChecker.cpp	/^void AttrNonNullChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:AttrNonNullChecker
checkPreStmt	Checkers/BasicObjCFoundationChecks.cpp	/^void CFNumberCreateChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:CFNumberCreateChecker
checkPreStmt	Checkers/BasicObjCFoundationChecks.cpp	/^void CFRetainReleaseChecker::checkPreStmt(const CallExpr* CE,$/;"	f	class:CFRetainReleaseChecker
checkPreStmt	Checkers/CStringChecker.cpp	/^void CStringChecker::checkPreStmt(const DeclStmt *DS, CheckerContext &C) const {$/;"	f	class:CStringChecker
checkPreStmt	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:CallAndMessageChecker
checkPreStmt	Checkers/CastSizeChecker.cpp	/^void CastSizeChecker::checkPreStmt(const CastExpr *CE,CheckerContext &C) const {$/;"	f	class:CastSizeChecker
checkPreStmt	Checkers/CastToStructChecker.cpp	/^void CastToStructChecker::checkPreStmt(const CastExpr *CE,$/;"	f	class:CastToStructChecker
checkPreStmt	Checkers/ChrootChecker.cpp	/^void ChrootChecker::checkPreStmt(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:ChrootChecker
checkPreStmt	Checkers/DivZeroChecker.cpp	/^void DivZeroChecker::checkPreStmt(const BinaryOperator *B,$/;"	f	class:DivZeroChecker
checkPreStmt	Checkers/FixedAddressChecker.cpp	/^void FixedAddressChecker::checkPreStmt(const BinaryOperator *B,$/;"	f	class:FixedAddressChecker
checkPreStmt	Checkers/IdempotentOperationChecker.cpp	/^void IdempotentOperationChecker::checkPreStmt(const BinaryOperator *B,$/;"	f	class:IdempotentOperationChecker
checkPreStmt	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkPreStmt(const CXXMemberCallExpr *MCE,$/;"	f	class:IteratorsChecker
checkPreStmt	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkPreStmt(const CXXOperatorCallExpr *OCE,$/;"	f	class:IteratorsChecker
checkPreStmt	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:IteratorsChecker
checkPreStmt	Checkers/IteratorsChecker.cpp	/^void IteratorsChecker::checkPreStmt(const DeclStmt *DS,$/;"	f	class:IteratorsChecker
checkPreStmt	Checkers/MacOSXAPIChecker.cpp	/^void MacOSXAPIChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:MacOSXAPIChecker
checkPreStmt	Checkers/MallocChecker.cpp	/^void MallocChecker::checkPreStmt(const ReturnStmt *S, CheckerContext &C) const {$/;"	f	class:MallocChecker
checkPreStmt	Checkers/ObjCAtSyncChecker.cpp	/^void ObjCAtSyncChecker::checkPreStmt(const ObjCAtSynchronizedStmt *S,$/;"	f	class:ObjCAtSyncChecker
checkPreStmt	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkPreStmt(const CallExpr *CE,$/;"	f	class:ObjCSelfInitChecker
checkPreStmt	Checkers/ObjCSelfInitChecker.cpp	/^void ObjCSelfInitChecker::checkPreStmt(const ReturnStmt *S,$/;"	f	class:ObjCSelfInitChecker
checkPreStmt	Checkers/PointerArithChecker.cpp	/^void PointerArithChecker::checkPreStmt(const BinaryOperator *B,$/;"	f	class:PointerArithChecker
checkPreStmt	Checkers/PointerSubChecker.cpp	/^void PointerSubChecker::checkPreStmt(const BinaryOperator *B,$/;"	f	class:PointerSubChecker
checkPreStmt	Checkers/ReturnPointerRangeChecker.cpp	/^void ReturnPointerRangeChecker::checkPreStmt(const ReturnStmt *RS,$/;"	f	class:ReturnPointerRangeChecker
checkPreStmt	Checkers/ReturnUndefChecker.cpp	/^void ReturnUndefChecker::checkPreStmt(const ReturnStmt *RS,$/;"	f	class:ReturnUndefChecker
checkPreStmt	Checkers/StackAddrEscapeChecker.cpp	/^void StackAddrEscapeChecker::checkPreStmt(const ReturnStmt *RS,$/;"	f	class:StackAddrEscapeChecker
checkPreStmt	Checkers/StreamChecker.cpp	/^void StreamChecker::checkPreStmt(const ReturnStmt *S, CheckerContext &C) const {$/;"	f	class:StreamChecker
checkPreStmt	Checkers/UndefinedArraySubscriptChecker.cpp	/^UndefinedArraySubscriptChecker::checkPreStmt(const ArraySubscriptExpr *A,$/;"	f	class:UndefinedArraySubscriptChecker
checkPreStmt	Checkers/UnixAPIChecker.cpp	/^void UnixAPIChecker::checkPreStmt(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:UnixAPIChecker
checkPreStmt	Checkers/VLASizeChecker.cpp	/^void VLASizeChecker::checkPreStmt(const DeclStmt *DS, CheckerContext &C) const {$/;"	f	class:VLASizeChecker
checkRegionChanges	Checkers/CStringChecker.cpp	/^CStringChecker::checkRegionChanges(const GRState *state,$/;"	f	class:CStringChecker
checkerMgr	Frontend/AnalysisConsumer.cpp	/^  llvm::OwningPtr<CheckerManager> checkerMgr;$/;"	m	class:__anon57::AnalysisConsumer	file:
checkers_begin	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_begin() { return Checkers.begin(); }$/;"	f	struct:__anon46::CheckStmtContext
checkers_begin	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_begin() { return Checkers.begin(); }$/;"	f	struct:__anon47::CheckObjCMessageContext
checkers_begin	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_begin() { return Checkers.begin(); }$/;"	f	struct:__anon48::CheckLocationContext
checkers_begin	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_begin() { return Checkers.begin(); }$/;"	f	struct:__anon49::CheckBindContext
checkers_begin	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_begin() { return Checkers.begin(); }$/;"	f	struct:__anon50::CheckDeadSymbolsContext
checkers_end	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_end() { return Checkers.end(); }$/;"	f	struct:__anon46::CheckStmtContext
checkers_end	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_end() { return Checkers.end(); }$/;"	f	struct:__anon47::CheckObjCMessageContext
checkers_end	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_end() { return Checkers.end(); }$/;"	f	struct:__anon48::CheckLocationContext
checkers_end	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_end() { return Checkers.end(); }$/;"	f	struct:__anon49::CheckBindContext
checkers_end	Core/CheckerManager.cpp	/^    CheckersTy::const_iterator checkers_end() { return Checkers.end(); }$/;"	f	struct:__anon50::CheckDeadSymbolsContext
clang	Checkers/CStringChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/ClangSACheckerProvider.h	/^namespace clang {$/;"	n
clang	Checkers/ClangSACheckers.h	/^namespace clang {$/;"	n
clang	Checkers/IteratorsChecker.cpp	/^namespace clang { namespace ento {$/;"	n	file:
clang	Checkers/IteratorsChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/MallocChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/NSErrorChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/ObjCSelfInitChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/PthreadLockChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Checkers/StreamChecker.cpp	/^namespace clang {$/;"	n	file:
clang	Core/BasicConstraintManager.cpp	/^namespace clang {$/;"	n	file:
clang	Core/CFRefCount.cpp	/^namespace clang {$/;"	n	file:
clang	Core/CoreEngine.cpp	/^namespace clang {$/;"	n	file:
clang	Core/PlistDiagnostics.cpp	/^namespace clang {$/;"	n	file:
clang	Core/RangeConstraintManager.cpp	/^namespace clang {$/;"	n	file:
clang	Core/SimpleConstraintManager.cpp	/^namespace clang {$/;"	n	file:
clang	Core/SimpleConstraintManager.h	/^namespace clang {$/;"	n
clang	Frontend/AnalysisConsumer.h	/^namespace clang {$/;"	n
cleanUpLocation	Core/BugReporter.cpp	/^  PathDiagnosticLocation cleanUpLocation(PathDiagnosticLocation L,$/;"	f	class:__anon43::EdgeBuilder	file:
clearCounts	Core/CFRefCount.cpp	/^  void clearCounts() { Cnt = 0; ACnt = 0; }$/;"	f	class:__anon10::RefVal
collectCheckers	Checkers/ClangSACheckerProvider.cpp	/^static void collectCheckers(CheckerOptInfo &opt,$/;"	f	file:
collectCheckers	Checkers/ClangSACheckerProvider.cpp	/^static void collectCheckers(const CheckNameOption *checkName,$/;"	f	file:
computeOffset	Checkers/ArrayBoundCheckerV2.cpp	/^RegionRawOffsetV2 RegionRawOffsetV2::computeOffset(const GRState *state,$/;"	f	class:RegionRawOffsetV2
computeReachableBlocks	Checkers/DeadStoresChecker.cpp	/^void ReachableCode::computeReachableBlocks() {$/;"	f	class:ReachableCode
contains	Core/CFRefCount.cpp	/^static inline bool contains(const llvm::SmallVectorImpl<ArgEffect>& V,$/;"	f	file:
containsBuiltinOffsetOf	Core/CheckerHelpers.cpp	/^bool clang::ento::containsBuiltinOffsetOf(const Stmt *S) {$/;"	f	class:clang::ento
containsEnum	Core/CheckerHelpers.cpp	/^bool clang::ento::containsEnum(const Stmt *S) {$/;"	f	class:clang::ento
containsEvent	Core/PathDiagnostic.cpp	/^bool PathDiagnosticMacroPiece::containsEvent() const {$/;"	f	class:PathDiagnosticMacroPiece
containsLocation	Core/BugReporter.cpp	/^bool EdgeBuilder::containsLocation(const PathDiagnosticLocation &Container,$/;"	f	class:EdgeBuilder
containsMacro	Core/CheckerHelpers.cpp	/^bool clang::ento::containsMacro(const Stmt *S) {$/;"	f	class:clang::ento
containsNonLocalVarDecl	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::containsNonLocalVarDecl(const Stmt *S) {$/;"	f	class:IdempotentOperationChecker
containsStaticLocal	Core/CheckerHelpers.cpp	/^bool clang::ento::containsStaticLocal(const Stmt *S) {$/;"	f	class:clang::ento
convertToArrayIndex	Core/SValBuilder.cpp	/^SVal SValBuilder::convertToArrayIndex(SVal val) {$/;"	f	class:SValBuilder
copySummary	Core/CFRefCount.cpp	/^  RetainSummary *copySummary(RetainSummary *OldSumm) {$/;"	f	class:__anon14::RetainSummaryManager
createClangSACheckerProvider	Checkers/ClangSACheckerProvider.cpp	/^CheckerProvider *ento::createClangSACheckerProvider() {$/;"	f	class:ento
createHTMLDiagnosticClient	Core/HTMLDiagnostics.cpp	/^ento::createHTMLDiagnosticClient(const std::string& prefix,$/;"	f	class:ento
createPlistDiagnosticClient	Core/PlistDiagnostics.cpp	/^ento::createPlistDiagnosticClient(const std::string& s, const Preprocessor &PP,$/;"	f	class:ento
createPlistHTMLDiagnosticClient	Frontend/AnalysisConsumer.cpp	/^createPlistHTMLDiagnosticClient(const std::string& prefix,$/;"	f	file:
createSimpleSValBuilder	Core/SimpleSValBuilder.cpp	/^SValBuilder *ento::createSimpleSValBuilder(llvm::BumpPtrAllocator &alloc,$/;"	f	class:ento
createTextPathDiagnosticClient	Core/TextPathDiagnostics.cpp	/^ento::createTextPathDiagnosticClient(const std::string& out,$/;"	f	class:ento
createdDir	Core/HTMLDiagnostics.cpp	/^  bool createdDir, noDir;$/;"	m	class:__anon29::HTMLDiagnostics	file:
currentBlock	Checkers/DeadStoresChecker.cpp	/^  const CFGBlock *currentBlock;$/;"	m	class:__anon75::DeadStoreObs	file:
data_type	Core/ExprEngine.cpp	/^    typedef const Stmt *data_type;$/;"	t	struct:__anon24::ReturnExpr	file:
deallocGC	Core/CFRefCount.cpp	/^  BugType *deallocGC, *deallocNotOwned;$/;"	m	class:__anon17::CFRefCount	file:
deallocNotOwned	Core/CFRefCount.cpp	/^  BugType *deallocGC, *deallocNotOwned;$/;"	m	class:__anon17::CFRefCount	file:
decrementReferenceCount	Core/RegionStore.cpp	/^  void decrementReferenceCount(Store store) {$/;"	f	class:__anon32::RegionStoreManager
dequeue	Core/CoreEngine.cpp	/^    virtual WorkListUnit dequeue() {$/;"	f	class:__anon28::BFSBlockDFSContents
dequeue	Core/CoreEngine.cpp	/^  virtual WorkListUnit dequeue() {$/;"	f	class:__anon27::BFS
dequeue	Core/CoreEngine.cpp	/^  virtual WorkListUnit dequeue() {$/;"	f	class:__anon27::DFS
desc	Checkers/ObjCSelfInitChecker.cpp	/^  const std::string desc;$/;"	m	class:__anon89::InitSelfBug	file:
dictionaryWithObjectsAndKeysS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector dictionaryWithObjectsAndKeysS;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
drainS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector drainS;$/;"	m	class:__anon109::ClassReleaseChecker	file:
dump	Checkers/ArrayBoundCheckerV2.cpp	/^void RegionRawOffsetV2::dump() const {$/;"	f	class:RegionRawOffsetV2
dump	Core/MemRegion.cpp	/^void MemRegion::dump() const {$/;"	f	class:MemRegion
dump	Core/MemRegion.cpp	/^void RegionRawOffset::dump() const {$/;"	f	class:RegionRawOffset
dump	Core/SVals.cpp	/^void SVal::dump() const { dumpToStream(llvm::errs()); }$/;"	f	class:SVal
dump	Core/SymbolManager.cpp	/^void SymExpr::dump() const {$/;"	f	class:SymExpr
dumpToStream	Checkers/ArrayBoundCheckerV2.cpp	/^void RegionRawOffsetV2::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:RegionRawOffsetV2
dumpToStream	Core/MemRegion.cpp	/^void AllocaRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:AllocaRegion
dumpToStream	Core/MemRegion.cpp	/^void BlockDataRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:BlockDataRegion
dumpToStream	Core/MemRegion.cpp	/^void BlockTextRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:BlockTextRegion
dumpToStream	Core/MemRegion.cpp	/^void CXXBaseObjectRegion::dumpToStream(llvm::raw_ostream &os) const {$/;"	f	class:CXXBaseObjectRegion
dumpToStream	Core/MemRegion.cpp	/^void CXXTempObjectRegion::dumpToStream(llvm::raw_ostream &os) const {$/;"	f	class:CXXTempObjectRegion
dumpToStream	Core/MemRegion.cpp	/^void CXXThisRegion::dumpToStream(llvm::raw_ostream &os) const {$/;"	f	class:CXXThisRegion
dumpToStream	Core/MemRegion.cpp	/^void CompoundLiteralRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:CompoundLiteralRegion
dumpToStream	Core/MemRegion.cpp	/^void ElementRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:ElementRegion
dumpToStream	Core/MemRegion.cpp	/^void FieldRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:FieldRegion
dumpToStream	Core/MemRegion.cpp	/^void FunctionTextRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:FunctionTextRegion
dumpToStream	Core/MemRegion.cpp	/^void MemRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:MemRegion
dumpToStream	Core/MemRegion.cpp	/^void NonStaticGlobalSpaceRegion::dumpToStream(llvm::raw_ostream &os) const {$/;"	f	class:NonStaticGlobalSpaceRegion
dumpToStream	Core/MemRegion.cpp	/^void ObjCIvarRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:ObjCIvarRegion
dumpToStream	Core/MemRegion.cpp	/^void RegionRawOffset::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:RegionRawOffset
dumpToStream	Core/MemRegion.cpp	/^void StaticGlobalSpaceRegion::dumpToStream(llvm::raw_ostream &os) const {$/;"	f	class:StaticGlobalSpaceRegion
dumpToStream	Core/MemRegion.cpp	/^void StringRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:StringRegion
dumpToStream	Core/MemRegion.cpp	/^void SymbolicRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolicRegion
dumpToStream	Core/MemRegion.cpp	/^void VarRegion::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:VarRegion
dumpToStream	Core/SVals.cpp	/^void Loc::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:Loc
dumpToStream	Core/SVals.cpp	/^void NonLoc::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:NonLoc
dumpToStream	Core/SVals.cpp	/^void SVal::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SVal
dumpToStream	Core/SymbolManager.cpp	/^void SymIntExpr::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymIntExpr
dumpToStream	Core/SymbolManager.cpp	/^void SymSymExpr::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymSymExpr
dumpToStream	Core/SymbolManager.cpp	/^void SymbolConjured::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolConjured
dumpToStream	Core/SymbolManager.cpp	/^void SymbolDerived::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolDerived
dumpToStream	Core/SymbolManager.cpp	/^void SymbolExtent::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolExtent
dumpToStream	Core/SymbolManager.cpp	/^void SymbolMetadata::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolMetadata
dumpToStream	Core/SymbolManager.cpp	/^void SymbolRegionValue::dumpToStream(llvm::raw_ostream& os) const {$/;"	f	class:SymbolRegionValue
emitNilReceiverBug	Checkers/CallAndMessageChecker.cpp	/^void CallAndMessageChecker::emitNilReceiverBug(CheckerContext &C,$/;"	f	class:CallAndMessageChecker
emitOverlapBug	Checkers/CStringChecker.cpp	/^void CStringChecker::emitOverlapBug(CheckerContext &C, const GRState *state,$/;"	f	class:CStringChecker
enableFields	Core/RegionStore.cpp	/^  void enableFields(bool t) { SupportsFields = t; }$/;"	f	class:__anon31::RegionStoreFeatures
end	Core/ExplodedGraph.cpp	/^ExplodedNode** ExplodedNode::NodeGroup::end() const {$/;"	f	class:ExplodedNode::NodeGroup
end	Core/RangeConstraintManager.cpp	/^  iterator end() const { return ranges.end(); }$/;"	f	class:__anon38::RangeSet
end	Core/SVals.cpp	/^nonloc::CompoundVal::iterator nonloc::CompoundVal::end() const {$/;"	f	class:nonloc::CompoundVal
enqueue	Core/CoreEngine.cpp	/^    virtual void enqueue(const WorkListUnit& U) {$/;"	f	class:__anon28::BFSBlockDFSContents
enqueue	Core/CoreEngine.cpp	/^  virtual void enqueue(const WorkListUnit& U) {$/;"	f	class:__anon27::BFS
enqueue	Core/CoreEngine.cpp	/^  virtual void enqueue(const WorkListUnit& U) {$/;"	f	class:__anon27::DFS
enterStackFrame	Core/GRState.cpp	/^const GRState *GRState::enterStackFrame(const StackFrameContext *frame) const {$/;"	f	class:GRState
enterStackFrame	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::enterStackFrame(const GRState *state,$/;"	f	class:RegionStoreManager
enterStackFrame	Core/Store.cpp	/^StoreRef StoreManager::enterStackFrame(const GRState *state,$/;"	f	class:StoreManager
ento	Checkers/CStringChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/ClangSACheckerProvider.h	/^namespace ento {$/;"	n	namespace:clang
ento	Checkers/ClangSACheckers.h	/^namespace ento {$/;"	n	namespace:clang
ento	Checkers/IteratorsChecker.cpp	/^  namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/IteratorsChecker.cpp	/^namespace clang { namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/MallocChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/NSErrorChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/ObjCSelfInitChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/PthreadLockChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Checkers/StreamChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/BasicConstraintManager.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/CFRefCount.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/CoreEngine.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/RangeConstraintManager.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/SimpleConstraintManager.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
ento	Core/SimpleConstraintManager.h	/^namespace ento {$/;"	n	namespace:clang
ento	Frontend/AnalysisConsumer.h	/^namespace ento {$/;"	n	namespace:clang
evalAPSInt	Core/BasicValueFactory.cpp	/^BasicValueFactory::evalAPSInt(BinaryOperator::Opcode Op,$/;"	f	class:BasicValueFactory
evalArguments	Core/CXXExprEngine.cpp	/^void ExprEngine::evalArguments(ConstExprIterator AI, ConstExprIterator AE,$/;"	f	class:ExprEngine
evalAssume	Checkers/MallocChecker.cpp	/^const GRState *MallocChecker::evalAssume(const GRState *state, SVal Cond, $/;"	f	class:MallocChecker
evalAssume	Core/CFRefCount.cpp	/^const GRState* CFRefCount::evalAssume(const GRState *state,$/;"	f	class:CFRefCount
evalBcopy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalBcopy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalBinOp	Core/SValBuilder.cpp	/^SVal SValBuilder::evalBinOp(const GRState *state, BinaryOperator::Opcode op,$/;"	f	class:SValBuilder
evalBinOp	Core/SVals.cpp	/^SVal loc::ConcreteInt::evalBinOp(BasicValueFactory& BasicVals,$/;"	f	class:loc::ConcreteInt
evalBinOp	Core/SVals.cpp	/^SVal nonloc::ConcreteInt::evalBinOp(SValBuilder &svalBuilder,$/;"	f	class:nonloc::ConcreteInt
evalBinOpLL	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalBinOpLL(const GRState *state,$/;"	f	class:SimpleSValBuilder
evalBinOpLN	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalBinOpLN(const GRState *state,$/;"	f	class:SimpleSValBuilder
evalBinOpNN	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalBinOpNN(const GRState *state,$/;"	f	class:SimpleSValBuilder
evalBind	Core/CFRefCount.cpp	/^void CFRefCount::evalBind(StmtNodeBuilderRef& B, SVal location, SVal val) {$/;"	f	class:CFRefCount
evalBind	Core/ExprEngine.cpp	/^void ExprEngine::evalBind(ExplodedNodeSet& Dst, const Stmt* StoreE,$/;"	f	class:ExprEngine
evalCall	Checkers/BuiltinFunctionChecker.cpp	/^bool BuiltinFunctionChecker::evalCall(const CallExpr *CE,$/;"	f	class:BuiltinFunctionChecker
evalCall	Checkers/CStringChecker.cpp	/^bool CStringChecker::evalCall(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:CStringChecker
evalCall	Checkers/ChrootChecker.cpp	/^bool ChrootChecker::evalCall(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:ChrootChecker
evalCall	Checkers/MallocChecker.cpp	/^bool MallocChecker::evalCall(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:MallocChecker
evalCall	Checkers/OSAtomicChecker.cpp	/^bool OSAtomicChecker::evalCall(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:OSAtomicChecker
evalCall	Checkers/StreamChecker.cpp	/^bool StreamChecker::evalCall(const CallExpr *CE, CheckerContext &C) const {$/;"	f	class:StreamChecker
evalCall	Core/CFRefCount.cpp	/^void CFRefCount::evalCall(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
evalCallee	Core/CXXExprEngine.cpp	/^void ExprEngine::evalCallee(const CallExpr *callExpr,$/;"	f	class:ExprEngine
evalCast	Core/SValBuilder.cpp	/^SVal SValBuilder::evalCast(SVal val, QualType castTy, QualType originalTy) {$/;"	f	class:SValBuilder
evalCastFromLoc	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalCastFromLoc(Loc val, QualType castTy) {$/;"	f	class:SimpleSValBuilder
evalCastFromNonLoc	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalCastFromNonLoc(NonLoc val, QualType castTy) {$/;"	f	class:SimpleSValBuilder
evalComplement	Core/SVals.cpp	/^nonloc::ConcreteInt::evalComplement(SValBuilder &svalBuilder) const {$/;"	f	class:nonloc::ConcreteInt
evalComplement	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalComplement(NonLoc X) {$/;"	f	class:SimpleSValBuilder
evalCopyCommon	Checkers/CStringChecker.cpp	/^void CStringChecker::evalCopyCommon(CheckerContext &C, $/;"	f	class:CStringChecker
evalDeadSymbols	Core/CFRefCount.cpp	/^void CFRefCount::evalDeadSymbols(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
evalDerivedToBase	Core/RegionStore.cpp	/^SVal RegionStoreManager::evalDerivedToBase(SVal derived, QualType baseType) {$/;"	f	class:RegionStoreManager
evalEQ	Core/SValBuilder.cpp	/^DefinedOrUnknownSVal SValBuilder::evalEQ(const GRState *state,$/;"	f	class:SValBuilder
evalEagerlyAssume	Core/ExprEngine.cpp	/^void ExprEngine::evalEagerlyAssume(ExplodedNodeSet &Dst, ExplodedNodeSet &Src,$/;"	f	class:ExprEngine
evalEndPath	Core/CFRefCount.cpp	/^void CFRefCount::evalEndPath(ExprEngine& Eng,$/;"	f	class:CFRefCount
evalLoad	Core/ExprEngine.cpp	/^void ExprEngine::evalLoad(ExplodedNodeSet& Dst, const Expr *Ex,$/;"	f	class:ExprEngine
evalLoadCommon	Core/ExprEngine.cpp	/^void ExprEngine::evalLoadCommon(ExplodedNodeSet& Dst, const Expr *Ex,$/;"	f	class:ExprEngine
evalLocation	Core/ExprEngine.cpp	/^void ExprEngine::evalLocation(ExplodedNodeSet &Dst, const Stmt *S,$/;"	f	class:ExprEngine
evalMemcmp	Checkers/CStringChecker.cpp	/^void CStringChecker::evalMemcmp(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalMemcpy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalMemcpy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalMemmove	Checkers/CStringChecker.cpp	/^void CStringChecker::evalMemmove(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalMempcpy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalMempcpy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalMinus	Core/SVals.cpp	/^nonloc::ConcreteInt::evalMinus(SValBuilder &svalBuilder) const {$/;"	f	class:nonloc::ConcreteInt
evalMinus	Core/SimpleSValBuilder.cpp	/^SVal SimpleSValBuilder::evalMinus(NonLoc val) {$/;"	f	class:SimpleSValBuilder
evalOSAtomicCompareAndSwap	Checkers/OSAtomicChecker.cpp	/^bool OSAtomicChecker::evalOSAtomicCompareAndSwap(CheckerContext &C, $/;"	f	class:OSAtomicChecker
evalObjCMessage	Core/CFRefCount.cpp	/^void CFRefCount::evalObjCMessage(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
evalReturn	Core/CFRefCount.cpp	/^void CFRefCount::evalReturn(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
evalStore	Core/ExprEngine.cpp	/^void ExprEngine::evalStore(ExplodedNodeSet& Dst, const Expr *AssignE,$/;"	f	class:ExprEngine
evalStpcpy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalStpcpy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalStrcpy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalStrcpy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalStrcpyCommon	Checkers/CStringChecker.cpp	/^void CStringChecker::evalStrcpyCommon(CheckerContext &C, const CallExpr *CE,$/;"	f	class:CStringChecker
evalStrncpy	Checkers/CStringChecker.cpp	/^void CStringChecker::evalStrncpy(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:CStringChecker
evalSummary	Core/CFRefCount.cpp	/^void CFRefCount::evalSummary(ExplodedNodeSet& Dst,$/;"	f	class:CFRefCount
evalstrLength	Checkers/CStringChecker.cpp	/^void CStringChecker::evalstrLength(CheckerContext &C,$/;"	f	class:CStringChecker
evalstrLengthCommon	Checkers/CStringChecker.cpp	/^void CStringChecker::evalstrLengthCommon(CheckerContext &C, const CallExpr *CE,$/;"	f	class:CStringChecker
evalstrnLength	Checkers/CStringChecker.cpp	/^void CStringChecker::evalstrnLength(CheckerContext &C,$/;"	f	class:CStringChecker
expand	Core/SVals.cpp	/^void SVal::symbol_iterator::expand() {$/;"	f	class:SVal::symbol_iterator
expandGraphWithCheckers	Core/CheckerManager.cpp	/^static void expandGraphWithCheckers(CHECK_CTX checkCtx,$/;"	f	file:
explodedNodes	Checkers/IdempotentOperationChecker.cpp	/^    ExplodedNodeSet explodedNodes; \/\/ Set of ExplodedNodes that refer to a$/;"	m	struct:__anon65::IdempotentOperationChecker::BinaryOperatorData	file:
find	Core/CFRefCount.cpp	/^  RetainSummary* find(IdentifierInfo* II, Selector S) {$/;"	f	class:__anon13::ObjCSummaryCache
find	Core/CFRefCount.cpp	/^  RetainSummary* find(const ObjCInterfaceDecl* D, IdentifierInfo *ClsName,$/;"	f	class:__anon13::ObjCSummaryCache
find	Core/CFRefCount.cpp	/^  RetainSummary* find(const ObjCInterfaceDecl* D, Selector S) {$/;"	f	class:__anon13::ObjCSummaryCache
finishedCheckerRegistration	Core/CheckerManager.cpp	/^void CheckerManager::finishedCheckerRegistration() {$/;"	f	class:CheckerManager
flatten	Core/PathDiagnostic.cpp	/^void PathDiagnosticLocation::flatten() {$/;"	f	class:PathDiagnosticLocation
flushed	Core/PlistDiagnostics.cpp	/^    bool flushed;$/;"	m	class:__anon7::PlistDiagnostics	file:
generateCaseStmtNode	Core/CoreEngine.cpp	/^SwitchNodeBuilder::generateCaseStmtNode(const iterator& I, const GRState* St){$/;"	f	class:SwitchNodeBuilder
generateDefaultCaseNode	Core/CoreEngine.cpp	/^SwitchNodeBuilder::generateDefaultCaseNode(const GRState* St, bool isSink) {$/;"	f	class:SwitchNodeBuilder
generateNode	Core/CoreEngine.cpp	/^EndOfFunctionNodeBuilder::generateNode(const GRState* State,$/;"	f	class:EndOfFunctionNodeBuilder
generateNode	Core/CoreEngine.cpp	/^ExplodedNode* BranchNodeBuilder::generateNode(const GRState* State,$/;"	f	class:BranchNodeBuilder
generateNode	Core/CoreEngine.cpp	/^IndirectGotoNodeBuilder::generateNode(const iterator& I, const GRState* St,$/;"	f	class:IndirectGotoNodeBuilder
generateNode	Core/CoreEngine.cpp	/^void CallEnterNodeBuilder::generateNode(const GRState *state) {$/;"	f	class:CallEnterNodeBuilder
generateNode	Core/CoreEngine.cpp	/^void CallExitNodeBuilder::generateNode(const GRState *state) {$/;"	f	class:CallExitNodeBuilder
generateNode	Core/CoreEngine.cpp	/^void CoreEngine::generateNode(const ProgramPoint& Loc,$/;"	f	class:CoreEngine
generateNodeImpl	Core/CoreEngine.cpp	/^GenericNodeBuilderImpl::generateNodeImpl(const GRState *state,$/;"	f	class:GenericNodeBuilderImpl
generateNodeInternal	Core/CoreEngine.cpp	/^StmtNodeBuilder::generateNodeInternal(const ProgramPoint &Loc,$/;"	f	class:StmtNodeBuilder
generateNodeInternal	Core/CoreEngine.cpp	/^StmtNodeBuilder::generateNodeInternal(const Stmt* S, const GRState* state,$/;"	f	class:StmtNodeBuilder
generateSelector	Core/CFRefCount.cpp	/^  Selector generateSelector(va_list argp) {$/;"	f	class:__anon14::RetainSummaryManager	file:
getAllocaRegion	Core/MemRegion.cpp	/^MemRegionManager::getAllocaRegion(const Expr* E, unsigned cnt,$/;"	f	class:MemRegionManager
getAllocateFailed	Checkers/MallocChecker.cpp	/^  static RefState getAllocateFailed() {$/;"	f	class:__anon98::RefState
getAllocateUnchecked	Checkers/MallocChecker.cpp	/^  static RefState getAllocateUnchecked(const Stmt *s) { $/;"	f	class:__anon98::RefState
getAnalysisContextInAnotherTU	Core/AnalysisManager.cpp	/^AnalysisManager::getAnalysisContextInAnotherTU(const Decl *D) {$/;"	f	class:AnalysisManager
getArg	Core/CFRefCount.cpp	/^  ArgEffect getArg(unsigned idx) const {$/;"	f	class:__anon11::RetainSummary
getArgEffects	Core/CFRefCount.cpp	/^ArgEffects RetainSummaryManager::getArgEffects() {$/;"	f	class:RetainSummaryManager
getArgExpr	Core/ObjCMessage.cpp	/^const Expr *ObjCMessage::getArgExpr(unsigned i) const {$/;"	f	class:ObjCMessage
getArgSValAsScalarOrLoc	Core/ObjCMessage.cpp	/^SVal CallOrObjCMessage::getArgSValAsScalarOrLoc(unsigned i) const {$/;"	f	class:CallOrObjCMessage
getAsArrayOffset	Core/MemRegion.cpp	/^RegionRawOffset ElementRegion::getAsArrayOffset() const {$/;"	f	class:ElementRegion
getAsFunctionDecl	Core/SVals.cpp	/^const FunctionDecl *SVal::getAsFunctionDecl() const {$/;"	f	class:SVal
getAsLocSymbol	Core/SVals.cpp	/^SymbolRef SVal::getAsLocSymbol() const {$/;"	f	class:SVal
getAsOffset	Core/MemRegion.cpp	/^RegionOffset MemRegion::getAsOffset() const {$/;"	f	class:MemRegion
getAsRegion	Core/SVals.cpp	/^const MemRegion *SVal::getAsRegion() const {$/;"	f	class:SVal
getAsSymbol	Core/SVals.cpp	/^SymbolRef SVal::getAsSymbol() const {$/;"	f	class:SVal
getAsSymbolicExpression	Core/SVals.cpp	/^const SymExpr *SVal::getAsSymbolicExpression() const {$/;"	f	class:SVal
getAutoreleaseCount	Core/CFRefCount.cpp	/^  unsigned getAutoreleaseCount() const { return ACnt; }$/;"	f	class:__anon10::RefVal
getBaseRegion	Core/MemRegion.cpp	/^const MemRegion *MemRegion::getBaseRegion() const {$/;"	f	class:MemRegion
getBeginValid	Checkers/IteratorsChecker.cpp	/^  static RefState getBeginValid(const MemRegion *vr) {$/;"	f	class:__anon100::RefState
getBlockDataRegion	Core/MemRegion.cpp	/^MemRegionManager::getBlockDataRegion(const BlockTextRegion *BC,$/;"	f	class:MemRegionManager
getBlockPointer	Core/SValBuilder.cpp	/^DefinedSVal SValBuilder::getBlockPointer(const BlockDecl *block,$/;"	f	class:SValBuilder
getBlockTextRegion	Core/MemRegion.cpp	/^MemRegionManager::getBlockTextRegion(const BlockDecl *BD, CanQualType locTy,$/;"	f	class:MemRegionManager
getBugType	Core/CFRefCount.cpp	/^    CFRefBug& getBugType() const {$/;"	f	class:__anon18::CFRefReport
getBugTypeForName	Core/BugReporter.cpp	/^BugType *BugReporter::getBugTypeForName(llvm::StringRef name,$/;"	f	class:BugReporter
getByteOffset	Checkers/ArrayBoundCheckerV2.cpp	/^  NonLoc getByteOffset() const { return cast<NonLoc>(byteOffset); }$/;"	f	class:__anon67::RegionRawOffsetV2
getCFCreateGetRuleSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getCFCreateGetRuleSummary(const FunctionDecl* FD,$/;"	f	class:RetainSummaryManager
getCFG	Checkers/DeadStoresChecker.cpp	/^  CFG& getCFG() { return *cfg; }$/;"	f	class:__anon76::FindEscaped
getCFSummaryCreateRule	Core/CFRefCount.cpp	/^RetainSummaryManager::getCFSummaryCreateRule(const FunctionDecl* FD) {$/;"	f	class:RetainSummaryManager
getCFSummaryGetRule	Core/CFRefCount.cpp	/^RetainSummaryManager::getCFSummaryGetRule(const FunctionDecl* FD) {$/;"	f	class:RetainSummaryManager
getCStringLength	Checkers/CStringChecker.cpp	/^SVal CStringChecker::getCStringLength(CheckerContext &C, const GRState *&state,$/;"	f	class:CStringChecker
getCStringLengthForRegion	Checkers/CStringChecker.cpp	/^SVal CStringChecker::getCStringLengthForRegion(CheckerContext &C,$/;"	f	class:CStringChecker
getCXXBaseObjectRegion	Core/MemRegion.cpp	/^MemRegionManager::getCXXBaseObjectRegion(const CXXRecordDecl *decl,$/;"	f	class:MemRegionManager
getCXXTempObjectRegion	Core/MemRegion.cpp	/^MemRegionManager::getCXXTempObjectRegion(Expr const *E,$/;"	f	class:MemRegionManager
getCXXThisRegion	Core/CXXExprEngine.cpp	/^const CXXThisRegion *ExprEngine::getCXXThisRegion(const CXXMethodDecl *decl,$/;"	f	class:ExprEngine
getCXXThisRegion	Core/CXXExprEngine.cpp	/^const CXXThisRegion *ExprEngine::getCXXThisRegion(const CXXRecordDecl *D,$/;"	f	class:ExprEngine
getCXXThisRegion	Core/MemRegion.cpp	/^MemRegionManager::getCXXThisRegion(QualType thisPointerTy,$/;"	f	class:MemRegionManager
getCachedStmtCheckersFor	Core/CheckerManager.cpp	/^CheckerManager::getCachedStmtCheckersFor(const Stmt *S, bool isPreVisit) {$/;"	f	class:CheckerManager
getClassMethodSummary	Core/CFRefCount.cpp	/^  RetainSummary *getClassMethodSummary(const ObjCMessage &msg) {$/;"	f	class:__anon14::RetainSummaryManager
getClassMethodSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getClassMethodSummary(Selector S, IdentifierInfo *ClsName,$/;"	f	class:RetainSummaryManager
getClosed	Checkers/StreamChecker.cpp	/^  static StreamState getClosed(const Stmt *s) { return StreamState(Closed, s); }$/;"	f	struct:__anon113::StreamState
getCluster	Core/RegionStore.cpp	/^  RegionCluster& getCluster(const MemRegion *R) {$/;"	f	class:__anon33::ClusterAnalysis
getCodeDecl	Core/BugReporter.cpp	/^  Decl const &getCodeDecl() { return R->getErrorNode()->getCodeDecl(); }$/;"	f	class:__anon40::PathDiagnosticBuilder
getCodeRegion	Core/MemRegion.cpp	/^const MemSpaceRegion *MemRegionManager::getCodeRegion() {$/;"	f	class:MemRegionManager
getCombinedCounts	Core/CFRefCount.cpp	/^  unsigned getCombinedCounts() const { return Cnt + ACnt; }$/;"	f	class:__anon10::RefVal
getCommonMethodSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getCommonMethodSummary(const ObjCMethodDecl* MD,$/;"	f	class:RetainSummaryManager
getCompoundLiteralRegion	Core/MemRegion.cpp	/^MemRegionManager::getCompoundLiteralRegion(const CompoundLiteralExpr* CL,$/;"	f	class:MemRegionManager
getCompoundValData	Core/BasicValueFactory.cpp	/^BasicValueFactory::getCompoundValData(QualType T,$/;"	f	class:BasicValueFactory
getConcreteValue	Core/RangeConstraintManager.cpp	/^  const llvm::APSInt *getConcreteValue() const {$/;"	f	class:__anon38::Range
getConcreteValue	Core/RangeConstraintManager.cpp	/^  const llvm::APSInt* getConcreteValue() const {$/;"	f	class:__anon38::RangeSet
getConjuredSymbol	Core/SymbolManager.cpp	/^SymbolManager::getConjuredSymbol(const Stmt* E, QualType T, unsigned Count,$/;"	f	class:SymbolManager
getConjuredSymbolVal	Core/SValBuilder.cpp	/^DefinedOrUnknownSVal SValBuilder::getConjuredSymbolVal(const void *symbolTag,$/;"	f	class:SValBuilder
getContextLocation	Core/BugReporter.cpp	/^EdgeBuilder::getContextLocation(const PathDiagnosticLocation &L) {$/;"	f	class:EdgeBuilder
getCount	Core/CFRefCount.cpp	/^  unsigned getCount() const { return Cnt; }$/;"	f	class:__anon10::RefVal
getDeclRefExpr	Checkers/IteratorsChecker.cpp	/^const DeclRefExpr *IteratorsChecker::getDeclRefExpr(const Expr *E) const {$/;"	f	class:IteratorsChecker
getDefaultBinding	Core/RegionStore.cpp	/^Optional<SVal> RegionStoreManager::getDefaultBinding(RegionBindings B,$/;"	f	class:RegionStoreManager
getDefaultSummary	Core/CFRefCount.cpp	/^  RetainSummary *getDefaultSummary() {$/;"	f	class:__anon14::RetainSummaryManager
getDerivedRegionValueSymbolVal	Core/SValBuilder.cpp	/^SValBuilder::getDerivedRegionValueSymbolVal(SymbolRef parentSymbol,$/;"	f	class:SValBuilder
getDerivedSymbol	Core/SymbolManager.cpp	/^SymbolManager::getDerivedSymbol(SymbolRef parentSymbol,$/;"	f	class:SymbolManager
getDescription	Core/CFRefCount.cpp	/^    const char *getDescription() const {$/;"	f	class:__anon18::DeallocGC
getDescription	Core/CFRefCount.cpp	/^    const char *getDescription() const {$/;"	f	class:__anon18::DeallocNotOwned
getDescription	Core/CFRefCount.cpp	/^    const char *getDescription() const {$/;"	f	class:__anon18::OverAutorelease
getDescription	Core/CFRefCount.cpp	/^    const char *getDescription() const {$/;"	f	class:__anon18::ReturnedNotOwnedForOwned
getDescription	Core/CFRefCount.cpp	/^    const char* getDescription() const { return ""; }$/;"	f	class:__anon18::Leak
getDescription	Core/CFRefCount.cpp	/^    const char* getDescription() const {$/;"	f	class:__anon18::BadRelease
getDescription	Core/CFRefCount.cpp	/^    const char* getDescription() const {$/;"	f	class:__anon18::UseAfterRelease
getDirectBinding	Core/RegionStore.cpp	/^Optional<SVal> RegionStoreManager::getDirectBinding(RegionBindings B,$/;"	f	class:RegionStoreManager
getElementRegion	Core/MemRegion.cpp	/^MemRegionManager::getElementRegion(QualType elementType, NonLoc Idx,$/;"	f	class:MemRegionManager
getEmptyKey	Core/CFRefCount.cpp	/^  static inline ObjCSummaryKey getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEnclosingStmtLocation	Core/BugReporter.cpp	/^PathDiagnosticBuilder::getEnclosingStmtLocation(const Stmt *S) {$/;"	f	class:PathDiagnosticBuilder
getEndPath	Core/BugReporter.cpp	/^BugReport::getEndPath(BugReporterContext& BRC,$/;"	f	class:BugReport
getEndPath	Core/CFRefCount.cpp	/^CFRefLeakReport::getEndPath(BugReporterContext& BRC,$/;"	f	class:CFRefLeakReport
getEndPath	Core/CFRefCount.cpp	/^CFRefReport::getEndPath(BugReporterContext& BRC,$/;"	f	class:CFRefReport
getEndValid	Checkers/IteratorsChecker.cpp	/^  static RefState getEndValid(const MemRegion *vr) {$/;"	f	class:__anon100::RefState
getEscaped	Checkers/MallocChecker.cpp	/^  static RefState getEscaped(const Stmt *s) { return RefState(Escaped, s); }$/;"	f	class:__anon98::RefState
getEscaped	Checkers/StreamChecker.cpp	/^  static StreamState getEscaped(const Stmt *s) {$/;"	f	struct:__anon113::StreamState
getExtent	Core/MemRegion.cpp	/^DefinedOrUnknownSVal AllocaRegion::getExtent(SValBuilder &svalBuilder) const {$/;"	f	class:AllocaRegion
getExtent	Core/MemRegion.cpp	/^DefinedOrUnknownSVal DeclRegion::getExtent(SValBuilder &svalBuilder) const {$/;"	f	class:DeclRegion
getExtent	Core/MemRegion.cpp	/^DefinedOrUnknownSVal FieldRegion::getExtent(SValBuilder &svalBuilder) const {$/;"	f	class:FieldRegion
getExtent	Core/MemRegion.cpp	/^DefinedOrUnknownSVal StringRegion::getExtent(SValBuilder &svalBuilder) const {$/;"	f	class:StringRegion
getExtent	Core/MemRegion.cpp	/^DefinedOrUnknownSVal SymbolicRegion::getExtent(SValBuilder &svalBuilder) const {$/;"	f	class:SymbolicRegion
getExtentSymbol	Core/SymbolManager.cpp	/^SymbolManager::getExtentSymbol(const SubRegion *R) {$/;"	f	class:SymbolManager
getExtraDescriptiveText	Core/CFRefCount.cpp	/^std::pair<const char**,const char**> CFRefReport::getExtraDescriptiveText() {$/;"	f	class:CFRefReport
getFieldRegion	Core/MemRegion.cpp	/^MemRegionManager::getFieldRegion(const FieldDecl* d,$/;"	f	class:MemRegionManager
getFunctionPointer	Core/SValBuilder.cpp	/^DefinedSVal SValBuilder::getFunctionPointer(const FunctionDecl* func) {$/;"	f	class:SValBuilder
getFunctionTextRegion	Core/MemRegion.cpp	/^MemRegionManager::getFunctionTextRegion(const FunctionDecl *FD) {$/;"	f	class:MemRegionManager
getGenerationScheme	Core/BugReporter.cpp	/^  PathDiagnosticClient::PathGenerationScheme getGenerationScheme() const {$/;"	f	class:__anon40::PathDiagnosticBuilder
getGenerationScheme	Core/PlistDiagnostics.cpp	/^PlistDiagnostics::getGenerationScheme() const {$/;"	f	class:PlistDiagnostics
getGenerationScheme	Core/TextPathDiagnostics.cpp	/^  PathGenerationScheme getGenerationScheme() const { return Minimal; }$/;"	f	class:__anon22::TextPathDiagnostics
getGlobalsRegion	Core/MemRegion.cpp	/^*MemRegionManager::getGlobalsRegion(const CodeTextRegion *CR) {$/;"	f	class:MemRegionManager
getGraph	Core/BugReporter.cpp	/^ExplodedGraph &GRBugReporter::getGraph() { return Eng.getGraph(); }$/;"	f	class:GRBugReporter
getHashValue	Core/CFRefCount.cpp	/^  static unsigned getHashValue(const ObjCSummaryKey &V) {$/;"	f	struct:llvm::DenseMapInfo
getHeapRegion	Core/MemRegion.cpp	/^const HeapSpaceRegion *MemRegionManager::getHeapRegion() {$/;"	f	class:MemRegionManager
getID	Core/BugReporter.cpp	/^  llvm::FoldingSetNodeID &getID() { return ID; }$/;"	f	class:__anon45::DiagCacheItem
getIdentifier	Core/CFRefCount.cpp	/^  IdentifierInfo* getIdentifier() const { return II; }$/;"	f	class:__anon12::ObjCSummaryKey
getIndex	Core/CFRefCount.cpp	/^  unsigned getIndex() const {$/;"	f	class:__anon10::RetEffect
getInitMethodSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getInitMethodSummary(QualType RetTy) {$/;"	f	class:RetainSummaryManager
getInitialState	Core/ExprEngine.cpp	/^const GRState* ExprEngine::getInitialState(const LocationContext *InitLoc) {$/;"	f	class:ExprEngine
getInitialState	Core/GRState.cpp	/^const GRState* GRStateManager::getInitialState(const LocationContext *InitLoc) {$/;"	f	class:GRStateManager
getInitialStore	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::getInitialStore(const LocationContext *InitLoc) {$/;"	f	class:BasicStoreManager
getInitialStore	Core/FlatStore.cpp	/^  StoreRef getInitialStore(const LocationContext *InitLoc) {$/;"	f	class:__anon23::FlatStoreManager
getInitialStore	Core/RegionStore.cpp	/^  StoreRef getInitialStore(const LocationContext *InitLoc) {$/;"	f	class:__anon32::RegionStoreManager
getInstanceMethodSummary	Core/CFRefCount.cpp	/^  RetainSummary* getInstanceMethodSummary(const ObjCMessage &msg,$/;"	f	class:__anon14::RetainSummaryManager
getInstanceMethodSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getInstanceMethodSummary(Selector S,$/;"	f	class:RetainSummaryManager
getInstanceMethodSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getInstanceMethodSummary(const ObjCMessage &msg,$/;"	f	class:RetainSummaryManager
getInvalid	Checkers/IteratorsChecker.cpp	/^  static RefState getInvalid( const MemberExpr *ME ) {$/;"	f	class:__anon100::RefState
getKind	Core/CFRefCount.cpp	/^  Kind getKind() const { return K; }$/;"	f	class:__anon10::RetEffect
getKind	Core/CFRefCount.cpp	/^  Kind getKind() const { return kind; }$/;"	f	class:__anon10::RefVal
getKnownValue	Core/SimpleSValBuilder.cpp	/^const llvm::APSInt *SimpleSValBuilder::getKnownValue(const GRState *state,$/;"	f	class:SimpleSValBuilder
getLValueElement	Core/Store.cpp	/^SVal StoreManager::getLValueElement(QualType elementType, NonLoc Offset, $/;"	f	class:StoreManager
getLValueFieldOrIvar	Core/Store.cpp	/^SVal StoreManager::getLValueFieldOrIvar(const Decl* D, SVal Base) {$/;"	f	class:StoreManager
getLangOptions	Core/CFRefCount.cpp	/^  const LangOptions& getLangOptions() const { return LOpts; }$/;"	f	class:__anon17::CFRefCount
getLazyCompoundValData	Core/BasicValueFactory.cpp	/^BasicValueFactory::getLazyCompoundValData(const StoreRef &store,$/;"	f	class:BasicValueFactory
getLocSymbolInBase	Core/SVals.cpp	/^SymbolRef SVal::getLocSymbolInBase() const {$/;"	f	class:SVal
getLocation	Core/BugReporter.cpp	/^SourceLocation BugReport::getLocation() const {$/;"	f	class:BugReport
getLocation	Core/CFRefCount.cpp	/^    SourceLocation getLocation() const { return AllocSite; }$/;"	f	class:__anon18::CFRefLeakReport
getMappedNode	Core/ExplodedGraph.cpp	/^InterExplodedGraphMap::getMappedNode(const ExplodedNode* N) const {$/;"	f	class:InterExplodedGraphMap
getMemRegion	Checkers/IteratorsChecker.cpp	/^  const MemRegion *getMemRegion() const {$/;"	f	class:__anon100::RefState
getMemRegionManager	Core/MemRegion.cpp	/^MemRegionManager* SubRegion::getMemRegionManager() const {$/;"	f	class:SubRegion
getMemberExpr	Checkers/IteratorsChecker.cpp	/^  const MemberExpr *getMemberExpr() const {$/;"	f	class:__anon100::RefState
getMemorySpace	Core/MemRegion.cpp	/^const MemSpaceRegion *MemRegion::getMemorySpace() const {$/;"	f	class:MemRegion
getMetadataSymbol	Core/SymbolManager.cpp	/^SymbolManager::getMetadataSymbol(const MemRegion* R, const Stmt* S, QualType T,$/;"	f	class:SymbolManager
getMetadataSymbolVal	Core/SValBuilder.cpp	/^DefinedSVal SValBuilder::getMetadataSymbolVal(const void *symbolTag,$/;"	f	class:SValBuilder
getMethodDecl	Core/ObjCMessage.cpp	/^const ObjCMethodDecl *ObjCMessage::getMethodDecl() const {$/;"	f	class:ObjCMessage
getMethodFamily	Core/ObjCMessage.cpp	/^ObjCMethodFamily ObjCMessage::getMethodFamily() const {$/;"	f	class:ObjCMessage
getMethodSummary	Core/CFRefCount.cpp	/^  RetainSummary *getMethodSummary(const ObjCMethodDecl *MD) {$/;"	f	class:__anon14::RetainSummaryManager
getName	Core/HTMLDiagnostics.cpp	/^  virtual llvm::StringRef getName() const {$/;"	f	class:__anon29::HTMLDiagnostics
getName	Core/PlistDiagnostics.cpp	/^    virtual llvm::StringRef getName() const {$/;"	f	class:__anon7::PlistDiagnostics
getName	Core/TextPathDiagnostics.cpp	/^  virtual llvm::StringRef getName() const {$/;"	f	class:__anon22::TextPathDiagnostics
getNode	Core/ExplodedGraph.cpp	/^ExplodedNode *ExplodedGraph::getNode(const ProgramPoint& L,$/;"	f	class:ExplodedGraph
getNodeAttributes	Core/ExprEngine.cpp	/^  static std::string getNodeAttributes(const ExplodedNode* N, void*) {$/;"	f	struct:llvm::DOTGraphTraits
getNodeLabel	Core/ExprEngine.cpp	/^  static std::string getNodeLabel(const ExplodedNode* N, void*){$/;"	f	struct:llvm::DOTGraphTraits
getNodeList	Core/ExplodedGraph.cpp	/^static inline NodeList*& getNodeList(void *&p) { return (NodeList*&) p; }$/;"	f	file:
getNodeResolver	Core/BugReporter.cpp	/^  virtual NodeMapClosure& getNodeResolver() { return NMC; }$/;"	f	class:__anon40::PathDiagnosticBuilder
getNumVisited	Core/BlockCounter.cpp	/^unsigned BlockCounter::getNumVisited(const StackFrameContext *CallSite, $/;"	f	class:BlockCounter
getObjAllocRetEffect	Core/CFRefCount.cpp	/^  RetEffect getObjAllocRetEffect() const { return ObjCAllocRetE; }$/;"	f	class:__anon14::RetainSummaryManager
getObjCIvarRegion	Core/MemRegion.cpp	/^MemRegionManager::getObjCIvarRegion(const ObjCIvarDecl* d,$/;"	f	class:MemRegionManager
getObjKind	Core/CFRefCount.cpp	/^  ObjKind getObjKind() const { return O; }$/;"	f	class:__anon10::RetEffect
getObjKind	Core/CFRefCount.cpp	/^  RetEffect::ObjKind getObjKind() const { return okind; }$/;"	f	class:__anon10::RefVal
getOffset	Core/RegionStore.cpp	/^  uint64_t getOffset() const { return Offset; }$/;"	f	class:__anon30::BindingKey
getOpenFailed	Checkers/StreamChecker.cpp	/^  static StreamState getOpenFailed(const Stmt *s) { $/;"	f	struct:__anon113::StreamState
getOpened	Checkers/StreamChecker.cpp	/^  static StreamState getOpened(const Stmt *s) { return StreamState(Opened, s); }$/;"	f	struct:__anon113::StreamState
getOriginalNode	Core/BugReporter.cpp	/^  const ExplodedNode* getOriginalNode(const ExplodedNode* N) {$/;"	f	class:__anon40::NodeMapClosure
getParent	Core/BugReporter.cpp	/^  const Stmt *getParent(const Stmt *S) {$/;"	f	class:__anon40::PathDiagnosticBuilder
getParentMap	Core/BugReporter.cpp	/^  ParentMap& getParentMap() { return R->getErrorNode()->getParentMap(); }$/;"	f	class:__anon40::PathDiagnosticBuilder
getPersistentSVal	Core/BasicValueFactory.cpp	/^const SVal* BasicValueFactory::getPersistentSVal(SVal X) {$/;"	f	class:BasicValueFactory
getPersistentSValPair	Core/BasicValueFactory.cpp	/^BasicValueFactory::getPersistentSValPair(const SVal& V1, const SVal& V2) {$/;"	f	class:BasicValueFactory
getPersistentSValWithData	Core/BasicValueFactory.cpp	/^BasicValueFactory::getPersistentSValWithData(const SVal& V, uintptr_t Data) {$/;"	f	class:BasicValueFactory
getPersistentState	Core/GRState.cpp	/^const GRState* GRStateManager::getPersistentState(GRState& State) {$/;"	f	class:GRStateManager
getPersistentStopSummary	Core/CFRefCount.cpp	/^  RetainSummary *getPersistentStopSummary() {$/;"	f	class:__anon14::RetainSummaryManager
getPersistentSummary	Core/CFRefCount.cpp	/^  RetainSummary* getPersistentSummary(RetEffect RE,$/;"	f	class:__anon14::RetainSummaryManager
getPersistentSummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getPersistentSummary(ArgEffects AE, RetEffect RetEff,$/;"	f	class:RetainSummaryManager
getRanges	Core/BugReporter.cpp	/^BugReport::getRanges() const {$/;"	f	class:BugReport
getRanges	Core/CFRefCount.cpp	/^    virtual std::pair<ranges_iterator, ranges_iterator> getRanges() const {$/;"	f	class:__anon18::CFRefReport
getReceiverEffect	Core/CFRefCount.cpp	/^  ArgEffect getReceiverEffect() const { return Receiver; }$/;"	f	class:__anon11::RetainSummary
getReceiverInterface	Core/ObjCMessage.cpp	/^const ObjCInterfaceDecl *ObjCMessage::getReceiverInterface() const {$/;"	f	class:ObjCMessage
getRegion	Checkers/ArrayBoundCheckerV2.cpp	/^  const SubRegion *getRegion() const { return baseRegion; }$/;"	f	class:__anon67::RegionRawOffsetV2
getRegion	Checkers/IteratorsChecker.cpp	/^const MemRegion *IteratorsChecker::getRegion(const GRState *state,$/;"	f	class:IteratorsChecker
getRegion	Core/CFRefCount.cpp	/^    const MemRegion* getRegion() { return Binding; }$/;"	f	class:__anon19::FindUniqueBinding
getRegion	Core/MemRegion.cpp	/^RegionTy* MemRegionManager::getRegion(const A1 a1) {$/;"	f	class:MemRegionManager
getRegion	Core/MemRegion.cpp	/^RegionTy* MemRegionManager::getRegion(const A1 a1, const A2 a2) {$/;"	f	class:MemRegionManager
getRegion	Core/RegionStore.cpp	/^  const MemRegion *getRegion() const { return P.getPointer(); }$/;"	f	class:__anon30::BindingKey
getRegion	Core/SVals.cpp	/^const TypedRegion *nonloc::LazyCompoundVal::getRegion() const {$/;"	f	class:nonloc::LazyCompoundVal
getRegionBindings	Core/FlatStore.cpp	/^  static RegionBindings getRegionBindings(Store store) {$/;"	f	class:__anon23::FlatStoreManager	file:
getRegionBindings	Core/RegionStore.cpp	/^  RegionBindings getRegionBindings() const { return B; }$/;"	f	class:__anon33::ClusterAnalysis
getRegionStoreSubRegionMap	Core/RegionStore.cpp	/^RegionStoreManager::getRegionStoreSubRegionMap(Store store) {$/;"	f	class:RegionStoreManager
getRegionValueSymbol	Core/SymbolManager.cpp	/^SymbolManager::getRegionValueSymbol(const TypedRegion* R) {$/;"	f	class:SymbolManager
getRegionValueSymbolVal	Core/SValBuilder.cpp	/^SValBuilder::getRegionValueSymbolVal(const TypedRegion* region) {$/;"	f	class:SValBuilder
getReleased	Checkers/MallocChecker.cpp	/^  static RefState getReleased(const Stmt *s) { return RefState(Released, s); }$/;"	f	class:__anon98::RefState
getRelinquished	Checkers/MallocChecker.cpp	/^  static RefState getRelinquished(const Stmt *s) {$/;"	f	class:__anon98::RefState
getResultType	Core/ObjCMessage.cpp	/^QualType CallOrObjCMessage::getResultType(ASTContext &ctx) const {$/;"	f	class:CallOrObjCMessage
getRetEffect	Core/CFRefCount.cpp	/^  RetEffect getRetEffect() const { return Ret; }$/;"	f	class:__anon11::RetainSummary
getSVal	Core/Environment.cpp	/^SVal Environment::getSVal(const Stmt *E, SValBuilder& svalBuilder) const {$/;"	f	class:Environment
getSVal	Core/GRState.cpp	/^SVal GRState::getSVal(Loc location, QualType T) const {$/;"	f	class:GRState
getSValAsScalarOrLoc	Core/CFRefCount.cpp	/^  SVal getSValAsScalarOrLoc(const GRState *state) {$/;"	f	class:__anon8::InstanceReceiver
getSValAsScalarOrLoc	Core/GRState.cpp	/^SVal GRState::getSValAsScalarOrLoc(const MemRegion *R) const {$/;"	f	class:GRState
getSelector	Core/CFRefCount.cpp	/^  Selector getSelector() const { return S; }$/;"	f	class:__anon12::ObjCSummaryKey
getSelector	Core/ObjCMessage.cpp	/^Selector ObjCMessage::getSelector() const {$/;"	f	class:ObjCMessage
getSelfFlags	Checkers/ObjCSelfInitChecker.cpp	/^static SelfFlagEnum getSelfFlags(SVal val, CheckerContext &C) {$/;"	f	file:
getSelfFlags	Checkers/ObjCSelfInitChecker.cpp	/^static SelfFlagEnum getSelfFlags(SVal val, const GRState *state) {$/;"	f	file:
getSizeInElements	Core/RegionStore.cpp	/^DefinedOrUnknownSVal RegionStoreManager::getSizeInElements(const GRState *state,$/;"	f	class:RegionStoreManager
getSourceRange	Core/CFRefCount.cpp	/^  SourceRange getSourceRange() const {$/;"	f	class:__anon8::InstanceReceiver
getStackArgumentsRegion	Core/MemRegion.cpp	/^MemRegionManager::getStackArgumentsRegion(const StackFrameContext *STC) {$/;"	f	class:MemRegionManager
getStackFrame	Core/MemRegion.cpp	/^const StackFrameContext *VarRegion::getStackFrame() const {$/;"	f	class:VarRegion
getStackLocalsRegion	Core/MemRegion.cpp	/^MemRegionManager::getStackLocalsRegion(const StackFrameContext *STC) {$/;"	f	class:MemRegionManager
getState	Core/CFRefCount.cpp	/^  const GRState *getState() const { return state; }$/;"	f	class:__anon20::StopTrackingCallback
getStateManager	Core/BugReporter.cpp	/^GRBugReporter::getStateManager() { return Eng.getStateManager(); }$/;"	f	class:GRBugReporter
getStmt	Core/BugReporter.cpp	/^const Stmt* BugReport::getStmt() const {$/;"	f	class:BugReport
getStore	Core/SVals.cpp	/^const void *nonloc::LazyCompoundVal::getStore() const {$/;"	f	class:nonloc::LazyCompoundVal
getString	Core/MemRegion.cpp	/^std::string MemRegion::getString() const {$/;"	f	class:MemRegion
getStringRegion	Core/MemRegion.cpp	/^const StringRegion* MemRegionManager::getStringRegion(const StringLiteral* Str){$/;"	f	class:MemRegionManager
getSubRegion	Core/MemRegion.cpp	/^RegionTy* MemRegionManager::getSubRegion(const A1 a1, const A2 a2, const A3 a3,$/;"	f	class:MemRegionManager
getSubRegion	Core/MemRegion.cpp	/^RegionTy* MemRegionManager::getSubRegion(const A1 a1, const A2 a2,$/;"	f	class:MemRegionManager
getSubRegion	Core/MemRegion.cpp	/^RegionTy* MemRegionManager::getSubRegion(const A1 a1,$/;"	f	class:MemRegionManager
getSubRegionMap	Core/BasicStore.cpp	/^  SubRegionMap *getSubRegionMap(Store store) {$/;"	f	class:__anon55::BasicStoreManager
getSubRegionMap	Core/FlatStore.cpp	/^  SubRegionMap *getSubRegionMap(Store store) {$/;"	f	class:__anon23::FlatStoreManager
getSubRegionMap	Core/RegionStore.cpp	/^  SubRegionMap *getSubRegionMap(Store store) {$/;"	f	class:__anon32::RegionStoreManager
getSubRegions	Core/RegionStore.cpp	/^  const Set *getSubRegions(const MemRegion *Parent) const {$/;"	f	class:__anon32::RegionStoreSubRegionMap
getSummary	Core/CFRefCount.cpp	/^RetainSummary* RetainSummaryManager::getSummary(const FunctionDecl* FD) {$/;"	f	class:RetainSummaryManager
getSummaryOfNode	Core/CFRefCount.cpp	/^  const RetainSummary *getSummaryOfNode(const ExplodedNode *N) const {$/;"	f	class:__anon17::CFRefCount
getSymIntExpr	Core/SymbolManager.cpp	/^const SymIntExpr *SymbolManager::getSymIntExpr(const SymExpr *lhs,$/;"	f	class:SymbolManager
getSymSymExpr	Core/SymbolManager.cpp	/^const SymSymExpr *SymbolManager::getSymSymExpr(const SymExpr *lhs,$/;"	f	class:SymbolManager
getSymVal	Core/BasicConstraintManager.cpp	/^const llvm::APSInt* BasicConstraintManager::getSymVal(const GRState* state,$/;"	f	class:BasicConstraintManager
getSymVal	Core/RangeConstraintManager.cpp	/^const llvm::APSInt* RangeConstraintManager::getSymVal(const GRState* St,$/;"	f	class:RangeConstraintManager
getSymbol	Core/CFRefCount.cpp	/^    SymbolRef getSymbol() const { return Sym; }$/;"	f	class:__anon18::CFRefReport
getSymbolicRegion	Core/MemRegion.cpp	/^const SymbolicRegion *MemRegionManager::getSymbolicRegion(SymbolRef sym) {$/;"	f	class:MemRegionManager
getTF	Core/CFRefCount.cpp	/^    CFRefCount& getTF() { return TF; }$/;"	f	class:__anon18::CFRefBug
getTag	Checkers/CStringChecker.cpp	/^  static void *getTag() { static int tag; return &tag; }$/;"	f	class:__anon121::CStringChecker
getTag	Checkers/ChrootChecker.cpp	/^  static void *getTag() {$/;"	f	class:__anon80::ChrootChecker
getTag	Checkers/IteratorsChecker.cpp	/^  static void *getTag() { static int tag; return &tag; }$/;"	f	class:__anon100::IteratorsChecker
getTemplateKind	Checkers/IteratorsChecker.cpp	/^static RefKind getTemplateKind(QualType T) {$/;"	f	file:
getTemplateKind	Checkers/IteratorsChecker.cpp	/^static RefKind getTemplateKind(const DeclContext *dc) {$/;"	f	file:
getTemplateKind	Checkers/IteratorsChecker.cpp	/^static RefKind getTemplateKind(const NamedDecl *td) {$/;"	f	file:
getTemplateKind	Checkers/IteratorsChecker.cpp	/^static RefKind getTemplateKind(const TemplateSpecializationType *tsp) {$/;"	f	file:
getTemplateKind	Checkers/IteratorsChecker.cpp	/^static RefKind getTemplateKind(const TypedefType *tdt) {$/;"	f	file:
getTombstoneKey	Core/CFRefCount.cpp	/^  static inline ObjCSummaryKey getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getType	Core/CFRefCount.cpp	/^  QualType getType() const { return T; }$/;"	f	class:__anon10::RefVal
getType	Core/ObjCMessage.cpp	/^QualType ObjCMessage::getType(ASTContext &ctx) const {$/;"	f	class:ObjCMessage
getType	Core/SymbolManager.cpp	/^QualType SymbolConjured::getType(ASTContext&) const {$/;"	f	class:SymbolConjured
getType	Core/SymbolManager.cpp	/^QualType SymbolDerived::getType(ASTContext& Ctx) const {$/;"	f	class:SymbolDerived
getType	Core/SymbolManager.cpp	/^QualType SymbolExtent::getType(ASTContext& Ctx) const {$/;"	f	class:SymbolExtent
getType	Core/SymbolManager.cpp	/^QualType SymbolMetadata::getType(ASTContext&) const {$/;"	f	class:SymbolMetadata
getType	Core/SymbolManager.cpp	/^QualType SymbolRegionValue::getType(ASTContext& C) const {$/;"	f	class:SymbolRegionValue
getUnarySummary	Core/CFRefCount.cpp	/^RetainSummaryManager::getUnarySummary(const FunctionType* FT,$/;"	f	class:RetainSummaryManager
getUndefined	Checkers/IteratorsChecker.cpp	/^  static RefState getUndefined( void ) {$/;"	f	class:__anon100::RefState
getUnknown	Checkers/IteratorsChecker.cpp	/^  static RefState getUnknown( void ) {$/;"	f	class:__anon100::RefState
getUnknownRegion	Core/MemRegion.cpp	/^const MemSpaceRegion *MemRegionManager::getUnknownRegion() {$/;"	f	class:MemRegionManager
getUnreachableStmt	Checkers/UnreachableCodeChecker.cpp	/^const Stmt *UnreachableCodeChecker::getUnreachableStmt(const CFGBlock *CB) {$/;"	f	class:UnreachableCodeChecker
getValue	Checkers/ArrayBoundCheckerV2.cpp	/^static inline SVal getValue(SVal val, SValBuilder &svalBuilder) {$/;"	f	file:
getValue	Checkers/BasicObjCFoundationChecks.cpp	/^    const T& getValue() const {$/;"	f	class:__anon107::Optional
getValue	Core/BasicValueFactory.cpp	/^const llvm::APSInt& BasicValueFactory::getValue(const llvm::APInt& X,$/;"	f	class:BasicValueFactory
getValue	Core/BasicValueFactory.cpp	/^const llvm::APSInt& BasicValueFactory::getValue(const llvm::APSInt& X) {$/;"	f	class:BasicValueFactory
getValue	Core/BasicValueFactory.cpp	/^const llvm::APSInt& BasicValueFactory::getValue(uint64_t X, QualType T) {$/;"	f	class:BasicValueFactory
getValue	Core/BasicValueFactory.cpp	/^const llvm::APSInt& BasicValueFactory::getValue(uint64_t X, unsigned BitWidth,$/;"	f	class:BasicValueFactory
getValueType	Core/MemRegion.cpp	/^QualType CXXBaseObjectRegion::getValueType() const {$/;"	f	class:CXXBaseObjectRegion
getVarRegion	Core/MemRegion.cpp	/^const VarRegion *MemRegionManager::getVarRegion(const VarDecl *D,$/;"	f	class:MemRegionManager
getVarRegion	Core/MemRegion.cpp	/^const VarRegion* MemRegionManager::getVarRegion(const VarDecl *D,$/;"	f	class:MemRegionManager
getVector	Core/ExplodedGraph.cpp	/^static inline BumpVector<ExplodedNode*>& getVector(void* P) {$/;"	f	file:
handleAssign	Checkers/IteratorsChecker.cpp	/^const GRState *IteratorsChecker::handleAssign(const GRState *state,$/;"	f	class:IteratorsChecker
hasConjuredSymbol	Core/SVals.cpp	/^bool SVal::hasConjuredSymbol() const {$/;"	f	class:SVal
hasFlag	Checkers/NSErrorChecker.cpp	/^static bool hasFlag(SVal val, const GRState *state) {$/;"	f	file:
hasGlobalsOrParametersStorage	Core/MemRegion.cpp	/^bool MemRegion::hasGlobalsOrParametersStorage() const {$/;"	f	class:MemRegion
hasPathSensitiveCheckers	Core/CheckerManager.cpp	/^bool CheckerManager::hasPathSensitiveCheckers() const {$/;"	f	class:CheckerManager
hasSelfFlag	Checkers/ObjCSelfInitChecker.cpp	/^static bool hasSelfFlag(SVal val, SelfFlagEnum flag, CheckerContext &C) {$/;"	f	file:
hasStackNonParametersStorage	Core/MemRegion.cpp	/^bool MemRegion::hasStackNonParametersStorage() const {$/;"	f	class:MemRegion
hasStackParametersStorage	Core/MemRegion.cpp	/^bool MemRegion::hasStackParametersStorage() const {$/;"	f	class:MemRegion
hasStackStorage	Core/MemRegion.cpp	/^bool MemRegion::hasStackStorage() const {$/;"	f	class:MemRegion
hasWork	Core/CoreEngine.cpp	/^    virtual bool hasWork() const {$/;"	f	class:__anon28::BFSBlockDFSContents
hasWork	Core/CoreEngine.cpp	/^  virtual bool hasWork() const {$/;"	f	class:__anon27::BFS
hasWork	Core/CoreEngine.cpp	/^  virtual bool hasWork() const {$/;"	f	class:__anon27::DFS
hash	Checkers/IdempotentOperationChecker.cpp	/^  mutable AssumptionMap hash;$/;"	m	class:__anon65::IdempotentOperationChecker	file:
includeGlobals	Core/RegionStore.cpp	/^  const bool includeGlobals;$/;"	m	class:__anon33::ClusterAnalysis	file:
incrementReferenceCount	Core/RegionStore.cpp	/^  void incrementReferenceCount(Store store) {$/;"	f	class:__anon32::RegionStoreManager
index	Core/CFRefCount.cpp	/^  unsigned index;$/;"	m	class:__anon10::RetEffect	file:
initWithObjectsAndKeysS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector initWithObjectsAndKeysS;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
initWithObjectsS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector initWithObjectsS;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
invalidateIterators	Checkers/IteratorsChecker.cpp	/^const GRState *IteratorsChecker::invalidateIterators(const GRState *state,$/;"	f	class:IteratorsChecker
invalidateRegion	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::invalidateRegion(Store store,$/;"	f	class:BasicStoreManager
invalidateRegions	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::invalidateRegions(Store store,$/;"	f	class:BasicStoreManager
invalidateRegions	Core/FlatStore.cpp	/^StoreRef FlatStoreManager::invalidateRegions(Store store,$/;"	f	class:FlatStoreManager
invalidateRegions	Core/GRState.cpp	/^const GRState *GRState::invalidateRegions(const MemRegion * const *Begin,$/;"	f	class:GRState
invalidateRegions	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::invalidateRegions(Store store,$/;"	f	class:RegionStoreManager
invalidateRegionsWorker	Core/RegionStore.cpp	/^  invalidateRegionsWorker(RegionStoreManager &rm,$/;"	f	class:__anon34::invalidateRegionsWorker
invalidateRegionsWorker	Core/RegionStore.cpp	/^class invalidateRegionsWorker : public ClusterAnalysis<invalidateRegionsWorker>$/;"	c	namespace:__anon34	file:
isAllocated	Checkers/MallocChecker.cpp	/^  bool isAllocated() const { return K == AllocateUnchecked; }$/;"	f	class:__anon98::RefState
isArc4RandomAvailable	Checkers/CheckSecuritySyntaxOnly.cpp	/^static bool isArc4RandomAvailable(const ASTContext &Ctx) {$/;"	f	file:
isBlockExprInCallers	Core/Environment.cpp	/^static bool isBlockExprInCallers(const Stmt *E, const LocationContext *LC) {$/;"	f	file:
isClosed	Checkers/StreamChecker.cpp	/^  bool isClosed() const { return K == Closed; }$/;"	f	struct:__anon113::StreamState
isConstant	Core/SVals.cpp	/^bool SVal::isConstant() const {$/;"	f	class:SVal
isConstant	Core/SVals.cpp	/^bool SVal::isConstant(int I) const {$/;"	f	class:SVal
isConstantOrPseudoConstant	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::isConstantOrPseudoConstant($/;"	f	class:IdempotentOperationChecker
isDead	Core/BugReporter.cpp	/^  bool isDead() const { return IsDead; }$/;"	f	class:__anon43::ContextLocation
isDirect	Core/RegionStore.cpp	/^  bool isDirect() const { return P.getInt() == Direct; }$/;"	f	class:__anon30::BindingKey
isEmpty	Core/RangeConstraintManager.cpp	/^  bool isEmpty() const { return ranges.isEmpty(); }$/;"	f	class:__anon38::RangeSet
isEmptyCFGBlock	Checkers/UnreachableCodeChecker.cpp	/^bool UnreachableCodeChecker::isEmptyCFGBlock(const CFGBlock *CB) {$/;"	f	class:UnreachableCodeChecker
isEndPath	Core/CFRefCount.cpp	/^  bool isEndPath() const { return EndPath; }$/;"	f	class:__anon11::RetainSummary
isEqual	Core/BasicConstraintManager.cpp	/^bool BasicConstraintManager::isEqual(const GRState* state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
isEqual	Core/CFRefCount.cpp	/^  static bool isEqual(const ObjCSummaryKey& LHS, const ObjCSummaryKey& RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	Core/RangeConstraintManager.cpp	/^  bool isEqual(const GRState* St, SymbolRef sym, const llvm::APSInt& V) const {$/;"	f	class:__anon39::RangeConstraintManager
isGCEnabled	Core/CFRefCount.cpp	/^  bool isGCEnabled() const { return GCEnabled; }$/;"	f	class:__anon14::RetainSummaryManager
isGCEnabled	Core/CFRefCount.cpp	/^  bool isGCEnabled() const { return Summaries.isGCEnabled(); }$/;"	f	class:__anon17::CFRefCount
isHigherOrderRawPtr	Core/BasicStore.cpp	/^static bool isHigherOrderRawPtr(QualType T, ASTContext &C) {$/;"	f	file:
isIncrement	Checkers/DeadStoresChecker.cpp	/^  bool isIncrement(VarDecl* VD, BinaryOperator* B) {$/;"	f	class:__anon75::DeadStoreObs
isInitMessage	Checkers/ObjCSelfInitChecker.cpp	/^static bool isInitMessage(const ObjCMessage &msg) {$/;"	f	file:
isInitializationMethod	Checkers/ObjCSelfInitChecker.cpp	/^static bool isInitializationMethod(const ObjCMethodDecl *MD) {$/;"	f	file:
isInvalid	Checkers/IteratorsChecker.cpp	/^  bool isInvalid() const { return K == Invalid; }$/;"	f	class:__anon100::RefState
isInvalidPath	Checkers/UnreachableCodeChecker.cpp	/^bool UnreachableCodeChecker::isInvalidPath(const CFGBlock *CB,$/;"	f	class:UnreachableCodeChecker
isInvalidSelf	Checkers/ObjCSelfInitChecker.cpp	/^static bool isInvalidSelf(const Expr *E, CheckerContext &C) {$/;"	f	file:
isKnown	Checkers/BasicObjCFoundationChecks.cpp	/^    bool isKnown() const { return IsKnown; }$/;"	f	class:__anon107::Optional
isLeak	Core/CFRefCount.cpp	/^    bool isLeak() const { return true; }$/;"	f	class:__anon18::Leak
isLeak	Core/CFRefCount.cpp	/^    virtual bool isLeak() const { return false; }$/;"	f	class:__anon18::CFRefBug
isLess	Core/RangeConstraintManager.cpp	/^  static inline bool isLess(key_type_ref lhs, key_type_ref rhs) {$/;"	f	class:__anon38::RangeTrait
isLive	Core/SymbolManager.cpp	/^bool SymbolReaper::isLive(SymbolRef sym) {$/;"	f	class:SymbolReaper
isLive	Core/SymbolManager.cpp	/^bool SymbolReaper::isLive(const Stmt* ExprVal) const {$/;"	f	class:SymbolReaper
isLive	Core/SymbolManager.cpp	/^bool SymbolReaper::isLive(const VarRegion *VR) const {$/;"	f	class:SymbolReaper
isNil	Checkers/BasicObjCFoundationChecks.cpp	/^static inline bool isNil(SVal X) {$/;"	f	file:
isNotEqual	Core/BasicConstraintManager.cpp	/^bool BasicConstraintManager::isNotEqual(const GRState* state, SymbolRef sym,$/;"	f	class:BasicConstraintManager
isNotOwned	Core/CFRefCount.cpp	/^  bool isNotOwned() const {$/;"	f	class:__anon10::RefVal
isOpened	Checkers/StreamChecker.cpp	/^  bool isOpened() const { return K == Opened; }$/;"	f	struct:__anon113::StreamState
isOwned	Core/CFRefCount.cpp	/^  bool isOwned() const {$/;"	f	class:__anon10::RefVal
isOwned	Core/CFRefCount.cpp	/^  bool isOwned() const {$/;"	f	class:__anon10::RetEffect
isPodLike	Core/CFRefCount.cpp	/^struct isPodLike<ObjCSummaryKey> { static const bool value = true; };$/;"	s	namespace:llvm	file:
isReachable	Checkers/DeadStoresChecker.cpp	/^  bool isReachable(const CFGBlock *block) const {$/;"	f	class:__anon74::ReachableCode
isReceiverClassOrSuperclass	Checkers/BasicObjCFoundationChecks.cpp	/^static bool isReceiverClassOrSuperclass(const ObjCInterfaceDecl *ID,$/;"	f	file:
isRelease	Core/CFRefCount.cpp	/^static bool isRelease(const FunctionDecl* FD, StringRef FName) {$/;"	f	file:
isReleased	Checkers/MallocChecker.cpp	/^  bool isReleased() const { return K == Released; }$/;"	f	class:__anon98::RefState
isRetain	Core/CFRefCount.cpp	/^static bool isRetain(const FunctionDecl* FD, StringRef FName) {$/;"	f	file:
isReturn	Core/CFRefCount.cpp	/^    const bool isReturn;$/;"	m	class:__anon18::Leak	file:
isReturnedNotOwned	Core/CFRefCount.cpp	/^  bool isReturnedNotOwned() const {$/;"	f	class:__anon10::RefVal
isReturnedOwned	Core/CFRefCount.cpp	/^  bool isReturnedOwned() const {$/;"	f	class:__anon10::RefVal
isRootChanged	Checkers/ChrootChecker.cpp	/^bool isRootChanged(intptr_t k) { return k == ROOT_CHANGED; }$/;"	f	namespace:__anon80
isSatisfied	Core/BugReporterVisitors.cpp	/^  bool isSatisfied;$/;"	m	class:__anon51::TrackConstraintBRVisitor	file:
isSelfAssign	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::isSelfAssign(const Expr *LHS, const Expr *RHS) {$/;"	f	class:IdempotentOperationChecker
isSelfVar	Checkers/ObjCSelfInitChecker.cpp	/^static bool isSelfVar(SVal location, CheckerContext &C) {$/;"	f	file:
isSubRegionOf	Core/MemRegion.cpp	/^bool SubRegion::isSubRegionOf(const MemRegion* R) const {$/;"	f	class:SubRegion
isTruncationExtensionAssignment	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::isTruncationExtensionAssignment($/;"	f	class:IdempotentOperationChecker
isUndefined	Checkers/IteratorsChecker.cpp	/^  bool isUndefined() const { return K == Undefined; }$/;"	f	class:__anon100::RefState
isUnknown	Checkers/IteratorsChecker.cpp	/^  bool isUnknown() const { return K == Unknown; }$/;"	f	class:__anon100::RefState
isUnused	Checkers/IdempotentOperationChecker.cpp	/^bool IdempotentOperationChecker::isUnused(const Expr *E,$/;"	f	class:IdempotentOperationChecker
isValid	Checkers/IteratorsChecker.cpp	/^  bool isValid() const { return K == BeginValid || K == EndValid; }$/;"	f	class:__anon100::RefState
isValid	Core/CFRefCount.cpp	/^  bool isValid() const {$/;"	f	class:__anon8::InstanceReceiver
isValid	Core/RegionStore.cpp	/^  bool isValid() const {$/;"	f	class:__anon30::BindingKey
isVariadicMessage	Checkers/BasicObjCFoundationChecks.cpp	/^VariadicMethodTypeChecker::isVariadicMessage(const ObjCMessage &msg) const {$/;"	f	class:VariadicMethodTypeChecker
isVisited	Core/RegionStore.cpp	/^  bool isVisited(const MemRegion *R) {$/;"	f	class:__anon33::ClusterAnalysis
isZeroConstant	Core/SVals.cpp	/^bool SVal::isZeroConstant() const {$/;"	f	class:SVal
iterBindings	Core/BasicStore.cpp	/^void BasicStoreManager::iterBindings(Store store, BindingsHandler& f) {$/;"	f	class:BasicStoreManager
iterBindings	Core/FlatStore.cpp	/^void FlatStoreManager::iterBindings(Store store, BindingsHandler& f) {$/;"	f	class:FlatStoreManager
iterBindings	Core/RegionStore.cpp	/^  void iterBindings(Store store, BindingsHandler& f) {$/;"	f	class:__anon32::RegionStoreManager
iterSubRegions	Core/BasicStore.cpp	/^  bool iterSubRegions(const MemRegion* R, Visitor& V) const {$/;"	f	class:__anon55::BasicStoreSubRegionMap
iterSubRegions	Core/RegionStore.cpp	/^  bool iterSubRegions(const MemRegion* Parent, Visitor& V) const {$/;"	f	class:__anon32::RegionStoreSubRegionMap
iterator	Core/BugReporter.cpp	/^  typedef std::vector<ContextLocation>::iterator iterator;$/;"	t	class:__anon43::EdgeBuilder	file:
iterator	Core/RangeConstraintManager.cpp	/^  typedef PrimRangeSet::iterator iterator;$/;"	t	class:__anon38::RangeSet	file:
kCFNumberCFIndexType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberCFIndexType = 14,$/;"	e	enum:CFNumberType	file:
kCFNumberCGFloatType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberCGFloatType = 16$/;"	e	enum:CFNumberType	file:
kCFNumberCharType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberCharType = 7,$/;"	e	enum:CFNumberType	file:
kCFNumberDoubleType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberDoubleType = 13,$/;"	e	enum:CFNumberType	file:
kCFNumberFloat32Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberFloat32Type = 5,$/;"	e	enum:CFNumberType	file:
kCFNumberFloat64Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberFloat64Type = 6,$/;"	e	enum:CFNumberType	file:
kCFNumberFloatType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberFloatType = 12,$/;"	e	enum:CFNumberType	file:
kCFNumberIntType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberIntType = 9,$/;"	e	enum:CFNumberType	file:
kCFNumberLongLongType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberLongLongType = 11,$/;"	e	enum:CFNumberType	file:
kCFNumberLongType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberLongType = 10,$/;"	e	enum:CFNumberType	file:
kCFNumberNSIntegerType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberNSIntegerType = 15,$/;"	e	enum:CFNumberType	file:
kCFNumberSInt16Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberSInt16Type = 2,$/;"	e	enum:CFNumberType	file:
kCFNumberSInt32Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberSInt32Type = 3,$/;"	e	enum:CFNumberType	file:
kCFNumberSInt64Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberSInt64Type = 4,$/;"	e	enum:CFNumberType	file:
kCFNumberSInt8Type	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberSInt8Type = 1,$/;"	e	enum:CFNumberType	file:
kCFNumberShortType	Checkers/BasicObjCFoundationChecks.cpp	/^  kCFNumberShortType = 8,$/;"	e	enum:CFNumberType	file:
kind	Core/CFRefCount.cpp	/^  Kind kind;$/;"	m	class:__anon10::RefVal	file:
leakAtReturn	Core/CFRefCount.cpp	/^  BugType *leakWithinFunction, *leakAtReturn;$/;"	m	class:__anon17::CFRefCount	file:
leakWithinFunction	Core/CFRefCount.cpp	/^  BugType *leakWithinFunction, *leakAtReturn;$/;"	m	class:__anon17::CFRefCount	file:
llvm	Core/BasicValueFactory.cpp	/^namespace llvm {$/;"	n	file:
llvm	Core/CFRefCount.cpp	/^namespace llvm {$/;"	n	file:
llvm	Core/ExprEngine.cpp	/^namespace llvm {$/;"	n	file:
llvm	Core/RegionStore.cpp	/^namespace llvm {$/;"	n	file:
lookup	Core/RegionStore.cpp	/^const SVal *RegionStoreManager::lookup(RegionBindings B, BindingKey K) {$/;"	f	class:RegionStoreManager
lookup	Core/RegionStore.cpp	/^const SVal *RegionStoreManager::lookup(RegionBindings B,$/;"	f	class:RegionStoreManager
lookupExpr	Core/Environment.cpp	/^SVal Environment::lookupExpr(const Stmt* E) const {$/;"	f	class:Environment
makeBFS	Core/CoreEngine.cpp	/^WorkList *WorkList::makeBFS() { return new BFS(); }$/;"	f	class:WorkList
makeBFSBlockDFSContents	Core/CoreEngine.cpp	/^WorkList* WorkList::makeBFSBlockDFSContents() {$/;"	f	class:WorkList
makeDFS	Core/CoreEngine.cpp	/^WorkList *WorkList::makeDFS() { return new DFS(); }$/;"	f	class:WorkList
makeNonLoc	Core/SValBuilder.cpp	/^NonLoc SValBuilder::makeNonLoc(const SymExpr *lhs, BinaryOperator::Opcode op,$/;"	f	class:SValBuilder
makeNotOwned	Core/CFRefCount.cpp	/^  static RefVal makeNotOwned(RetEffect::ObjKind o, QualType t,$/;"	f	class:__anon10::RefVal
makeOwned	Core/CFRefCount.cpp	/^  static RefVal makeOwned(RetEffect::ObjKind o, QualType t,$/;"	f	class:__anon10::RefVal
makeWithStore	Core/GRState.cpp	/^const GRState* GRState::makeWithStore(const StoreRef &store) const {$/;"	f	class:GRState
makeZeroVal	Core/SValBuilder.cpp	/^DefinedOrUnknownSVal SValBuilder::makeZeroVal(QualType type) {$/;"	f	class:SValBuilder
markDead	Core/BugReporter.cpp	/^  void markDead() { IsDead = true; }$/;"	f	class:__anon43::ContextLocation
markInUse	Core/SymbolManager.cpp	/^void SymbolReaper::markInUse(SymbolRef sym) {$/;"	f	class:SymbolReaper
markLive	Core/SymbolManager.cpp	/^void SymbolReaper::markLive(SymbolRef sym) {$/;"	f	class:SymbolReaper
maximal_features_tag	Core/RegionStore.cpp	/^struct maximal_features_tag {};$/;"	s	namespace:__anon31	file:
maybeDead	Core/SymbolManager.cpp	/^bool SymbolReaper::maybeDead(SymbolRef sym) {$/;"	f	class:SymbolReaper
minimal_features_tag	Core/RegionStore.cpp	/^struct minimal_features_tag {};$/;"	s	namespace:__anon31	file:
noDir	Core/HTMLDiagnostics.cpp	/^  bool createdDir, noDir;$/;"	m	class:__anon29::HTMLDiagnostics	file:
num_rands	Checkers/CheckSecuritySyntaxOnly.cpp	/^  enum { num_rands = 9 };$/;"	e	enum:__anon122::WalkAST::__anon123	file:
num_setids	Checkers/CheckSecuritySyntaxOnly.cpp	/^  enum { num_setids = 6 };$/;"	e	enum:__anon122::WalkAST::__anon124	file:
okind	Core/CFRefCount.cpp	/^  RetEffect::ObjKind okind;$/;"	m	class:__anon10::RefVal	file:
operator !=	Core/SVals.cpp	/^bool SVal::symbol_iterator::operator!=(const symbol_iterator &X) const {$/;"	f	class:SVal::symbol_iterator
operator ()	Core/PlistDiagnostics.cpp	/^  bool operator()(const PathDiagnostic *X, const PathDiagnostic *Y) const {$/;"	f	struct:__anon6::CompareDiagnostics
operator *	Core/SVals.cpp	/^SymbolRef SVal::symbol_iterator::operator*() {$/;"	f	class:SVal::symbol_iterator
operator +	Core/CFRefCount.cpp	/^  RefVal operator+(size_t i) const {$/;"	f	class:__anon10::RefVal
operator ++	Core/SVals.cpp	/^SVal::symbol_iterator& SVal::symbol_iterator::operator++() {$/;"	f	class:SVal::symbol_iterator
operator -	Core/CFRefCount.cpp	/^  RefVal operator-(size_t i) const {$/;"	f	class:__anon10::RefVal
operator <	Core/BlockCounter.cpp	/^  bool operator<(const CountKey &RHS) const {$/;"	f	class:__anon36::CountKey
operator <	Core/RegionStore.cpp	/^  bool operator<(const BindingKey &X) const {$/;"	f	class:__anon30::BindingKey
operator <<	Core/RegionStore.cpp	/^  llvm::raw_ostream& operator<<(llvm::raw_ostream& os, BindingKey K) {$/;"	f	namespace:llvm	file:
operator ==	Checkers/IteratorsChecker.cpp	/^  bool operator==(const RefState &X) const {$/;"	f	class:__anon100::RefState
operator ==	Checkers/MallocChecker.cpp	/^  bool operator==(const RefState &X) const {$/;"	f	class:__anon98::RefState
operator ==	Checkers/StreamChecker.cpp	/^  bool operator==(const StreamState &X) const {$/;"	f	struct:__anon113::StreamState
operator ==	Core/BlockCounter.cpp	/^  bool operator==(const CountKey &RHS) const {$/;"	f	class:__anon36::CountKey
operator ==	Core/CFRefCount.cpp	/^  bool operator==(const RefVal& X) const {$/;"	f	class:__anon10::RefVal
operator ==	Core/RangeConstraintManager.cpp	/^  bool operator==(const RangeSet &other) const {$/;"	f	class:__anon38::RangeSet
operator ==	Core/RegionStore.cpp	/^  bool operator==(const BindingKey &X) const {$/;"	f	class:__anon30::BindingKey
operator ==	Core/SVals.cpp	/^bool SVal::symbol_iterator::operator==(const symbol_iterator &X) const {$/;"	f	class:SVal::symbol_iterator
operator []	Core/CFRefCount.cpp	/^  RetainSummary*& operator[](ObjCSummaryKey K) {$/;"	f	class:__anon13::ObjCSummaryCache
operator []	Core/CFRefCount.cpp	/^  RetainSummary*& operator[](Selector S) {$/;"	f	class:__anon13::ObjCSummaryCache
operator ^	Core/CFRefCount.cpp	/^  RefVal operator^(Kind k) const {$/;"	f	class:__anon10::RefVal
operator bool	Core/CFRefCount.cpp	/^    operator bool() { return First && Binding; }$/;"	f	class:__anon19::FindUniqueBinding
operator bool	Core/CFRefCount.cpp	/^  operator bool() const {$/;"	f	class:__anon8::InstanceReceiver
operator const T&	Checkers/BasicObjCFoundationChecks.cpp	/^    operator const T&() const {$/;"	f	class:__anon107::Optional
overAutorelease	Core/CFRefCount.cpp	/^  BugType *overAutorelease;$/;"	m	class:__anon17::CFRefCount	file:
parameterTypeFromSVal	Checkers/NSErrorChecker.cpp	/^static QualType parameterTypeFromSVal(SVal val, CheckerContext &C) {$/;"	f	file:
pathWasCompletelyAnalyzed	Checkers/IdempotentOperationChecker.cpp	/^IdempotentOperationChecker::pathWasCompletelyAnalyzed(AnalysisContext *AC,$/;"	f	class:IdempotentOperationChecker
popLocation	Core/BugReporter.cpp	/^  void popLocation() {$/;"	f	class:__anon43::EdgeBuilder	file:
print	Core/BasicConstraintManager.cpp	/^void BasicConstraintManager::print(const GRState* state, llvm::raw_ostream& Out,$/;"	f	class:BasicConstraintManager
print	Core/BasicStore.cpp	/^void BasicStoreManager::print(Store store, llvm::raw_ostream& Out,$/;"	f	class:BasicStoreManager
print	Core/CFRefCount.cpp	/^void RefVal::print(llvm::raw_ostream& Out) const {$/;"	f	class:__anon10::RefVal
print	Core/FlatStore.cpp	/^void FlatStoreManager::print(Store store, llvm::raw_ostream& Out, $/;"	f	class:FlatStoreManager
print	Core/GRState.cpp	/^void GRState::print(llvm::raw_ostream& Out, CFG &C, const char* nl,$/;"	f	class:GRState
print	Core/RangeConstraintManager.cpp	/^  void print(llvm::raw_ostream &os) const {$/;"	f	class:__anon38::RangeSet
print	Core/RangeConstraintManager.cpp	/^void RangeConstraintManager::print(const GRState* St, llvm::raw_ostream& Out,$/;"	f	class:RangeConstraintManager
print	Core/RegionStore.cpp	/^void RegionStoreManager::print(Store store, llvm::raw_ostream& OS,$/;"	f	class:RegionStoreManager
print	Core/SymbolManager.cpp	/^static void print(llvm::raw_ostream& os, BinaryOperator::Opcode Op) {$/;"	f	file:
printCheckerHelp	Frontend/CheckerRegistration.cpp	/^void ento::printCheckerHelp(llvm::raw_ostream &OS) {$/;"	f	class:ento
printCheckerOption	Checkers/ClangSACheckerProvider.cpp	/^static void printCheckerOption(llvm::raw_ostream &OS,SortedCheckers &checkers) {$/;"	f	file:
printDOT	Core/GRState.cpp	/^void GRState::printDOT(llvm::raw_ostream& Out, CFG &C) const {$/;"	f	class:GRState
printHelp	Checkers/ClangSACheckerProvider.cpp	/^void ClangSACheckerProvider::printHelp(llvm::raw_ostream &OS) {$/;"	f	class:ClangSACheckerProvider
printPackageOption	Checkers/ClangSACheckerProvider.cpp	/^static void printPackageOption(llvm::raw_ostream &OS) {$/;"	f	file:
printStdErr	Core/GRState.cpp	/^void GRState::printStdErr(CFG &C) const {$/;"	f	class:GRState
process	Core/RegionStore.cpp	/^RegionStoreSubRegionMap::process(llvm::SmallVectorImpl<const SubRegion*> &WL,$/;"	f	class:__anon32::RegionStoreSubRegionMap
processAssume	Core/ExprEngine.cpp	/^const GRState *ExprEngine::processAssume(const GRState *state, SVal cond,$/;"	f	class:ExprEngine
processBranch	Core/ExprEngine.cpp	/^void ExprEngine::processBranch(const Stmt* Condition, const Stmt* Term,$/;"	f	class:ExprEngine
processCFGBlockEntrance	Core/ExprEngine.cpp	/^void ExprEngine::processCFGBlockEntrance(ExplodedNodeSet &dstNodes,$/;"	f	class:ExprEngine
processCFGElement	Core/ExprEngine.cpp	/^void ExprEngine::processCFGElement(const CFGElement E, $/;"	f	class:ExprEngine
processCallEnter	Core/ExprEngine.cpp	/^void ExprEngine::processCallEnter(CallEnterNodeBuilder &B) {$/;"	f	class:ExprEngine
processCallExit	Core/ExprEngine.cpp	/^void ExprEngine::processCallExit(CallExitNodeBuilder &B) {$/;"	f	class:ExprEngine
processEndOfFunction	Core/ExprEngine.cpp	/^void ExprEngine::processEndOfFunction(EndOfFunctionNodeBuilder& builder) {$/;"	f	class:ExprEngine
processEndWorklist	Core/ExprEngine.cpp	/^void ExprEngine::processEndWorklist(bool hasWorkRemaining) {$/;"	f	class:ExprEngine
processIndirectGoto	Core/ExprEngine.cpp	/^void ExprEngine::processIndirectGoto(IndirectGotoNodeBuilder &builder) {$/;"	f	class:ExprEngine
processRegionChanges	Core/ExprEngine.cpp	/^ExprEngine::processRegionChanges(const GRState *state,$/;"	f	class:ExprEngine
processSwitch	Core/ExprEngine.cpp	/^void ExprEngine::processSwitch(SwitchNodeBuilder& builder) {$/;"	f	class:ExprEngine
ranges	Core/RangeConstraintManager.cpp	/^  PrimRangeSet ranges; \/\/ no need to make const, since it is an$/;"	m	class:__anon38::RangeSet	file:
rawAddEdge	Core/BugReporter.cpp	/^void EdgeBuilder::rawAddEdge(PathDiagnosticLocation NewLoc) {$/;"	f	class:EdgeBuilder
reachable	Checkers/DeadStoresChecker.cpp	/^  llvm::BitVector reachable;$/;"	m	class:__anon74::ReachableCode	file:
reachableCode	Checkers/DeadStoresChecker.cpp	/^  llvm::OwningPtr<ReachableCode> reachableCode;$/;"	m	class:__anon75::DeadStoreObs	file:
reclaimRecentlyAllocatedNodes	Core/ExplodedGraph.cpp	/^void ExplodedGraph::reclaimRecentlyAllocatedNodes() {$/;"	f	class:ExplodedGraph
recycleUnusedStates	Core/GRState.cpp	/^void GRStateManager::recycleUnusedStates() {$/;"	f	class:GRStateManager
referenced_vars_begin	Core/MemRegion.cpp	/^BlockDataRegion::referenced_vars_begin() const {$/;"	f	class:BlockDataRegion
referenced_vars_end	Core/MemRegion.cpp	/^BlockDataRegion::referenced_vars_end() const {$/;"	f	class:BlockDataRegion
registerAdjustedReturnValueChecker	Checkers/AdjustedReturnValueChecker.cpp	/^void ento::registerAdjustedReturnValueChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerAnalyzerStatsChecker	Checkers/AnalyzerStatsChecker.cpp	/^void ento::registerAnalyzerStatsChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerArrayBoundChecker	Checkers/ArrayBoundChecker.cpp	/^void ento::registerArrayBoundChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerArrayBoundCheckerV2	Checkers/ArrayBoundCheckerV2.cpp	/^void ento::registerArrayBoundCheckerV2(CheckerManager &mgr) {$/;"	f	class:ento
registerAttrNonNullChecker	Checkers/AttrNonNullChecker.cpp	/^void ento::registerAttrNonNullChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerBuiltinFunctionChecker	Checkers/BuiltinFunctionChecker.cpp	/^void ento::registerBuiltinFunctionChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCFErrorChecker	Checkers/NSErrorChecker.cpp	/^void ento::registerCFErrorChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCFGDumper	Checkers/DebugCheckers.cpp	/^void ento::registerCFGDumper(CheckerManager &mgr) {$/;"	f	class:ento
registerCFGViewer	Checkers/DebugCheckers.cpp	/^void ento::registerCFGViewer(CheckerManager &mgr) {$/;"	f	class:ento
registerCFNumberCreateChecker	Checkers/BasicObjCFoundationChecks.cpp	/^void ento::registerCFNumberCreateChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCFRetainReleaseChecker	Checkers/BasicObjCFoundationChecks.cpp	/^void ento::registerCFRetainReleaseChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCStringChecker	Checkers/CStringChecker.cpp	/^void ento::registerCStringChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCallAndMessageChecker	Checkers/CallAndMessageChecker.cpp	/^void ento::registerCallAndMessageChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCastSizeChecker	Checkers/CastSizeChecker.cpp	/^void ento::registerCastSizeChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCastToStructChecker	Checkers/CastToStructChecker.cpp	/^void ento::registerCastToStructChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerCheckers	Checkers/ClangSACheckerProvider.cpp	/^void ClangSACheckerProvider::registerCheckers(CheckerManager &checkerMgr,$/;"	f	class:ClangSACheckerProvider
registerCheckers	Frontend/CheckerRegistration.cpp	/^CheckerManager *ento::registerCheckers(const AnalyzerOptions &opts,$/;"	f	class:ento
registerChrootChecker	Checkers/ChrootChecker.cpp	/^void ento::registerChrootChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerClassReleaseChecker	Checkers/BasicObjCFoundationChecks.cpp	/^void ento::registerClassReleaseChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerDeadStoresChecker	Checkers/DeadStoresChecker.cpp	/^void ento::registerDeadStoresChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerDereferenceChecker	Checkers/DereferenceChecker.cpp	/^void ento::registerDereferenceChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerDivZeroChecker	Checkers/DivZeroChecker.cpp	/^void ento::registerDivZeroChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerFindLastStore	Core/BugReporterVisitors.cpp	/^static void registerFindLastStore(BugReporterContext& BRC, const MemRegion *R,$/;"	f	namespace:__anon51	file:
registerFindLastStore	Core/BugReporterVisitors.cpp	/^void bugreporter::registerFindLastStore(BugReporterContext& BRC,$/;"	f	class:bugreporter
registerFixedAddressChecker	Checkers/FixedAddressChecker.cpp	/^void ento::registerFixedAddressChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerIdempotentOperationChecker	Checkers/IdempotentOperationChecker.cpp	/^void ento::registerIdempotentOperationChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerIteratorsChecker	Checkers/IteratorsChecker.cpp	/^void ento::registerIteratorsChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerLLVMConventionsChecker	Checkers/LLVMConventionsChecker.cpp	/^void ento::registerLLVMConventionsChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerLiveVariablesDumper	Checkers/DebugCheckers.cpp	/^void ento::registerLiveVariablesDumper(CheckerManager &mgr) {$/;"	f	class:ento
registerMacOSXAPIChecker	Checkers/MacOSXAPIChecker.cpp	/^void ento::registerMacOSXAPIChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerMallocChecker	Checkers/MallocChecker.cpp	/^void ento::registerMallocChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerNSAutoreleasePoolChecker	Checkers/NSAutoreleasePoolChecker.cpp	/^void ento::registerNSAutoreleasePoolChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerNSErrorChecker	Checkers/NSErrorChecker.cpp	/^void ento::registerNSErrorChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerNilArgChecker	Checkers/BasicObjCFoundationChecks.cpp	/^void ento::registerNilArgChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerNilReceiverVisitor	Core/BugReporterVisitors.cpp	/^void bugreporter::registerNilReceiverVisitor(BugReporterContext &BRC) {$/;"	f	class:bugreporter
registerNoReturnFunctionChecker	Checkers/NoReturnFunctionChecker.cpp	/^void ento::registerNoReturnFunctionChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerOSAtomicChecker	Checkers/OSAtomicChecker.cpp	/^void ento::registerOSAtomicChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerObjCAtSyncChecker	Checkers/ObjCAtSyncChecker.cpp	/^void ento::registerObjCAtSyncChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerObjCDeallocChecker	Checkers/CheckObjCDealloc.cpp	/^void ento::registerObjCDeallocChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerObjCMethSigsChecker	Checkers/CheckObjCInstMethSignature.cpp	/^void ento::registerObjCMethSigsChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerObjCSelfInitChecker	Checkers/ObjCSelfInitChecker.cpp	/^void ento::registerObjCSelfInitChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerObjCUnusedIvarsChecker	Checkers/ObjCUnusedIVarsChecker.cpp	/^void ento::registerObjCUnusedIvarsChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerPointerArithChecker	Checkers/PointerArithChecker.cpp	/^void ento::registerPointerArithChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerPointerSubChecker	Checkers/PointerSubChecker.cpp	/^void ento::registerPointerSubChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerPthreadLockChecker	Checkers/PthreadLockChecker.cpp	/^void ento::registerPthreadLockChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerReturnPointerRangeChecker	Checkers/ReturnPointerRangeChecker.cpp	/^void ento::registerReturnPointerRangeChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerReturnUndefChecker	Checkers/ReturnUndefChecker.cpp	/^void ento::registerReturnUndefChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerSecuritySyntaxChecker	Checkers/CheckSecuritySyntaxOnly.cpp	/^void ento::registerSecuritySyntaxChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerSizeofPointerChecker	Checkers/CheckSizeofPointer.cpp	/^void ento::registerSizeofPointerChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerStackAddrEscapeChecker	Checkers/StackAddrEscapeChecker.cpp	/^void ento::registerStackAddrEscapeChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerStreamChecker	Checkers/StreamChecker.cpp	/^void ento::registerStreamChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerTrackConstraint	Core/BugReporterVisitors.cpp	/^static void registerTrackConstraint(BugReporterContext& BRC,$/;"	f	file:
registerTrackNullOrUndefValue	Core/BugReporterVisitors.cpp	/^void bugreporter::registerTrackNullOrUndefValue(BugReporterContext& BRC,$/;"	f	class:bugreporter
registerUndefBranchChecker	Checkers/UndefBranchChecker.cpp	/^void ento::registerUndefBranchChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUndefCapturedBlockVarChecker	Checkers/UndefCapturedBlockVarChecker.cpp	/^void ento::registerUndefCapturedBlockVarChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUndefResultChecker	Checkers/UndefResultChecker.cpp	/^void ento::registerUndefResultChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUndefinedArraySubscriptChecker	Checkers/UndefinedArraySubscriptChecker.cpp	/^void ento::registerUndefinedArraySubscriptChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUndefinedAssignmentChecker	Checkers/UndefinedAssignmentChecker.cpp	/^void ento::registerUndefinedAssignmentChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUnixAPIChecker	Checkers/UnixAPIChecker.cpp	/^void ento::registerUnixAPIChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerUnreachableCodeChecker	Checkers/UnreachableCodeChecker.cpp	/^void ento::registerUnreachableCodeChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerVLASizeChecker	Checkers/VLASizeChecker.cpp	/^void ento::registerVLASizeChecker(CheckerManager &mgr) {$/;"	f	class:ento
registerVarDeclsLastStore	Core/BugReporterVisitors.cpp	/^void bugreporter::registerVarDeclsLastStore(BugReporterContext &BRC,$/;"	f	class:bugreporter
registerVariadicMethodTypeChecker	Checkers/BasicObjCFoundationChecks.cpp	/^void ento::registerVariadicMethodTypeChecker(CheckerManager &mgr) {$/;"	f	class:ento
releaseNotOwned	Core/CFRefCount.cpp	/^  BugType *useAfterRelease, *releaseNotOwned;$/;"	m	class:__anon17::CFRefCount	file:
releaseS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector releaseS;$/;"	m	class:__anon109::ClassReleaseChecker	file:
releaseS	Checkers/NSAutoreleasePoolChecker.cpp	/^  mutable Selector releaseS;$/;"	m	class:__anon120::NSAutoreleasePoolChecker	file:
removeBinding	Core/RegionStore.cpp	/^  RegionBindings removeBinding(RegionBindings B, const MemRegion *R) {$/;"	f	class:__anon32::RegionStoreManager
removeBinding	Core/RegionStore.cpp	/^RegionBindings RegionStoreManager::removeBinding(RegionBindings B,$/;"	f	class:RegionStoreManager
removeDeadBindings	Core/BasicConstraintManager.cpp	/^BasicConstraintManager::removeDeadBindings(const GRState* state,$/;"	f	class:BasicConstraintManager
removeDeadBindings	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::removeDeadBindings(Store store,$/;"	f	class:BasicStoreManager
removeDeadBindings	Core/Environment.cpp	/^EnvironmentManager::removeDeadBindings(Environment Env,$/;"	f	class:EnvironmentManager
removeDeadBindings	Core/FlatStore.cpp	/^  StoreRef removeDeadBindings(Store store, const StackFrameContext *LCtx,$/;"	f	class:__anon23::FlatStoreManager
removeDeadBindings	Core/GRState.cpp	/^GRStateManager::removeDeadBindings(const GRState* state,$/;"	f	class:GRStateManager
removeDeadBindings	Core/RangeConstraintManager.cpp	/^RangeConstraintManager::removeDeadBindings(const GRState* state,$/;"	f	class:RangeConstraintManager
removeDeadBindings	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::removeDeadBindings(Store store,$/;"	f	class:RegionStoreManager
removeDeadBindingsWorker	Core/RegionStore.cpp	/^  removeDeadBindingsWorker(RegionStoreManager &rm, GRStateManager &stateMgr,$/;"	f	class:__anon35::removeDeadBindingsWorker
removeDeadBindingsWorker	Core/RegionStore.cpp	/^class removeDeadBindingsWorker :$/;"	c	namespace:__anon35	file:
removeGDM	Core/GRState.cpp	/^const GRState *GRStateManager::removeGDM(const GRState *state, void *Key) {$/;"	f	class:GRStateManager
replaceNode	Core/ExplodedGraph.cpp	/^void ExplodedNode::NodeGroup::replaceNode(ExplodedNode *node) {$/;"	f	class:ExplodedNode::NodeGroup
reportOOB	Checkers/ArrayBoundCheckerV2.cpp	/^void ArrayBoundCheckerV2::reportOOB(CheckerContext &checkerContext,$/;"	f	class:ArrayBoundCheckerV2
resetPath	Core/PathDiagnostic.cpp	/^void PathDiagnostic::resetPath(bool deletePieces) {$/;"	f	class:PathDiagnostic
retainS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector retainS;$/;"	m	class:__anon109::ClassReleaseChecker	file:
returnNotOwnedForOwned	Core/CFRefCount.cpp	/^  BugType *returnNotOwnedForOwned;$/;"	m	class:__anon17::CFRefCount	file:
run	Checkers/MacOSXAPIChecker.cpp	/^    void run(CheckerContext &C, const CallExpr *CE,$/;"	f	class:__anon127::SubCheck
run	Checkers/UnixAPIChecker.cpp	/^    void run(CheckerContext &C, const CallExpr *CE) const {$/;"	f	class:__anon137::SubCheck
runChecker	Core/CheckerManager.cpp	/^    void runChecker(CheckerManager::CheckBindFunc checkFn,$/;"	f	struct:__anon49::CheckBindContext
runChecker	Core/CheckerManager.cpp	/^    void runChecker(CheckerManager::CheckDeadSymbolsFunc checkFn,$/;"	f	struct:__anon50::CheckDeadSymbolsContext
runChecker	Core/CheckerManager.cpp	/^    void runChecker(CheckerManager::CheckLocationFunc checkFn,$/;"	f	struct:__anon48::CheckLocationContext
runChecker	Core/CheckerManager.cpp	/^    void runChecker(CheckerManager::CheckObjCMessageFunc checkFn,$/;"	f	struct:__anon47::CheckObjCMessageContext
runChecker	Core/CheckerManager.cpp	/^    void runChecker(CheckerManager::CheckStmtFunc checkFn,$/;"	f	struct:__anon46::CheckStmtContext
runCheckersForBind	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForBind(ExplodedNodeSet &Dst,$/;"	f	class:CheckerManager
runCheckersForBranchCondition	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForBranchCondition(const Stmt *condition,$/;"	f	class:CheckerManager
runCheckersForDeadSymbols	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForDeadSymbols(ExplodedNodeSet &Dst,$/;"	f	class:CheckerManager
runCheckersForEndAnalysis	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForEndAnalysis(ExplodedGraph &G,$/;"	f	class:CheckerManager
runCheckersForEndPath	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForEndPath(EndOfFunctionNodeBuilder &B,$/;"	f	class:CheckerManager
runCheckersForEvalAssume	Core/CheckerManager.cpp	/^CheckerManager::runCheckersForEvalAssume(const GRState *state,$/;"	f	class:CheckerManager
runCheckersForEvalCall	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForEvalCall(ExplodedNodeSet &Dst,$/;"	f	class:CheckerManager
runCheckersForLiveSymbols	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForLiveSymbols(const GRState *state,$/;"	f	class:CheckerManager
runCheckersForLocation	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForLocation(ExplodedNodeSet &Dst,$/;"	f	class:CheckerManager
runCheckersForObjCMessage	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForObjCMessage(bool isPreVisit,$/;"	f	class:CheckerManager
runCheckersForRegionChanges	Core/CheckerManager.cpp	/^CheckerManager::runCheckersForRegionChanges(const GRState *state,$/;"	f	class:CheckerManager
runCheckersForStmt	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersForStmt(bool isPreVisit,$/;"	f	class:CheckerManager
runCheckersOnASTBody	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersOnASTBody(const Decl *D, AnalysisManager& mgr,$/;"	f	class:CheckerManager
runCheckersOnASTDecl	Core/CheckerManager.cpp	/^void CheckerManager::runCheckersOnASTDecl(const Decl *D, AnalysisManager& mgr,$/;"	f	class:CheckerManager
satisfied	Core/BugReporterVisitors.cpp	/^  bool satisfied;$/;"	m	class:__anon51::FindLastStoreBRVisitor	file:
scaleValue	Checkers/ArrayBoundCheckerV2.cpp	/^static inline SVal scaleValue(const GRState *state,$/;"	f	file:
scan	Core/GRState.cpp	/^bool ScanReachableSymbols::scan(SVal val) {$/;"	f	class:ScanReachableSymbols
scan	Core/GRState.cpp	/^bool ScanReachableSymbols::scan(const MemRegion *R) {$/;"	f	class:ScanReachableSymbols
scan	Core/GRState.cpp	/^bool ScanReachableSymbols::scan(nonloc::CompoundVal val) {$/;"	f	class:ScanReachableSymbols
scanForIvars	Core/BasicStore.cpp	/^StoreRef BasicStoreManager::scanForIvars(Stmt *B, const Decl* SelfDecl,$/;"	f	class:BasicStoreManager
scanReachableSymbols	Core/GRState.cpp	/^bool GRState::scanReachableSymbols(SVal val, SymbolVisitor& visitor) const {$/;"	f	class:GRState
scanReachableSymbols	Core/GRState.cpp	/^bool GRState::scanReachableSymbols(const MemRegion * const *I,$/;"	f	class:GRState
scanReachableSymbols	Core/GRState.cpp	/^bool GRState::scanReachableSymbols(const SVal *I, const SVal *E,$/;"	f	class:GRState
scan_dealloc	Checkers/CheckObjCDealloc.cpp	/^static bool scan_dealloc(Stmt* S, Selector Dealloc) {$/;"	f	file:
scan_ivar_release	Checkers/CheckObjCDealloc.cpp	/^static bool scan_ivar_release(Stmt* S, ObjCIvarDecl* ID,$/;"	f	file:
setAutoreleaseCount	Core/CFRefCount.cpp	/^  void setAutoreleaseCount(unsigned i) { ACnt = i; }$/;"	f	class:__anon10::RefVal
setCStringLength	Checkers/CStringChecker.cpp	/^const GRState *CStringChecker::setCStringLength(const GRState *state,$/;"	f	class:CStringChecker
setCount	Core/CFRefCount.cpp	/^  void setCount(unsigned i) { Cnt = i; }$/;"	f	class:__anon10::RefVal
setDefaultArgEffect	Core/CFRefCount.cpp	/^  void setDefaultArgEffect(ArgEffect E) {$/;"	f	class:__anon11::RetainSummary
setFlag	Checkers/NSErrorChecker.cpp	/^static void setFlag(const GRState *state, SVal val, CheckerContext &C) {$/;"	f	file:
setImplicitDefaultValue	Core/RegionStore.cpp	/^StoreRef RegionStoreManager::setImplicitDefaultValue(Store store,$/;"	f	class:RegionStoreManager
setReceiverEffect	Core/CFRefCount.cpp	/^  void setReceiverEffect(ArgEffect e) { Receiver = e; }$/;"	f	class:__anon11::RetainSummary
setRetEffect	Core/CFRefCount.cpp	/^  void setRetEffect(RetEffect E) { Ret = E; }$/;"	f	class:__anon11::RetainSummary
setStore	Core/GRState.cpp	/^void GRState::setStore(const StoreRef &newStore) {$/;"	f	class:GRState
setWithObjectsS	Checkers/BasicObjCFoundationChecks.cpp	/^  mutable Selector setWithObjectsS;$/;"	m	class:__anon110::VariadicMethodTypeChecker	file:
shouldRunOnFunctionOrMethod	Checkers/ObjCSelfInitChecker.cpp	/^static bool shouldRunOnFunctionOrMethod(const NamedDecl *ND) {$/;"	f	file:
size	Core/ExplodedGraph.cpp	/^unsigned ExplodedNode::NodeGroup::size() const {$/;"	f	class:ExplodedNode::NodeGroup
state	Core/CFRefCount.cpp	/^  const GRState *state;$/;"	m	class:__anon20::StopTrackingCallback	file:
state	Core/GRState.cpp	/^  const GRState *state;$/;"	m	class:__anon53::ScanReachableSymbols	file:
stripCasts	Core/SVals.cpp	/^const MemRegion *loc::MemRegionVal::stripCasts() const {$/;"	f	class:loc::MemRegionVal
supportsAllBlockEdges	Core/PlistDiagnostics.cpp	/^    bool supportsAllBlockEdges() const { return true; }$/;"	f	class:__anon7::PlistDiagnostics
supportsAllBlockEdges	Core/TextPathDiagnostics.cpp	/^  bool supportsAllBlockEdges() const { return true; }$/;"	f	class:__anon22::TextPathDiagnostics
supportsFields	Core/RegionStore.cpp	/^  bool supportsFields() const { return SupportsFields; }$/;"	f	class:__anon31::RegionStoreFeatures
supportsLogicalOpControlFlow	Core/BugReporter.cpp	/^  bool supportsLogicalOpControlFlow() const {$/;"	f	class:__anon40::PathDiagnosticBuilder
supportsLogicalOpControlFlow	Core/PlistDiagnostics.cpp	/^    bool supportsLogicalOpControlFlow() const { return true; }$/;"	f	class:__anon7::PlistDiagnostics
supportsLogicalOpControlFlow	Core/TextPathDiagnostics.cpp	/^  bool supportsLogicalOpControlFlow() const { return true; }$/;"	f	class:__anon22::TextPathDiagnostics
supportsNilWithFloatRet	Checkers/CallAndMessageChecker.cpp	/^static bool supportsNilWithFloatRet(const llvm::Triple &triple) {$/;"	f	file:
svalBuilder	Core/RegionStore.cpp	/^  SValBuilder &svalBuilder;$/;"	m	class:__anon33::ClusterAnalysis	file:
symbol_iterator	Core/SVals.cpp	/^SVal::symbol_iterator::symbol_iterator(const SymExpr *SE) {$/;"	f	class:SVal::symbol_iterator
tag	Core/CFRefCount.cpp	/^  const void *tag;$/;"	m	class:__anon9::GenericNodeBuilderRefCount	file:
unbindLoc	Core/GRState.cpp	/^const GRState *GRState::unbindLoc(Loc LV) const {$/;"	f	class:GRState
updateSummaryFromAnnotations	Core/CFRefCount.cpp	/^RetainSummaryManager::updateSummaryFromAnnotations(RetainSummary &Summ,$/;"	f	class:RetainSummaryManager
useAfterRelease	Core/CFRefCount.cpp	/^  BugType *useAfterRelease, *releaseNotOwned;$/;"	m	class:__anon17::CFRefCount	file:
useVerboseDescription	Core/PlistDiagnostics.cpp	/^    virtual bool useVerboseDescription() const { return false; }$/;"	f	class:__anon7::PlistDiagnostics
useVerboseDescription	Core/TextPathDiagnostics.cpp	/^  virtual bool useVerboseDescription() const { return true; }$/;"	f	class:__anon22::TextPathDiagnostics
value	Core/CFRefCount.cpp	/^struct isPodLike<ObjCSummaryKey> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike	file:
visitItemsInWorkList	Core/CoreEngine.cpp	/^    virtual bool visitItemsInWorkList(Visitor &V) {$/;"	f	class:__anon28::BFSBlockDFSContents
visitItemsInWorkList	Core/CoreEngine.cpp	/^  virtual bool visitItemsInWorkList(Visitor &V) {$/;"	f	class:__anon27::BFS
visitItemsInWorkList	Core/CoreEngine.cpp	/^  virtual bool visitItemsInWorkList(Visitor &V) {$/;"	f	class:__anon27::DFS
visited	Core/GRState.cpp	/^  VisitedRegionsTy visited;$/;"	m	class:__anon53::ScanReachableSymbols	file:
visitor	Core/GRState.cpp	/^  SymbolVisitor &visitor;$/;"	m	class:__anon53::ScanReachableSymbols	file:
wantsRegionChangeUpdate	Checkers/CStringChecker.cpp	/^bool CStringChecker::wantsRegionChangeUpdate(const GRState *state) const {$/;"	f	class:CStringChecker
wantsRegionChangeUpdate	Core/CheckerManager.cpp	/^bool CheckerManager::wantsRegionChangeUpdate(const GRState *state) {$/;"	f	class:CheckerManager
wantsRegionChangeUpdate	Core/ExprEngine.cpp	/^bool ExprEngine::wantsRegionChangeUpdate(const GRState* state) {$/;"	f	class:ExprEngine
~Auditor	Core/ExplodedGraph.cpp	/^ExplodedNode::Auditor::~Auditor() {}$/;"	f	class:ExplodedNode::Auditor
~BasicStoreManager	Core/BasicStore.cpp	/^  ~BasicStoreManager() {}$/;"	f	class:__anon55::BasicStoreManager
~BasicValueFactory	Core/BasicValueFactory.cpp	/^BasicValueFactory::~BasicValueFactory() {$/;"	f	class:BasicValueFactory
~BindingsHandler	Core/BasicStore.cpp	/^StoreManager::BindingsHandler::~BindingsHandler() {}$/;"	f	class:StoreManager::BindingsHandler
~BranchNodeBuilder	Core/CoreEngine.cpp	/^BranchNodeBuilder::~BranchNodeBuilder() {$/;"	f	class:BranchNodeBuilder
~BugReport	Core/BugReporter.cpp	/^BugReport::~BugReport() {}$/;"	f	class:BugReport
~BugReportEquivClass	Core/BugReporter.cpp	/^BugReportEquivClass::~BugReportEquivClass() {$/;"	f	class:BugReportEquivClass
~BugReporter	Core/BugReporter.cpp	/^BugReporter::~BugReporter() { FlushReports(); }$/;"	f	class:BugReporter
~BugReporterContext	Core/BugReporter.cpp	/^BugReporterContext::~BugReporterContext() {$/;"	f	class:BugReporterContext
~BugReporterData	Core/BugReporter.cpp	/^BugReporterData::~BugReporterData() {}$/;"	f	class:BugReporterData
~BugReporterVisitor	Core/BugReporter.cpp	/^BugReporterVisitor::~BugReporterVisitor() {}$/;"	f	class:BugReporterVisitor
~BugType	Core/BugReporter.cpp	/^BugType::~BugType() { }$/;"	f	class:BugType
~CFRefCount	Core/CFRefCount.cpp	/^  virtual ~CFRefCount() {}$/;"	f	class:__anon17::CFRefCount
~CFRefReport	Core/CFRefCount.cpp	/^    virtual ~CFRefReport() {}$/;"	f	class:__anon18::CFRefReport
~CheckerContext	Core/CheckerContext.cpp	/^CheckerContext::~CheckerContext() {$/;"	f	class:CheckerContext
~CheckerManager	Core/CheckerManager.cpp	/^CheckerManager::~CheckerManager() {$/;"	f	class:CheckerManager
~CheckerProvider	Core/CheckerManager.cpp	/^CheckerProvider::~CheckerProvider() { }$/;"	f	class:CheckerProvider
~ConstraintManager	Core/GRState.cpp	/^ConstraintManager::~ConstraintManager() {}$/;"	f	class:ConstraintManager
~DeadStoreObs	Checkers/DeadStoresChecker.cpp	/^  virtual ~DeadStoreObs() {}$/;"	f	class:__anon75::DeadStoreObs
~EdgeBuilder	Core/BugReporter.cpp	/^  ~EdgeBuilder() {$/;"	f	class:__anon43::EdgeBuilder
~EndOfFunctionNodeBuilder	Core/CoreEngine.cpp	/^EndOfFunctionNodeBuilder::~EndOfFunctionNodeBuilder() {$/;"	f	class:EndOfFunctionNodeBuilder
~ExplodedGraph	Core/ExplodedGraph.cpp	/^ExplodedGraph::~ExplodedGraph() {$/;"	f	class:ExplodedGraph
~ExprEngine	Core/ExprEngine.cpp	/^ExprEngine::~ExprEngine() {$/;"	f	class:ExprEngine
~Factory	Core/BlockCounter.cpp	/^BlockCounter::Factory::~Factory() {$/;"	f	class:BlockCounter::Factory
~GRBugReporter	Core/BugReporter.cpp	/^GRBugReporter::~GRBugReporter() { }$/;"	f	class:GRBugReporter
~GRState	Core/GRState.cpp	/^GRState::~GRState() {$/;"	f	class:GRState
~GRStateManager	Core/GRState.cpp	/^GRStateManager::~GRStateManager() {$/;"	f	class:GRStateManager
~GraphExpander	Core/CheckerManager.cpp	/^GraphExpander::~GraphExpander() { }$/;"	f	class:GraphExpander
~HTMLDiagnostics	Core/HTMLDiagnostics.cpp	/^  virtual ~HTMLDiagnostics() { FlushDiagnostics(NULL); }$/;"	f	class:__anon29::HTMLDiagnostics
~MacOSXAPIChecker	Checkers/MacOSXAPIChecker.cpp	/^  ~MacOSXAPIChecker() {$/;"	f	class:__anon126::MacOSXAPIChecker
~MemRegion	Core/MemRegion.cpp	/^MemRegion::~MemRegion() {}$/;"	f	class:MemRegion
~MemRegionManager	Core/MemRegion.cpp	/^MemRegionManager::~MemRegionManager() {$/;"	f	class:MemRegionManager
~NodeMapClosure	Core/BugReporter.cpp	/^  ~NodeMapClosure() {}$/;"	f	class:__anon40::NodeMapClosure
~PathDiagnostic	Core/PathDiagnostic.cpp	/^PathDiagnostic::~PathDiagnostic() {$/;"	f	class:PathDiagnostic
~PathDiagnosticControlFlowPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticControlFlowPiece::~PathDiagnosticControlFlowPiece() {}$/;"	f	class:PathDiagnosticControlFlowPiece
~PathDiagnosticEventPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticEventPiece::~PathDiagnosticEventPiece() {}$/;"	f	class:PathDiagnosticEventPiece
~PathDiagnosticMacroPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticMacroPiece::~PathDiagnosticMacroPiece() {$/;"	f	class:PathDiagnosticMacroPiece
~PathDiagnosticPiece	Core/PathDiagnostic.cpp	/^PathDiagnosticPiece::~PathDiagnosticPiece() {}$/;"	f	class:PathDiagnosticPiece
~PlistDiagnostics	Core/PlistDiagnostics.cpp	/^    ~PlistDiagnostics() { FlushDiagnostics(NULL); }$/;"	f	class:__anon7::PlistDiagnostics
~RangedBugReport	Core/BugReporter.cpp	/^RangedBugReport::~RangedBugReport() {}$/;"	f	class:RangedBugReport
~RegionStoreSubRegionMap	Core/RegionStore.cpp	/^  ~RegionStoreSubRegionMap() {}$/;"	f	class:__anon32::RegionStoreSubRegionMap
~RetainSummaryManager	Core/CFRefCount.cpp	/^RetainSummaryManager::~RetainSummaryManager() {}$/;"	f	class:RetainSummaryManager
~SimpleConstraintManager	Core/SimpleConstraintManager.cpp	/^SimpleConstraintManager::~SimpleConstraintManager() {}$/;"	f	class:clang::ento::SimpleConstraintManager
~SimpleSValBuilder	Core/SimpleSValBuilder.cpp	/^  virtual ~SimpleSValBuilder() {}$/;"	f	class:__anon54::SimpleSValBuilder
~StmtNodeBuilder	Core/CoreEngine.cpp	/^StmtNodeBuilder::~StmtNodeBuilder() {$/;"	f	class:StmtNodeBuilder
~SymbolManager	Core/SymbolManager.cpp	/^SymbolManager::~SymbolManager() {}$/;"	f	class:SymbolManager
~SymbolVisitor	Core/SymbolManager.cpp	/^SymbolVisitor::~SymbolVisitor() {}$/;"	f	class:SymbolVisitor
~UbigraphViz	Frontend/AnalysisConsumer.cpp	/^UbigraphViz::~UbigraphViz() {$/;"	f	class:UbigraphViz
~UnixAPIChecker	Checkers/UnixAPIChecker.cpp	/^  ~UnixAPIChecker() {$/;"	f	class:__anon136::UnixAPIChecker
~Visitor	Core/CoreEngine.cpp	/^WorkList::Visitor::~Visitor() {}$/;"	f	class:WorkList::Visitor
~WorkList	Core/CoreEngine.cpp	/^WorkList::~WorkList() {}$/;"	f	class:WorkList
